# Rapicorn						-*-mode:makefile;-*-
# Copyright (C) 2006 Tim Janik
#
## GNU Lesser General Public License version 2 or any later version.

# declare variables that we might want to use += on.
INCLUDES=
EXTRA_HEADERS=
MAINTAINERCLEANFILES=$(GENERATED)
CLEANFILES=$(GENERATED_CLEANFILES)
GENERATED_EXTRA_DIST=
GENERATED_CLEANFILES=
GENERATED=$(strip $(GENERATED_EXTRA_DIST) $(GENERATED_CLEANFILES))
EXTRA_DIST=$(GENERATED_EXTRA_DIST)

# Verbosity macros
Q       = $(if $(findstring 1, $(V)) ,, @)
QGEN    = $(Q:@=@echo '  GEN   ' $@; )
QSTDERR = $(Q:@=2>/dev/null)
QSTDOUT = $(Q:@=1>/dev/null)

# == X11 for Unit Tests ==
x11test_log   = $(abs_top_builddir)/.x11test.log
DISPLAYHASH   = x11test-$(shell echo "$(PACKAGE) $(abs_top_builddir)" | md5sum | sed 's/\(.\{7\}\).*/\1/')
X11TEST_FIND  = \
  for F in $$(ps -eo pid,args | \
    sed -n '{s/^\s*\([0-9]\+\)\s\+Xephyr :\([0-9]\+\) -displayID $(DISPLAYHASH)\b.*/\1:\2/; Tdone; p; :done }') nil ; do \
    X11TEST_PID=$${F/:*/} ; X11TEST_DISPLAY=$${F/*:/} ; \
    xset -display :$$X11TEST_DISPLAY q >/dev/null 2>&1 && break ; done
x11test-find:
	@$(X11TEST_FIND) || { echo "$(MAKECMDGOALS): no X11 test server, issue: make x11start" ; exit 1 ; } \
	&& echo "x11test: pid=$$X11TEST_PID display=$$X11TEST_DISPLAY"
x11test-start:
	@$(X11TEST_FIND) || { \
	  Xephyr -help 2>&1 | grep -q display || { echo "$(MAKECMDGOALS): failed to start Xephyr"; exit 1 ; } \
	  && for idoffs in `seq 1001 1500` ; do X11TEST_DISPLAY=$$(($$idoffs + $$RANDOM % 500)) \
	  && test ! -e /tmp/.X$$X11TEST_DISPLAY-lock && break ; done \
	  || { echo "$(MAKECMDGOALS): out of available X11 Display IDs"; exit 1 ; }; \
	  Xephyr :$$X11TEST_DISPLAY -displayID $(DISPLAYHASH) -screen 800x600x32 -nolisten tcp \
	         -auth /dev/null -noreset -retro >$(x11test_log) 2>&1 & X11TEST_PID="$$!" ; } \
	&& echo "x11test: pid=$$X11TEST_PID display=$$X11TEST_DISPLAY"
x11test-stop:
	@$(X11TEST_FIND) || { echo "$(MAKECMDGOALS): no x11test running" ; exit 0 ; } \
	&& kill -SIGTERM $$X11TEST_PID \
	&& test -z `ps -o pid=  $$X11TEST_PID` || { sleep 1 ; kill -SIGKILL $$X11TEST_PID 2>/dev/null ; } \
	|| true
export X11TEST_DISPLAY ?= $(shell $(X11TEST_FIND) && echo ":$$X11TEST_DISPLAY")
# use: $(X11TEST_SERVER) && someprogram # sets $DISPLAY
X11TEST_SERVER := \
  if [ -z "$$X11TEST_DISPLAY" ] ; then \
    Xvfb -help 2>&1 | grep -q display || { echo "$(MAKECMDGOALS): failed to start Xvfb" ; exit -2 ; } \
    && for idoffs in `seq 1001 1500` ; do D=$$(($$idoffs + $$RANDOM % 500)) \
    && test ! -e /tmp/.X$$D-lock && break ; done \
    || { echo "$(MAKECMDGOALS): out of available X11 Display IDs" ; exit -2 ; } \
    && { Xvfb :$$D -screen 0 800x600x24 -nolisten tcp -auth /dev/null -noreset -retro >>$(x11test_log) 2>&1 & } \
    && trap "set +x; kill -15 $$!" 0 HUP INT QUIT TRAP ILL ABRT FPE SEGV PIPE ALRM TERM BUS SYS XCPU XFSZ USR1 \
    && until xset -display :$$D q >/dev/null 2>&1 ; do sleep 0.1 ; done && DISPLAY=:$$D ; \
  else DISPLAY="$$X11TEST_DISPLAY" ; \
  fi && export DISPLAY
XLIBSTDERREXTFIX = 2> >(egrep -v -e '^Xlib: *extension "RANDR" missing on display ":' >&2)
CLEANFILES += $(if $(filter $(top_builddir), . ), $(x11test_log))

# === distfile-list ===
# recursive rule supported by all Makefiles to generate a list of all files
# listed as DISTFILES. this asserts a writable file named $DISTFILE_LIST.
.PHONY: distfile-list
distfile-list:
	@if test ! -f "$(DISTFILE_LIST)" ; then				\
		echo 'distfile-list: $$(DISTFILE_LIST) is unwritable' ;	\
		exit 1 ;						\
	fi
	@for subdir in $(SUBDIRS) ; do				\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) $@ ||		\
	    exit 1 ;						\
	done
	for file in $(DISTFILES) ; do				\
	  test -e "$$file" &&					\
	    echo "$(subdir)/$$file" >> $(DISTFILE_LIST) ;	\
	done ; true

# === check: check-before / check-after ===
.PHONY: check-before check-after
check-am: check-before
check-local: check-after
check-local: ; @:
TESTS=
TSTV1=test-verbose

# === slowcheck ===
slowcheck: slowcheck-recursive
.PHONY: slowcheck-recursive slowcheck
slowcheck-recursive:		# rule to run slowcheck recursively in subdirs
	@for subdir in $(SUBDIRS) ; do                  	\
	  test "$$subdir" = '.' ||                              \
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) slowcheck ||  \
	    exit $$? ;                                          \
	done
define slowcheck_parallel_TEMPLATE
.PHONY: slowcheck_parallel--$(1)
slowcheck_parallel--$(1): $(1)
	$$(Q) $$(X11TEST_SERVER) \
	&& RAPICORN="$$$$RAPICORN:$$(TSTV$$(V)):test-slow" ./$(1) ; _e=$$$$?; \
	  [ $$$$_e = 0 ] || { echo "FAILED($$$$_e): $(1)" ; exit $$$$_e; }
slowcheck: slowcheck_parallel--$(1)
check: @NOTDVLBUILD@ slowcheck_parallel--$(1)
endef
$(foreach PRG,$(TEST_PROGS),$(eval $(call slowcheck_parallel_TEMPLATE,$(PRG))))

# === TEST_PROGS ===
TEST_PROGS =
define check_parallel_TEMPLATE
.PHONY: check_parallel--$(1)
check_parallel--$(1): $(1)
	$$(Q) $$(X11TEST_SERVER) \
	&& RAPICORN="$$$$RAPICORN:$$(TSTV$$(V))" ./$(1) ; _e=$$$$?; \
	  [ $$$$_e = 0 ] || { echo "FAILED($$$$_e): $(1)" ; exit $$$$_e; }
check: check_parallel--$(1)
endef
$(foreach PRG,$(TEST_PROGS),$(eval $(call check_parallel_TEMPLATE,$(PRG))))

# === LOGTEST_PROGS ===
LOGTEST_PROGS =
define check_logtest_TEMPLATE
.PHONY: check_logtest--$(1)
check_logtest--$(1): $(1)
	$$(Q) $$(X11TEST_SERVER) \
	&& tstout="$(1).log" \
	&& RAPICORN="$$$$RAPICORN:$$(TSTV$$(V)):test-log" ./$(1) >"$$$$tstout" 2>&1 \
	; eval "$$$$TSTDIAGNOSE_LOGTEST" "'$(1)'" \
	; eval "$$$$TSTVERIFY" "'$$(srcdir)/$(1).ref'" "'$$$$tstout'" "'$(1)'"
check: check_logtest--$(1)
endef
$(foreach PRG,$(LOGTEST_PROGS),$(eval $(call check_logtest_TEMPLATE,$(PRG))))
### Auto-Create refs: 	; $${FORCECHECKUPDATE} || { test -e "$$(srcdir)/$(1).ref" || touch "$$(srcdir)/$(1).ref" ; }

# === ALLTESTS ===
ALLTESTS = $(TESTS) $(TEST_PROGS) $(LOGTEST_PROGS) # used in noinst_PROGRAMS

# === Test-rule macros ===
FORCECHECKUPDATE = false
export MAKE_TARGET      = $@
export MAKE_TARGET_FILE = $(@F)
export MAKE_TARGET_DIR  = $(@D)
export FAILOK           = FAIL  OK
### eval $$TSTDIAGNOSE ['TESTNAME'] - show test title and result atomically
export TSTDIAGNOSE = _e=$$?; tstdiagnose() { printf '  CHECK  %-64s%s\n' "$${1:-$$MAKE_TARGET_FILE}:" \
				"$${FAILOK:$$(($$_e?0:6)):6}"; [ $$_e = 0 ] || exit $$_e; }; tstdiagnose
export TSTDIAGNOSE_LOGTEST = _e=$$?; tstdiagnose() { printf '  LOGTST %-64s%s\n' "$${1:-$$MAKE_TARGET_FILE}:" \
				"$${FAILOK:$$(($$_e?0:6)):6}"; [ $$_e = 0 ] || exit $$_e; }; tstdiagnose
### eval $$TSTVERIFY ['TESTREF'] ['TESTLOG'] ['TESTNAME']
export TSTVERIFY = tstverify() { \
	${FORCECHECKUPDATE} && { cp $(if $(Q),,-v) $${2:-$(TSTOUT)} $${1:-$(TSTREF)} ; FAILOK="FAIL "" FORCED" ; } ; \
	cmp --quiet $${1:-$(TSTREF)} $${2:-$(TSTOUT)} ; _e=$$? ; \
	printf '  CMPLOG %-64s%s\n' "$${3:-$$MAKE_TARGET_FILE}:" "$${FAILOK:$$(($$_e?0:6)):6}" ; \
	test $$_e = 0 || { diff -up $${1:-$(TSTREF)} $${2:-$(TSTOUT)} ; exit $$_e ; } ; rm -f $${2:-$(TSTOUT)} ; \
} ; tstverify
# $(call TSTOUT, [postfix]) - test output filename
TSTOUT = $(strip xtst$(strip $(1))-$(@F).out)
# $(call TSTTMP, [postfix]) - temporary test filename
TSTTMP = $(strip xtst$(strip $(1))-$(@F).tmp)

# === force-check-update ===
force-check-update:
	$(MAKE) FORCECHECKUPDATE=true check


# === report ===
.PHONY: report
report: all
	@export   REPORTFILE="$(REPORTFILE)" && [ -z "$$REPORTFILE" ]		\
	&& export REPORTFILE="$(shell pwd)/report.out"				\
	; (  echo -n    "#TSTREPORT: install: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) install 					\
	  && echo -n    "#TSTREPORT: check: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) check 					\
	  && echo -n    "#TSTREPORT: installcheck: " && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck				\
	  && echo -n    "#TSTREPORT: slowcheck: "    && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) slowcheck					\
	  && echo -n    "#TSTREPORT: done: "	     && date --iso-8601=seconds	\
	) 2>&1 | tee "$$REPORTFILE"


# === Release Configuration ===
# RELEASE_VERSION   # defaults to, default: $(VERSION)
# RELEASE_REVNAME   # micro revision variable name, default: VERSION_PATCHLEVEL
# RELEASE_TARBALL   # release tarball name, default: $(distdir).tar.?z*
# RELEASE_DESTHOST  # destination host for tarball uploads
# RELEASE_DESTPATH  # destination host path for tarball uploads
# RELEASE_REVISION  # micro revision, defaults to expanding $(RELEASE_REVNAME)
# RELEASE_REVNEXT   # next micro revision, defaults to incrementing $(RELEASE_REVISION)
# RELEASE_CHANGELOG # generated ChangeLog file name, if generation desired
# RELEASE_CHL_RANGE # ChangeLog revision range for git log, default: HEAD
# RELEASE_CHL_ADD   # plaint text file to be appended to generated ChangeLog
# === Release auxillary rule defaults ===
RELAUX_VERSION   = $(strip $(or $(RELEASE_VERSION), $(VERSION)))
RELAUX_REVNAME   = $(strip $(or $(RELEASE_REVNAME), VERSION_PATCHLEVEL))
RELAUX_FILE      = $(strip $(or $(RELEASE_TARBALL), $(word 1, $(shell echo $(distdir).tar.?z*))))
RELAUX_DESTHOST  = $(strip $(or $(RELEASE_DESTHOST), example.com))
RELAUX_DESTPATH  = $(strip $(or $(RELEASE_DESTPATH), distpath/projectname))
RELAUX_REVISION  = $($(RELAUX_REVNAME))
RELAUX_REVNEXT   = $(strip $(or $(RELEASE_REVNEXT), $(shell echo '1 + $(RELAUX_REVISION)' | bc)))
RELAUX_CHANGELOG = $(strip $(RELEASE_CHANGELOG))
RELAUX_CHL_RANGE = $(strip $(or $(RELEASE_CHL_RANGE), HEAD))
RELAUX_CHL_ADD   = $(strip $(RELEASE_CHL_ADD))
# --- ChangeLog ---
RELAUX_GITSTAMPS = $(shell ls "$${GIT_DIR:-.git}/`git symbolic-ref -q HEAD || echo HEAD`" \
			   "$${GIT_DIR:-.git}/packed-refs"  "$${GIT_DIR:-.git}/HEAD" 2>/dev/null )
${RELAUX_CHANGELOG}:	${RELAUX_CHL_ADD} ${RELAUX_GITSTAMPS} Makefile.am
	@ # Generate ChangeLog with -prefixed records
	git log ${RELAUX_CHL_RANGE} > xgen-0$(@F) \
	   --pretty='tformat:%ai  %an 	# %h%n%n%s%n%n%b'
	@ # Append old style ChangeLog
	cat xgen-0$(@F) ${RELAUX_CHL_ADD} > xgen-1$(@F)
	@ # Tab-indent ChangeLog, except for record start
	sed 's/^/	/; s/^	//; /^[ 	]*<unknown>$$/d' < xgen-1$(@F) > xgen-0$(@F)
	@ # Kill trailing whitespaces
	sed 's/[[:space:]]\+$$//' < xgen-0$(@F) > xgen-1$(@F)
	@ # Compress multiple newlines
	sed '/^\s*$$/{ N; /^\s*\n\s*$$/D }' < xgen-1$(@F) > xgen-0$(@F)
	@ # Cleanup, replace atomically
	rm -f xgen-1$(@F)
	mv xgen-0$(@F) $@
all-am: ${RELAUX_CHANGELOG}
EXTRA_DIST  += ${RELAUX_CHANGELOG}
# --- release-upload ---
release-upload: $(RELAUX_CHANGELOG) # serialized steps, for parallel invocation
	@echo -n "  Checking for a clean $(RELAUX_VERSION) working tree...                    "
	@test 0 = `git diff HEAD | wc -l` \
	|| (echo FAIL && echo "note: use 'git diff HEAD' to view working tree changes" && false)
	@echo "OK"
	@echo -n "  Checking untagged revision $(RELAUX_VERSION)...                           "
	@! git rev-parse --verify -q "$(RELAUX_VERSION)" > /dev/null \
	|| (echo FAIL && echo -n "note: tag $(RELAUX_VERSION) exists: " \
            && git rev-parse $(RELAUX_VERSION) && false)
	@echo "OK"
	@echo -n "  Checking release file $(RELAUX_FILE)...                  "
	@test -e "$(RELAUX_FILE)" || (echo "FAIL" && false)
	@echo "OK"
	@echo -n "  Checking age of release file $(RELAUX_FILE)...           "
	@test "$(RELAUX_FILE)" -nt $(RELAUX_CHANGELOG) \
	|| (echo FAIL && echo "note: $(RELAUX_CHANGELOG) appears to be newer; make distcheck" && false)
	@echo "OK"
	@echo -n "  Checking uniqueness of release tarball $(RELAUX_FILE)... "
	@ssh $(RELAUX_DESTHOST) test ! -e "$(RELAUX_DESTPATH)/$(RELAUX_FILE)" \
	|| ( echo "FAIL (already existing)" && false )
	@echo "OK"
	@echo -n "  Checking version $(RELAUX_VERSION) for even revision...                   "
	@test "$(RELAUX_REVISION)" = "`echo '$(RELAUX_REVISION) / 2 * 2' | bc`" \
	|| (echo FAIL && echo "note: not uploading an odd revision, see configure.in:$(RELAUX_REVNAME)" && false)
	@echo "OK"
	@echo -n "  Uploading release tarball $(RELAUX_FILE)...              "
	@rsync -lpt --delay-updates "$(RELAUX_FILE)" "$(RELAUX_DESTHOST):$(RELAUX_DESTPATH)"
	@echo "OK" && echo -n "    "
	@ssh $(RELAUX_DESTHOST) ls -l \`readlink -f "$(RELAUX_DESTPATH)/$(RELAUX_FILE)"\`
	@echo -n "  Tagging HEAD as '$(RELAUX_VERSION)' release...                            "
	@git tag -m "Released $(distdir)" "$(RELAUX_VERSION)"
	@echo "OK" && echo -n "    "
	@git tag -n1 -l "$(RELAUX_VERSION)"
	@echo "  Bump configure.in:$(RELAUX_REVNAME)... "
	@sed '0,/^\($(RELAUX_REVNAME)\)=[0-9]\+/s//\1=$(RELAUX_REVNEXT)/' \
	    < $(top_srcdir)/configure.in > xgen_$$$$Z-configure.in \
	&& diff -uU2 $(top_srcdir)/configure.in xgen_$$$$Z-configure.in | sed "s/xgen_$$$$Z-//" \
	&& mv -iv xgen_$$$$Z-configure.in $(top_srcdir)/configure.in \
	&& rm -f xgen_$$$$Z-configure.in
.PHONY: release-upload
