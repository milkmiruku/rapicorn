# Rapicorn						-*-mode:makefile;-*-
# Copyright (C) 2006 Tim Janik
#
## GNU Lesser General Public License version 2 or any later version.

# declare variables that we might want to use += on.
INCLUDES=
EXTRA_HEADERS=
MAINTAINERCLEANFILES=$(GENERATED)
CLEANFILES=$(GENERATED_CLEANFILES)
GENERATED_EXTRA_DIST=
GENERATED_CLEANFILES=
GENERATED=$(strip $(GENERATED_EXTRA_DIST) $(GENERATED_CLEANFILES))
EXTRA_DIST=$(GENERATED_EXTRA_DIST)
noinst_DATA =

# Verbosity macros
_@=@
STDERR_@ = $(_@:%=2>/dev/null)
STDOUT_@ = $(_@:%=1>/dev/null)

# === distfile-list ===
# recursive rule supported by all Makefiles to generate a list of all files
# listed as DISTFILES. this asserts a writable file named $DISTFILE_LIST.
.PHONY: distfile-list
distfile-list:
	@if test ! -f "$(DISTFILE_LIST)" ; then				\
		echo 'distfile-list: $$(DISTFILE_LIST) is unwritable' ;	\
		exit 1 ;						\
	fi
	@for subdir in $(SUBDIRS) ; do				\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) $@ ||		\
	    exit 1 ;						\
	done
	for file in $(DISTFILES) ; do				\
	  test -e "$$file" &&					\
	    echo "$(subdir)/$$file" >> $(DISTFILE_LIST) ;	\
	done ; true

# === Xvfb wrapper for GUI tests ===
XVFB = Xvfb -screen 0 800x600x16
XIDS = 101 102 103 104 105 106 107 197 199 211 223 227 293 307 308 309 310 311 \
   491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 \
   991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 \
  1008 1009 4703 4721 4723 4729 4733 4751 9973 9974 9975 9976 9977 9978 9979 \
  9980 9981 9982 9983 9984 9985 9986 9987 9988 9989 9990 9991 9992 9993 9994 \
  9995 9996 9997 9998 9999
SKIP_GDKTARGET = \
	test "$(gdktarget)" != "x11" \
	&& echo "Gtk+Tests:INFO: Skipping GUI tests for non-X11 target."
XVFB_START = \
	${XVFB} -help 2>/dev/null 1>&2 \
	&& XID=`for id in $(XIDS) ; do test -e /tmp/.X$$id-lock || { echo $$id; exit 0; }; done; exit 1` \
	&& { ${XVFB} :$$XID -screen 0 800x600x16 -nolisten tcp -auth /dev/null >/dev/null 2>&1 & \
		trap "set +x ; kill -15 $$! " 0 HUP INT QUIT TRAP USR1 PIPE TERM ; } \
	|| { echo "Gtk+Tests:ERROR: Failed to start Xvfb environment for X11 target tests."; exit 1; } \
	&& DISPLAY=:$$XID && export DISPLAY
# call as: $(XVFB_START) && someprogram
XLIBSTDERREXTFIX = 2> >(egrep -v -e '^Xlib: *extension "RANDR" missing on display ":' >&2)

# === check: check-before / check-after ===
.PHONY: check-before check-after
check-am: check-before
check-local: check-after
check-local: ; @:
TESTS=

# === TEST_PROGS ===
TEST_PROGS =
.PHONY: check-TEST_PROGS
check-TEST_PROGS:
	@$(XVFB_START) && \
	  for tst in $(TEST_PROGS) ; do \
	    ./$$tst && echo "PASS: $$tst" || exit 1 ;	\
	  done
	@MESSAGETEXT="All $(words $(TEST_PROGS)) tests passed"	\
	&& [ 0 -lt $(words $(TEST_PROGS)) ]				\
	&& echo $$MESSAGETEXT | sed 's/./=/g' && echo $$MESSAGETEXT	\
	&& echo $$MESSAGETEXT | sed 's/./=/g' || true
check: check-TEST_PROGS

# === slowcheck ===
# recursive rule supported by all Makefiles to run time consuming checks
.PHONY: slowcheck slowcheck-recursive slowcheck-SLOWTESTS
slowcheck: slowcheck-recursive slowcheck-SLOWTESTS
slowcheck-recursive:
	@for subdir in $(SUBDIRS) ; do				\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) slowcheck ||	\
	    exit 1 ;						\
	done
slowcheck-SLOWTESTS:
	@$(XVFB_START) && \
	  for tst in $(SLOWTESTS) ; do \
	    ./$$tst --test-slow && echo "PASS: $$tst" || exit 1 ;	\
	  done
	@MESSAGETEXT="All $(words $(SLOWTESTS)) slow tests passed"	\
	&& [ 0 -lt $(words $(SLOWTESTS)) ]				\
	&& echo $$MESSAGETEXT | sed 's/./=/g' && echo $$MESSAGETEXT	\
	&& echo $$MESSAGETEXT | sed 's/./=/g' || true
SLOWTESTS=

# === perf ===
# recursive rule supported by all Makefiles to run performance tests
.PHONY: perf perf-recursive perf-PERFTESTS
perf: perf-recursive perf-PERFTESTS
perf-recursive:
	@for subdir in $(SUBDIRS) ; do				\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) perf ||	\
	    exit 1 ;						\
	done
perf-PERFTESTS:
	@$(XVFB_START) && \
	  for tst in $(PERFTESTS) ; do \
	    ./$$tst --test-perf && echo "PASS: $$tst" || exit 1 ;	\
	  done
	@MESSAGETEXT="All $(words $(PERFTESTS)) perf tests passed"	\
	&& [ 0 -lt $(words $(PERFTESTS)) ]				\
	&& echo $$MESSAGETEXT | sed 's/./=/g' && echo $$MESSAGETEXT	\
	&& echo $$MESSAGETEXT | sed 's/./=/g' || true
PERFTESTS=

# === ALLTESTS ===
ALLTESTS = $(TESTS) $(SLOWTESTS) $(PERFTESTS) # used in noinst_PROGRAMS

# === Test-rule macros ===
FORCECHECKUPDATE = false
# $(call TSTTITLE, [TESTNAME]) - print test title
TSTTITLE= printf '%70s'$(or $(_@:%=''),'\n') "`printf '%-68s' '$(strip $(or $(1), $(@F))):'`"
# $(call TSTOUT, [postfix]) - test output filename
TSTOUT = $(strip xtst$(strip $(1))-$(@F).out)
# $(call TSTTMP, [postfix]) - temporary test filename
TSTTMP = $(strip xtst$(strip $(1))-$(@F).tmp)
# $(call TSTREF) - test reference filename
TSTREF = $(strip $(@F).ref)
# $(call TSTRESULT, [exitcode]) - print test result (from shell exit code)
TSTRESULT = _e=$(or $(1), $$?);$(call TSTRESULT_MSG, $$_e);[ $$_e = 0 ]||exit $$_e
TSTRESULT_MSG = echo $${FAILOK:$$(($(or $(1), $$?)?0:6)):6}
export FAILOK = FAIL  OK
# $(call TSTCMP, [TSTREFERENCE], [TSTOUT]) - TSTCMP_KEEPOUT + TSTOUT cleanup
TSTCMP = $(strip	\
	$(TSTCMP_KEEPOUT) ; \
	rm -f $(or $(2), $(call TSTOUT)) \
)
# $(call TSTCMP_KEEPOUT, [TSTREFERENCE], [TSTOUT]) - TSTDIFF + forced updates
TSTCMP_KEEPOUT = $(strip	\
	${FORCECHECKUPDATE} && { \
	  cp $(if $(_@),, -v) $(or $(2), $(call TSTOUT)) $(or $(1), $(call TSTREF)) ; \
	  FAILOK="FAIL "" FORCED" ; \
	} ; \
	$(TSTDIFF) \
)
# $(call TSTDIFF, [TSTREFERENCE], [TSTOUT]) - print test result diff, abort
TSTDIFF = $(strip	\
	cmp --quiet $(or $(1), $(call TSTREF)) $(or $(2), $(call TSTOUT)) ; \
	_exitcode=$$? ; \
	$(call TSTRESULT_MSG, $$_exitcode) ; \
	test $$_exitcode = 0 || { \
	  diff -up $(or $(1), $(call TSTREF)) $(or $(2), $(call TSTOUT)) ; \
	  exit 1 ; \
	} \
)

# === force-check-update ===
force-check-update:
	$(MAKE) FORCECHECKUPDATE=true check


# === report ===
.PHONY: report
report: all
	@export REPORTFILE="$(REPORTFILE)"			\
	&& [ -z "$$REPORTFILE" ]				\
	&& export REPORTFILE="$(shell pwd)/report.out" ;	\
	( true 							\
	  && echo -n "#TREPSTART: " && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) check slowcheck perf	\
	  && echo -n "#TREPDONE: "  && date --iso-8601=seconds	\
	) 2>&1 | tee "$$REPORTFILE"


# === Release auxillary rule defaults ===
RELAUX_VERSION   = $(VERSION)
RELAUX_REVNAME   = VERSION_PATCHLEVEL
RELAUX_FILE      = $(shell echo $(distdir).tar.?z*)
RELAUX_DESTHOST  = example.com
RELAUX_DESTPATH  = distpath/projectname
RELAUX_REVISION  = $($(RELAUX_REVNAME))
RELAUX_REVNEXT   = $(shell echo '1 + $(RELAUX_REVISION)' | bc)
RELAUX_CHANGELOG =
RELAUX_CHL_RANGE = HEAD
RELAUX_CHL_ADD   =
# --- ChangeLog ---
RELAUX_GITSTAMPS = $(shell ls "$${GIT_DIR:-.git}/`git symbolic-ref -q HEAD || echo HEAD`" \
			   "$${GIT_DIR:-.git}/packed-refs"  "$${GIT_DIR:-.git}/HEAD" 2>/dev/null )
${RELAUX_CHANGELOG}:	${RELAUX_CHL_ADD} ${RELAUX_GITSTAMPS} Makefile.am
	@ # Generate ChangeLog with -prefixed records
	git log ${RELAUX_CHL_RANGE} > xgen-0$(@F) \
	   --pretty='tformat:%ai  %an 	# %h%n%n%s%n%n%b'
	@ # Append old style ChangeLog
	cat xgen-0$(@F) ${RELAUX_CHL_ADD} > xgen-1$(@F)
	@ # Tab-indent ChangeLog, except for record start
	sed 's/^/	/; s/^	//; /^[ 	]*<unknown>$$/d' < xgen-1$(@F) > xgen-0$(@F)
	@ # Kill trailing whitespaces
	sed 's/[[:space:]]\+$$//' < xgen-0$(@F) > xgen-1$(@F)
	@ # Compress multiple newlines
	sed '/^\s*$$/{ N; /^\s*\n\s*$$/D }' < xgen-1$(@F) > xgen-0$(@F)
	@ # Cleanup, replace atomically
	rm -f xgen-1$(@F)
	mv xgen-0$(@F) $@
noinst_DATA += ${RELAUX_CHANGELOG}
EXTRA_DIST  += ${RELAUX_CHANGELOG}
# --- release-upload ---
release-upload: $(RELAUX_CHANGELOG) # serialized steps, for parallel invocation
	@echo -n "  Checking for a clean $(RELAUX_VERSION) working tree...                    "
	@test 0 = `git diff HEAD | wc -l` \
	|| (echo FAIL && echo "note: use 'git diff HEAD' to view working tree changes" && false)
	@echo "OK"
	@echo -n "  Checking untagged revision $(RELAUX_VERSION)...                           "
	@! git rev-parse --verify -q "$(RELAUX_VERSION)" > /dev/null \
	|| (echo FAIL && echo -n "note: tag $(RELAUX_VERSION) exists: " \
            && git rev-parse $(RELAUX_VERSION) && false)
	@echo "OK"
	@echo -n "  Checking release file $(RELAUX_FILE)...                  "
	@test -e "$(RELAUX_FILE)" || (echo "FAIL" && false)
	@echo "OK"
	@echo -n "  Checking age of release file $(RELAUX_FILE)...           "
	@test "$(RELAUX_FILE)" -nt $(RELAUX_CHANGELOG) \
	|| (echo FAIL && echo "note: $(RELAUX_CHANGELOG) appears to be newer; make dist" && false)
	@echo "OK"
	@echo -n "  Checking uniqueness of release tarball $(RELAUX_FILE)... "
	@ssh $(RELAUX_DESTHOST) test ! -e "$(RELAUX_DESTPATH)/$(RELAUX_FILE)" \
	|| ( echo "FAIL (already existing)" && false )
	@echo "OK"
	@echo -n "  Checking version $(RELAUX_VERSION) for even revision...                   "
	@test "$(RELAUX_REVISION)" = "`echo '$(RELAUX_REVISION) / 2 * 2' | bc`" \
	|| (echo FAIL && echo "note: not uploading an odd revision, see configure.in:$(RELAUX_REVNAME)" && false)
	@echo "OK"
	@echo -n "  Uploading release tarball $(RELAUX_FILE)...              "
	@rsync -lpt --delay-updates "$(RELAUX_FILE)" "$(RELAUX_DESTHOST):$(RELAUX_DESTPATH)"
	@echo "OK" && echo -n "    "
	@ssh $(RELAUX_DESTHOST) ls -l \`readlink -f "$(RELAUX_DESTPATH)/$(RELAUX_FILE)"\`
	@echo -n "  Tagging HEAD as '$(RELAUX_VERSION)' release...                            "
	@git tag -m "Released $(distdir)" "$(RELAUX_VERSION)"
	@echo "OK" && echo -n "    "
	@git tag -n1 -l "$(RELAUX_VERSION)"
	@echo "  Bump configure.in:$(RELAUX_REVNAME)... "
	@sed '0,/^\($(RELAUX_REVNAME)\)=[0-9]\+/s//\1=$(RELAUX_REVNEXT)/' \
	    < $(top_srcdir)/configure.in > xgen_$$$$Z-configure.in \
	&& diff -uU2 $(top_srcdir)/configure.in xgen_$$$$Z-configure.in | sed "s/xgen_$$$$Z-//" \
	&& mv -iv xgen_$$$$Z-configure.in $(top_srcdir)/configure.in \
	&& rm -f xgen_$$$$Z-configure.in
.PHONY: release-upload
