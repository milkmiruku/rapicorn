// This Source Code Form is licensed MPLv2: http://mozilla.org/MPL/2.0
//						-*- mode:visual-line -*-

/*! @page aida		Aida - Abstract Interface Definition Architecture
@tableofcontents

Aida is the IDL (interface definition language) specification and compiler used to define the Rapicorn API.
The generated bindings support remote execution of methods and signals across thread boundaries and garbage collection of distributed references. The IDL compiler executable is called @c aidacc.

@section motivations Motivating considerations for the creation of Aida.

-# <b>Expressive IDL</b> - The IDL syntax is designed to at least cover the use cases of aRts, Beast and Rapicorn:
  - The IDL supports primitive types: integer, double precision floating point, string and any.
  - The IDL supports structured types: enums, records, sequences and interfaces.
  - Interfaces have support for methods, properties, signals and IO streams. @UNIMPLEMENTED{Streams are still TODO}
  - Auxiliary data is supported for enum values and properties. @UNIMPLEMENTED{Streams are still TODO}
  - Auxiliary data is specified in form of key=utf8value string pairs, so it can be used for arbitrary extensions like tooltips, float boundaries or icon references.
  - Two way calls from the client to the server are supported by blocking for arrival of the return value of a method.
  - One way calls from the client to the server are always carried out in non-blocking fashion.
  - For notification purposes, the server can emit signals, which are dispatched via callbacks on the client side.
-# <b>Extensible Code Generation</b>
  - The IDL parser is implemented in Python, as are the code generators.
  - Code generators are loaded as external Python modules.
  - Choosing Python has acceptable real-world performance and has shown to be very useful to prototype new IDL or code generator features.
  - Aidacc allows custom code generator implementations, implemented as external python scripts.
-# <b>API & ABI Separation</b>
  - The generated C++ code goes through some lengths to ensure best client side ABI flexibility.
  - ABI flexibility is achieved by providing access to the various API bits through non-virtual methods, which can be freely added to and removed from C++ classes without affecting ABI compatibility of any other API parts.
  - Methods can be added to interfaces without breaking ABI.
  - Properties can be added to interfaces without breaking ABI.
  - Signals can be added to interfaces without breaking ABI.
  - IO Streams are planned to be implemented in an ABI preserving fashion as well.
    @UNIMPLEMENTED{ABI-stable IO Stream implementations have yet to be researched.}
  - This allows isolation of the client API of a library, which is subject to various ABI and source compatibility constraints.
  - Full ABI compatibility is maintained on the client side, as long as API functionality is only added (classes, methods).
  - For controlled deprecation and removal of features, ABI impact can be limited and controlled.
-# <b>Standalone Executables</b>
  - The generated C++ code for the client side as well as the server side is structured to be easily included into existing programs or libraries, without needing any additional administrative process (like a network object broker).
  - The Aida IPC layer can be used within executables and libraries directly.
-# <b>IPC Separation</b>
  - The generated C++ code separates client and server functionality through an Aida::ClientConnection abstraction.
  - This allows remote invocation of the server functions through the client API (currently across threads).
  - Full developer control is provided on the server and client side about threading, remote connection use and main loop integration.
-# <b>Reference Counting</b>
  - Client side interface instances are always accessed through RemoteHandle smart pointers which automate resource management.
  - Remote instance lifetime is tracked through std::shared_ptr inside the RemoteHandle and inside the remote connection handling, see also @ref drc.
-# <b>Performance</b> - The IDL and generated C++ code is designed, profiled and optimized as follows:
  - Optimized IPC calls for low-latency dispatching require the Rapicorn::EventLoop implementation.
  - Generate acceptable throughput in high-performance computing scenarios (pseudo realtime).
    @UNIMPLEMENTED{The details of the Aida data port implementation still need to be finalized}
  - Allow zero-copy high-bandwidth data throughput for images and audio. @UNIMPLEMENTED{Needs shared data ports}
-# <b>Miscellaneous</b>
  - For Beast and Rapicorn, Aida is meant as a replacement for the chaotic growth of code generators, such as glib-mkenums.pl, bse/mkcproc.pl, function call marshallers, etc.

@section design Design Considerations
- 128bit Hash - In the IPC layer, all remote messages are identified via hashes, based on method signatures. The messages encode the message type, sending and receiving connections as the first 64bit quantity. This is usually followed by two 64bit quantities that encode a target method hash. Using a 128 bit hash keeps collision probabilities in the order of 10^-20 for up to 2^32 inputs (4 billion). The hash algorithm is based on SHA224 to ensure good distribution.
- The client/server split in the generated APIs ensure a clear separation of object locations. Instances are always allocated and reside on the server, clients can only invoke methods remotely and cannot transfer or create instances locally.
- The primitive types, sequences and records are always deep-copied by design and passed by value, so clients are operating on copies that are sent to or received from the server.
- Methods are only supporting "in" arguments, all primitive types, sequences and records are passed by value.
- Only the single return value of a two-way function is available to pass values "out" of a call.
- Interfaces are passed by reference into method calls, but are constrained to remote instances.

@section ImplicitBase ImplicitBase
In the server side C++ implementations, all generated interfaces are (directly or indirectly) derived from Rapicorn::Aida::ImplicitBase.
ImplicitBase provides means to introspect properties on an instance and to query the "final" type of an instance.

@subsection aida_type_name Instance Type
For dynamic language bindings such as Python, every accessible instance needs to have a "final" type that has been specified in an IDL file. This type is what is returned from the Rapicorn::Aida::ImplicitBase.__aida_type_name__() method that all instances implement.
To ensure this property, implementation classes that implement multiple IDL interfaces should ultimately derive a single IDL interface which in turn derives (directly or indirectly) from all of the required IDL interfaces.


@section ipc IPC - Interprocess / -Thread Communication

Rapicorn provides a strict split between threads with at least the following roles:
- User Thread - User threads are the threads that use the Rapicorn API, internally the API calls have an associated @a ClientConnection.
- UIThread - The main Rapicorn thread, this is the thread that runs the main event loop for Rapicorn's user interface, it has a @a ServerConnection associated with it.
- Rendering Thread - At least for the X11 backend a separate thread is used that talks to the X11 server and handles low level display server events like XExpose.

While the current IPC models is based on threads only, the separation between Client and Server thread has been implemented so that only minor extensions are needed to cross a process boundary in the future.

Procedure calls between "Client" threads (thread with a @a ClientConnection) and the "Server" thread (thread with a @a ServerConnection) are possible as follows:
- Using a remote object handle, the Client thread can send a one-way method call (void-return) to the Server and move on without further delays.
- Using a remote object handle, the Client thread can send a two-way method call to the Server, which will block until the method call result has been received.
- The Server can emit one-way signals (void-return) which Client code can connect to. Clients that run a main loop can receive notifications about such signal emissions and execute the corresponding callbacks locally.
- The Server can start an asynchronous signal emission that allows deferred collection of callback return values. This works across thread boundaries, it involves the Client sending back return results from its callback handlers. Emission will take as long as all Client callbacks have submitted back results.

@subsection drc Distributed Reference Counting

Due to the nature of the allowed IPC calls in Rapicorn, references to C++ object instances need to be maintained ("counted") only on the Server side (the Rapicorn::UIThread).
The reference counting implementation is based on std::shared_ptr and works as follows:
-# The @a ServerConnection keeps a list of all instance references that are sent to the Client, this list consists of std::shared_ptr<Instance> structures that keep the instances alive.
-# The @a ClientConnection keeps a list of all remote instances that it has received and that are exposed through the API via RemoteHandle which manages its own std::shared_ptr. The list consits of std::weak_ptr structures. Upon decrement of the last reference to a remote instance (deleter execution of the std::shared_ptr managed by RemoteHandle), the Client notifies the Server by sending a @b SEEN_GARBAGE message.
-# In response to a @b SEEN_GARBAGE message, the Server starts a garbage collection cycle. The Server moves all instance references from its alive list into a sweep list. Upon completion, it prompts the Client with a @b GARBAGE_SWEEP message to report back all garbage references. The Server may apply certain thresholds so that a @b SEEN_GARBAGE message need not result in starting a collection cycle immediately. The Server continues to serve remote calls, possibly adding new entries into its alive list that will not be affected by the current garbage collection cycle.
-# Collecting garbage in the Client works by creating a list of all the std::weak_ptr references that have expired. The list of corresponding ids is sent back to the Server in a @b GARBAGE_REPORT reply message. The Client may then succinctly delete all expired std::weak_ptr structures from its list.
-# Upon receiving the @b GARBAGE_REPORT message, the Server releases all reported ids from its sweep list. Instances remaining on the sweep list are merged back into the alive list. This completes one garbage collection cycle initiated by the @b SEEN_GARBAGE message.

*/
