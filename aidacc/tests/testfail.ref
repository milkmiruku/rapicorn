.../testfail.idl:5:26: TypeError: redefining existing identifier: a
>  Const a = 5; Const a = 6; // redefining existing identifier
>                           ^
.../testfail.idl:7:18: TypeError: redefining existing identifier: record
>  Const record = 5; // keyword assignment
>                   ^
.../testfail.idl:9:23: TypeError: redefining existing identifier: string
>  typedef string string; // keyword redefinition (without --system-typedefs)
>                        ^
.../testfail.idl:11:22: NameError: invalid characters in namespace: broken$name
>  namespace broken$name { Const a = 5; } // invalid namespace name (without --system-typedefs)
>                       ^
.../testfail.idl:13:31: TypeError: redefining existing identifier: E
>  enum E { VALUE }; Const E = 0; // typename assignment
>                                ^
.../testfail.idl:15:35: TypeError: redefining existing identifier: VALUE
>  enum E { VALUE }; Const VALUE = 0; // enum value assignment
>                                    ^
.../testfail.idl:17:17: TypeError: redefining existing identifier: TRUE
>  Const TRUE = 17; // invalid constant name
>                  ^
.../testfail.idl:19:24: Trying to find ';': STRING, IDENT, '\)', '_', '\*\*', '\*', '/', '%', '\+', '-', ';', ',', '}', got '_'
>  Const tmp = "invalid" _("i18n string") "concatenation";
>                         ^
.../testfail.idl:21:1: Trying to find one of '}', ';', 'namespace', 'Const', 'enumeration', 'enum', 'typedef', 'sequence', 'record', 'interface', EOF, 'include'
>  FrobCheck tmp = 1; // FrobCheck is no type
>  ^
.../testfail.idl:23:16: Trying to find one of '}', ';', 'namespace', 'Const', 'enumeration', 'enum', 'typedef', 'sequence', 'record', 'interface', EOF, 'include'
>  Const zzz = 1; zzz tmp = 1; // zzz is no type
>                 ^
.../testfail.idl:25:25: Trying to find one of '=', ';'
>  record DupRecord { int a, b, c; }; // fail on multiple fields per type
>                          ^
.../testfail.idl:27:36: NameError: duplicate field name: b
>  record DupRecord { int b; int b; }; // duplicate: b
>                                     ^
.../testfail.idl:29:22: Trying to find one of '::', IDENT
>  record EmptyRecord { }; // record is empty
>                       ^
.../testfail.idl:31:28: TypeError: redefining existing identifier: record
>  enum ExtensiveEnum { record, }; // keyword as enum value
>                             ^
.../testfail.idl:33:25: Trying to find one of '=', ',', '}'
>  enum ExtensiveEnum { Foo; }; // semicolon in enum
>                          ^
.../testfail.idl:35:35: TypeError: redefining existing identifier: EV1
>  enum ExtensiveEnum { EV1, EV2, EV1 }; // duplicate enum value
>                                    ^
.../testfail.idl:37:33: TypeError: redefining existing identifier: AA
>  enum Enu1 { AA }; enum Enu2 { AA }; // duplicate enum value
>                                  ^
.../testfail.idl:39:35: TypeError: redefining existing identifier: Enu1
>  enum Enu1 { AA }; enum Enu1 { BB }; // duplicate enum name
>                                    ^
.../testfail.idl:41:40: TypeError: redefining existing identifier: Var
>  Const Var = 0; enum ExtensiveEnum { Var }; // constant in enum
>                                         ^
.../testfail.idl:43:26: Trying to find one of '::', IDENT
>  sequence EmptySequence { }; // sequence needs 1 field
>                           ^
.../testfail.idl:45:41: Trying to find one of '}'
>  sequence MultiFieldSequence { bool one; int toomany; }; // sequence needs 1 field
>                                          ^
.../testfail.idl:47:22: TypeError: unknown type: 'enum'
>  sequence Seq { enum b; }; // keyword is not typename
>                       ^
.../testfail.idl:49:45: TypeError: unknown type: '_S1'
>  sequence S1 { bool b; }; sequence S2 { _S1 s; }; // need existing typenames
>                                              ^
.../testfail.idl:51:52: TypeError: redefining existing identifier: Dup
>  sequence Dup { bool b; }; sequence Dup { bool b; }; // duplicate definition
>                                                     ^
.../testfail.idl:53:16: TypeError: unknown type: 'Const'
>  typedef Const X; // unknown type Const
>                 ^
.../testfail.idl:55:20: TypeError: redefining existing identifier: Const
>  typedef bool Const; // keyword redefinition
>                     ^
.../testfail.idl:57:17: TypeError: redefining existing identifier: class
>  Const class = 5; // keyword redefinition
>                  ^
.../testfail.idl:59:37: TypeError: redefining existing identifier: Enu1
>  enum Enu1 { AA }; typedef Enu1 Enu1; // type redefinition
>                                      ^
.../testfail.idl:61:43: TypeError: invalid type definition: = _No_SUCH_initializer (17,)
>  typedef int x = _No_SUCH_initializer (17); // unknown type definition
>                                            ^
.../testfail.idl:63:72: TypeError: too many args for type definition: = Int ('"too"', '"many"', '"args"', 1, 2, 3, 4, 5, 6, 7, 8, 9)
>  ...nt ("too", "many", "args", 1, 2, 3, 4, 5, 6, 7, 8, 9); // too many args
>                                                           ^
.../testfail.idl:65:67: TypeError: invalid type definition: = String ('"nick"', '"txt"', '"dflt"', '"rw"')
>  ...t string_for_num = String ("nick", "txt", "dflt", "rw"); // type/initializer mismatch
>                                                             ^
.../testfail.idl:67:73: TypeError: invalid type definition: = Float ('"x"', '"X coord"', 0, 0, 100.0, 0.5, '"ro"')
>  ... s = Float ("x", "X coord", 0, 0, 100.0, +.5, "ro"); }; // type/initializer mismatch
>                                                            ^
.../testfail.idl:69:27: Trying to find one of '::', IDENT, '\)'
>  interface I { int method (,); }; // invalid method arg separator
>                            ^
.../testfail.idl:70:47: NameError: duplicate member name: method
>  interface I { int method (); int method (); }; // multiple method definitions
>                                                ^
.../testfail.idl:71:38: NameError: duplicate member name: xxx
>  interface I { int xxx; int xxx (); }; // multiple member definitions
>                                       ^
.../testfail.idl:72:44: NameError: duplicate method arg name: method (...n...)
>  interface I { int method (int n, int n); }; // duplicate method argument
>                                             ^
.../testfail.idl:73:22: TypeError: no such interface type: Unknown
>  interface I : Unknown {}; // invalid parent interface
>                       ^
.../testfail.idl:74:40: TypeError: no such interface type: R
>  record R { string s; }; interface I : R {}; // invalid interface inheritance
>                                         ^
.../testfail.idl:75:30: TypeError: non-method invalidly declared as 'signal': xxx
>  interface I { signal int xxx; }; // invalidly declared as signal
>                               ^
.../testfail.idl:76:17: TypeError: redefining existing identifier: void
>  Const void = 17; // invalid constant name
>                  ^
.../testfail.idl:77:1: Trying to find one of '}', ';', 'namespace', 'Const', 'enumeration', 'enum', 'typedef', 'sequence', 'record', 'interface', EOF, 'include'
>  void xy = 17; // invalid property type
>  ^
.../testfail.idl:78:31: Trying to find one of '::', IDENT
>  interface I { int method (void); }; // invalid argument type
>                                ^
.../testfail.idl:79:40: TypeError: unknown type: 'void'
>  interface I { int method (int n, void v); }; // invalid argument type
>                                         ^
.../include-f2.idl:2:3: Trying to find one of '}', ';', 'namespace', 'Const', 'enumeration', 'enum', 'typedef', 'sequence', 'record', 'interface', EOF, 'include'
>    unexisting_var var;
>    ^
.../include-f1.idl:1: note: included "include-f2.idl" from here
.../testfail.idl:81: note: included "include-f1.idl" from here
.../testfail.idl:83:57: TypeError: redefining existing identifier: E1
>  namespace B { enum E { E1 }; } namespace B { enum E { E1 }; } // namespaced type redefinition
>                                                          ^
.../testfail.idl:85:71: TypeError: redefining existing identifier: E1
>  ...espace B { enum E { E1 }; } namespace B { enum E { E1 }; } } // namespaced type redefinition
>                                                          ^
.../testfail.idl:87:38: NameError: invalid method arg name: method (...self...)
>  interface I { int method (I self); }; // invalid method arg name
>                                       ^
.../testfail.idl:89:27: NameError: invalid property name: self
>  interface I { int self; }; // invalid property name
>                            ^
.../testfail.idl:90:55: AttributeError: missing subsequent default initializer: method (...c...)
>  interface I { int method (int a, int b = 2, int c); }; // missing subsequent default initializer
>                                                        ^
.../testfail.idl:91:33: TypeError: non-method invalidly declared as pure: m
>  interface I { signal int m() = 0; }; // invalid pure decl for non-method
>                                  ^
.../testfail.idl:93:30: TypeError: unknown type: 'void'
>  interface P { void void_prop; }; // invalid property type
>                               ^
.../testfail.idl:95:56: TypeError: redefining existing identifier: I
>  interface I; interface I {}; interface I; interface I {}; // interface redefinition
>                                                         ^
.../testfail.idl:97:15: AttributeError: invalid empty enumeration: Empty
>  enum Empty { }; // invalid empty enumeration
>                ^
