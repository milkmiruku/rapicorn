// --- Generated by AidaCxxStub ---

// --- ServerHH Boilerplate ---
#include <aidacc/runtime.hh>

#include <rapicorn-core.hh> // for rcore/signal.hh
using Rapicorn::Signals::slot;

// --- ClientCC/ServerCC Boilerplate ---
#include <string>
#include <vector>
#include <stdexcept>
#ifndef __AIDA_GENERIC_CC_BOILERPLATE__
#define __AIDA_GENERIC_CC_BOILERPLATE__

#define AIDA_CHECK(cond,errmsg) do { if (cond) break; throw std::runtime_error (std::string ("AIDA-ERROR: ") + errmsg); } while (0)

namespace { // Anonymous
using Aida::uint64_t;

static __attribute__ ((__format__ (__printf__, 1, 2), unused))
Aida::FieldBuffer* aida$_error (const char *format, ...)
{
  va_list args;
  va_start (args, format);
  Aida::error_vprintf (format, args);
  va_end (args);
  return NULL;
}

} // Anonymous
#endif // __AIDA_GENERIC_CC_BOILERPLATE__

#include <aidacc/cxxstubaux.hh>


#ifndef AIDA_CONNECTION
#define AIDA_CONNECTION()       (*(Aida::ServerConnection*)NULL)
template<class O> O*  connection_id2object (Aida::uint64_t oid) { return dynamic_cast<O*> (reinterpret_cast<Aida::SimpleServer*> (oid)); }
inline Aida::uint64_t connection_object2id (const Aida::SimpleServer *obj) { return reinterpret_cast<ptrdiff_t> (obj); }
inline Aida::uint64_t connection_object2id (const Aida::SimpleServer &obj) { return connection_object2id (&obj); }
#endif // !AIDA_CONNECTION


// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {

enum Empty {
};
inline void operator<<= (Aida::FieldBuffer &fb,  Empty  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Empty &e) { e = Empty (frr.pop_evalue()); }

enum Enum1 {
  E1_A = 1,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum1  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum1 &e) { e = Enum1 (frr.pop_evalue()); }

enum Enum1c {
  E1C_A = 1,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum1c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum1c &e) { e = Enum1c (frr.pop_evalue()); }

enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum2  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum2 &e) { e = Enum2 (frr.pop_evalue()); }

enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum2c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum2c &e) { e = Enum2c (frr.pop_evalue()); }

enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum3  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum3 &e) { e = Enum3 (frr.pop_evalue()); }

enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum3c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum3c &e) { e = Enum3c (frr.pop_evalue()); }

enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4a  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4a &e) { e = Enum4a (frr.pop_evalue()); }

enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4b  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4b &e) { e = Enum4b (frr.pop_evalue()); }

enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4c &e) { e = Enum4c (frr.pop_evalue()); }

enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4d  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4d &e) { e = Enum4d (frr.pop_evalue()); }

enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
inline void operator<<= (Aida::FieldBuffer &fb,  ExtensiveEnum  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, ExtensiveEnum &e) { e = ExtensiveEnum (frr.pop_evalue()); }

/** @interface FirstInterface
 * See also the corresponding C++ class I_FirstInterface_Interface (server side). */
/// See also the corresponding IDL class FirstInterface.
class I_FirstInterface_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_FirstInterface_Interface ();
  virtual /*Des*/                       ~I_FirstInterface_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual void                          void_func                  ();
};
void operator<<= (Aida::FieldBuffer&, I_FirstInterface_Interface&);
void operator<<= (Aida::FieldBuffer&, I_FirstInterface_Interface*);
void operator>>= (Aida::FieldReader&, I_FirstInterface_Interface*&);

/** @interface XFooRecord
 * See also the corresponding C++ class XFooRecordImpl (server side). */
/// See also the corresponding IDL class XFooRecord.
struct XFooRecordImpl
{
  bool                          single_bool;
  int                           single_num;
  double                        single_float;
  std::string                   single_string;
  int                           sibling1;
  int                           sibling2;
  int                           multi1;
  int                           multi2;
  int                           multi3;
  int                           multi4;
  ExtensiveEnum                 enum_field;
  I_FirstInterface_Interface*   iface1;
  I_FirstInterface_Interface*   iface2;
  I_FirstInterface_Interface*   iface3;
  Aida::Any                     any1;
  Aida::Any                     any2;
  Aida::Any                     any3;
  inline                        XFooRecordImpl () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
void operator<<= (Aida::FieldBuffer&, const XFooRecordImpl&);
void operator>>= (Aida::FieldReader&, XFooRecordImpl&);

/** @interface XFooSequence
 * See also the corresponding C++ class XFooSequenceImpl (server side). */
/// See also the corresponding IDL class XFooSequence.
struct XFooSequenceImpl : public std::vector<bool>
{
  typedef std::vector<bool> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const XFooSequenceImpl&);
void operator>>= (Aida::FieldReader&, XFooSequenceImpl&);

/** @interface IntSequence
 * See also the corresponding C++ class IntSequenceImpl (server side). */
/// See also the corresponding IDL class IntSequence.
struct IntSequenceImpl : public std::vector<int>
{
  typedef std::vector<int> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const IntSequenceImpl&);
void operator>>= (Aida::FieldReader&, IntSequenceImpl&);

/** @interface FloatSequence
 * See also the corresponding C++ class FloatSequenceImpl (server side). */
/// See also the corresponding IDL class FloatSequence.
struct FloatSequenceImpl : public std::vector<double>
{
  typedef std::vector<double> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const FloatSequenceImpl&);
void operator>>= (Aida::FieldReader&, FloatSequenceImpl&);

/** @interface StringSequence
 * See also the corresponding C++ class StringSequenceImpl (server side). */
/// See also the corresponding IDL class StringSequence.
struct StringSequenceImpl : public std::vector<std::string>
{
  typedef std::vector<std::string> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const StringSequenceImpl&);
void operator>>= (Aida::FieldReader&, StringSequenceImpl&);

/** @interface ExtensiveEnumSequence
 * See also the corresponding C++ class ExtensiveEnumSequenceImpl (server side). */
/// See also the corresponding IDL class ExtensiveEnumSequence.
struct ExtensiveEnumSequenceImpl : public std::vector<ExtensiveEnum>
{
  typedef std::vector<ExtensiveEnum> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const ExtensiveEnumSequenceImpl&);
void operator>>= (Aida::FieldReader&, ExtensiveEnumSequenceImpl&);

/** @interface RecordSequence
 * See also the corresponding C++ class RecordSequenceImpl (server side). */
/// See also the corresponding IDL class RecordSequence.
struct RecordSequenceImpl : public std::vector<XFooRecordImpl>
{
  typedef std::vector<XFooRecordImpl> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const RecordSequenceImpl&);
void operator>>= (Aida::FieldReader&, RecordSequenceImpl&);

/** @interface SequenceSequence
 * See also the corresponding C++ class SequenceSequenceImpl (server side). */
/// See also the corresponding IDL class SequenceSequence.
struct SequenceSequenceImpl : public std::vector<IntSequenceImpl>
{
  typedef std::vector<IntSequenceImpl> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const SequenceSequenceImpl&);
void operator>>= (Aida::FieldReader&, SequenceSequenceImpl&);

/** @interface InterfaceSequence
 * See also the corresponding C++ class InterfaceSequenceImpl (server side). */
/// See also the corresponding IDL class InterfaceSequence.
struct InterfaceSequenceImpl : public std::vector<I_FirstInterface_Interface*>
{
  typedef std::vector<I_FirstInterface_Interface*> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const InterfaceSequenceImpl&);
void operator>>= (Aida::FieldReader&, InterfaceSequenceImpl&);

/** @interface AnySequence
 * See also the corresponding C++ class AnySequenceImpl (server side). */
/// See also the corresponding IDL class AnySequence.
struct AnySequenceImpl : public std::vector<Aida::Any>
{
  typedef std::vector<Aida::Any> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const AnySequenceImpl&);
void operator>>= (Aida::FieldReader&, AnySequenceImpl&);

/** @interface NestedTypesRec
 * See also the corresponding C++ class NestedTypesRecImpl (server side). */
/// See also the corresponding IDL class NestedTypesRec.
struct NestedTypesRecImpl
{
  XFooRecordImpl                rec;
  XFooSequenceImpl              seq;
  inline                        NestedTypesRecImpl () { }
};
void operator<<= (Aida::FieldBuffer&, const NestedTypesRecImpl&);
void operator>>= (Aida::FieldReader&, NestedTypesRecImpl&);

/** @interface NestedTypesSeq
 * See also the corresponding C++ class NestedTypesSeqImpl (server side). */
/// See also the corresponding IDL class NestedTypesSeq.
struct NestedTypesSeqImpl : public std::vector<NestedTypesRecImpl>
{
  typedef std::vector<NestedTypesRecImpl> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const NestedTypesSeqImpl&);
void operator>>= (Aida::FieldReader&, NestedTypesSeqImpl&);

typedef Aida::Any AliasAny;

typedef int AliasInt;

typedef double AliasFloat;

typedef bool AliasBool;

typedef std::string AliasString;

typedef XFooRecordImpl AliasRecord;

typedef XFooSequenceImpl AliasSequence;

typedef ExtensiveEnum AliasEnum;

/** @interface NewRecord
 * See also the corresponding C++ class NewRecordImpl (server side). */
/// See also the corresponding IDL class NewRecord.
struct NewRecordImpl
{
  int                           i;
  Enum1                         enum1;
  XFooSequenceImpl              xfs;
  NestedTypesRecImpl            ntr;
  inline                        NewRecordImpl () { i = 0; enum1 = Enum1 (0); }
};
void operator<<= (Aida::FieldBuffer&, const NewRecordImpl&);
void operator>>= (Aida::FieldReader&, NewRecordImpl&);

namespace Inner {

/** @interface InnerRecord
 * See also the corresponding C++ class InnerRecordImpl (server side). */
/// See also the corresponding IDL class InnerRecord.
struct InnerRecordImpl
{
  int                           x;
  int                           y;
  NewRecordImpl                 rec;
  inline                        InnerRecordImpl () { x = 0; y = 0; }
};
void operator<<= (Aida::FieldBuffer&, const InnerRecordImpl&);
void operator>>= (Aida::FieldReader&, InnerRecordImpl&);
} // Inner

/** @interface Refer2Inner
 * See also the corresponding C++ class Refer2InnerImpl (server side). */
/// See also the corresponding IDL class Refer2Inner.
struct Refer2InnerImpl
{
  Inner::InnerRecordImpl        r;
  inline                        Refer2InnerImpl () { }
};
void operator<<= (Aida::FieldBuffer&, const Refer2InnerImpl&);
void operator>>= (Aida::FieldReader&, Refer2InnerImpl&);
} // MandatoryNamespace

namespace OtherNamespace {

/** @interface SomeRecord
 * See also the corresponding C++ class SomeRecordImpl (server side). */
/// See also the corresponding IDL class SomeRecord.
struct SomeRecordImpl
{
  MandatoryNamespace::NewRecordImpl r1;
  MandatoryNamespace::NewRecordImpl r2;
  MandatoryNamespace::Inner::InnerRecordImpl r3;
  MandatoryNamespace::Inner::InnerRecordImpl r4;
  inline                        SomeRecordImpl () { }
};
void operator<<= (Aida::FieldBuffer&, const SomeRecordImpl&);
void operator>>= (Aida::FieldReader&, SomeRecordImpl&);
} // OtherNamespace

namespace Auxdata {

typedef int bar;

typedef double x;

typedef std::string s;
} // Auxdata

namespace InterfaceTests {

/** @interface UIWidgetArea
 * See also the corresponding C++ class I_UIWidgetArea_Interface (server side). */
/// See also the corresponding IDL class UIWidgetArea.
class I_UIWidgetArea_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_UIWidgetArea_Interface ();
  virtual /*Des*/                       ~I_UIWidgetArea_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual double                        dummy    () const = 0;
  virtual void                          dummy    (double) = 0;
  virtual std::string                   on_click () const = 0;
  virtual void                          on_click (const std::string&) = 0;
  typedef Rapicorn::Signals::Signal<I_UIWidgetArea_Interface, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::Signal<I_UIWidgetArea_Interface, double (I_UIWidgetArea_Interface &ba1, int someint)> Signal_sample_signal;
  Signal_void_signal sig_void_signal;
  Signal_sample_signal sig_sample_signal;
  virtual double                        simple_method            ();
  virtual double                        single_arg               (int n);
  virtual double                        single_arg2              (int n = 5);
  virtual double                        two_args                 (int n,
                                                                  double r);
  virtual double                        two_args2                (int n = 6,
                                                                  double r = 7.7);
  virtual double                        multi_args               (int n,
                                                                  double r,
                                                                  int i,
                                                                  const std::string &s = "String ding",
                                                                  double y = 5);
  virtual double                        self_method              (I_UIWidgetArea_Interface &ba1,
                                                                  I_UIWidgetArea_Interface &ba2);
  virtual void                          void_method              ();
  virtual std::string                   on_click2out             ();
  virtual void                          on_click2in              (const std::string &command);
};
void operator<<= (Aida::FieldBuffer&, I_UIWidgetArea_Interface&);
void operator<<= (Aida::FieldBuffer&, I_UIWidgetArea_Interface*);
void operator>>= (Aida::FieldReader&, I_UIWidgetArea_Interface*&);

/** @interface Parent
 * See also the corresponding C++ class I_Parent_Interface (server side). */
/// See also the corresponding IDL class Parent.
class I_Parent_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_Parent_Interface ();
  virtual /*Des*/                       ~I_Parent_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
};
void operator<<= (Aida::FieldBuffer&, I_Parent_Interface&);
void operator<<= (Aida::FieldBuffer&, I_Parent_Interface*);
void operator>>= (Aida::FieldReader&, I_Parent_Interface*&);

/** @interface Child
 * See also the corresponding C++ class I_Child_Interface (server side). */
/// See also the corresponding IDL class Child.
class I_Child_Interface : public virtual I_Parent_Interface
{
protected:
  explicit                               I_Child_Interface ();
  virtual /*Des*/                       ~I_Child_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
};
void operator<<= (Aida::FieldBuffer&, I_Child_Interface&);
void operator<<= (Aida::FieldBuffer&, I_Child_Interface*);
void operator>>= (Aida::FieldReader&, I_Child_Interface*&);

/** @interface Descendant
 * See also the corresponding C++ class I_Descendant_Interface (server side). */
/// See also the corresponding IDL class Descendant.
class I_Descendant_Interface : public virtual I_Child_Interface
{
protected:
  explicit                               I_Descendant_Interface ();
  virtual /*Des*/                       ~I_Descendant_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
};
void operator<<= (Aida::FieldBuffer&, I_Descendant_Interface&);
void operator<<= (Aida::FieldBuffer&, I_Descendant_Interface*);
void operator>>= (Aida::FieldReader&, I_Descendant_Interface*&);

/** @interface GrandChild
 * See also the corresponding C++ class I_GrandChild_Interface (server side). */
/// See also the corresponding IDL class GrandChild.
class I_GrandChild_Interface : public virtual I_Descendant_Interface
{
protected:
  explicit                               I_GrandChild_Interface ();
  virtual /*Des*/                       ~I_GrandChild_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
};
void operator<<= (Aida::FieldBuffer&, I_GrandChild_Interface&);
void operator<<= (Aida::FieldBuffer&, I_GrandChild_Interface*);
void operator>>= (Aida::FieldReader&, I_GrandChild_Interface*&);

enum QuickEnum {
  ZERO = 0,
};
inline void operator<<= (Aida::FieldBuffer &fb,  QuickEnum  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, QuickEnum &e) { e = QuickEnum (frr.pop_evalue()); }

/** @interface QuickRecord
 * See also the corresponding C++ class QuickRecordImpl (server side). */
/// See also the corresponding IDL class QuickRecord.
struct QuickRecordImpl
{
  int                           int1;
  int                           int2;
  inline                        QuickRecordImpl () { int1 = 0; int2 = 0; }
};
void operator<<= (Aida::FieldBuffer&, const QuickRecordImpl&);
void operator>>= (Aida::FieldReader&, QuickRecordImpl&);

/** @interface QuickSequence
 * See also the corresponding C++ class QuickSequenceImpl (server side). */
/// See also the corresponding IDL class QuickSequence.
struct QuickSequenceImpl : public std::vector<double>
{
  typedef std::vector<double> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const QuickSequenceImpl&);
void operator>>= (Aida::FieldReader&, QuickSequenceImpl&);

/** @interface QuickIface
 * See also the corresponding C++ class I_QuickIface_Interface (server side). */
/// See also the corresponding IDL class QuickIface.
class I_QuickIface_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_QuickIface_Interface ();
  virtual /*Des*/                       ~I_QuickIface_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual void                          simple_function        (int i = 9);
};
void operator<<= (Aida::FieldBuffer&, I_QuickIface_Interface&);
void operator<<= (Aida::FieldBuffer&, I_QuickIface_Interface*);
void operator>>= (Aida::FieldReader&, I_QuickIface_Interface*&);

/** @interface MethodTestInterface
 * See also the corresponding C++ class I_MethodTestInterface_Interface (server side). */
/// See also the corresponding IDL class MethodTestInterface.
class I_MethodTestInterface_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_MethodTestInterface_Interface ();
  virtual /*Des*/                       ~I_MethodTestInterface_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual void                          method_with_void                ();
  virtual bool                          method_with_bools               (bool input,
                                                                         bool optval = 0);
  virtual int                           method_with_ints                (int input,
                                                                         int optval = -2);
  virtual double                        method_with_floats              (double input,
                                                                         double optval = 309.9);
  virtual std::string                   method_with_string              (const std::string &input,
                                                                         const std::string &optval = "default");
  virtual QuickEnum                     method_with_enum                (QuickEnum input,
                                                                         QuickEnum optval = QuickEnum (0));
  virtual QuickRecordImpl               method_with_record              (const QuickRecordImpl &input,
                                                                         const QuickRecordImpl &optval = QuickRecordImpl());
  virtual QuickSequenceImpl             method_with_sequence            (const QuickSequenceImpl &input,
                                                                         const QuickSequenceImpl &optval = QuickSequenceImpl());
  virtual I_GrandChild_Interface*       method_with_interface           (I_GrandChild_Interface &input,
                                                                         I_GrandChild_Interface &optval = *(I_GrandChild_Interface*) NULL);
  virtual Aida::Any                     method_with_anys                (const Aida::Any &input,
                                                                         const Aida::Any &optval);
  virtual I_QuickIface_Interface*       method_with_quickiface          (I_QuickIface_Interface &input,
                                                                         I_QuickIface_Interface &iface0 = *(I_QuickIface_Interface*) NULL);
};
void operator<<= (Aida::FieldBuffer&, I_MethodTestInterface_Interface&);
void operator<<= (Aida::FieldBuffer&, I_MethodTestInterface_Interface*);
void operator>>= (Aida::FieldReader&, I_MethodTestInterface_Interface*&);

/** @interface SignalTestInterface
 * See also the corresponding C++ class I_SignalTestInterface_Interface (server side). */
/// See also the corresponding IDL class SignalTestInterface.
class I_SignalTestInterface_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_SignalTestInterface_Interface ();
  virtual /*Des*/                       ~I_SignalTestInterface_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void ()> Signal_void_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, bool ()> Signal_bool_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, int ()> Signal_int_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, double ()> Signal_float_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, std::string ()> Signal_string_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, QuickEnum ()> Signal_enum_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, QuickRecordImpl ()> Signal_record_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, QuickSequenceImpl ()> Signal_sequence_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, I_GrandChild_Interface* ()> Signal_interface_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, Aida::Any ()> Signal_any_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, I_SignalTestInterface_Interface* ()> Signal_self_result;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void ()> Signal_void_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (bool b)> Signal_bool_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (int i)> Signal_int_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (double f)> Signal_float_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (const std::string &s)> Signal_string_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (QuickEnum e)> Signal_enum_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (const QuickRecordImpl &r)> Signal_record_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (const QuickSequenceImpl &s)> Signal_sequence_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (I_GrandChild_Interface &i)> Signal_interface_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (const Aida::Any &a)> Signal_any_arg;
  typedef Rapicorn::Signals::Signal<I_SignalTestInterface_Interface, void (I_SignalTestInterface_Interface &self_)> Signal_self_args;
  Signal_void_result sig_void_result;
  Signal_bool_result sig_bool_result;
  Signal_int_result sig_int_result;
  Signal_float_result sig_float_result;
  Signal_string_result sig_string_result;
  Signal_enum_result sig_enum_result;
  Signal_record_result sig_record_result;
  Signal_sequence_result sig_sequence_result;
  Signal_interface_result sig_interface_result;
  Signal_any_result sig_any_result;
  Signal_self_result sig_self_result;
  Signal_void_arg sig_void_arg;
  Signal_bool_arg sig_bool_arg;
  Signal_int_arg sig_int_arg;
  Signal_float_arg sig_float_arg;
  Signal_string_arg sig_string_arg;
  Signal_enum_arg sig_enum_arg;
  Signal_record_arg sig_record_arg;
  Signal_sequence_arg sig_sequence_arg;
  Signal_interface_arg sig_interface_arg;
  Signal_any_arg sig_any_arg;
  Signal_self_args sig_self_args;
};
void operator<<= (Aida::FieldBuffer&, I_SignalTestInterface_Interface&);
void operator<<= (Aida::FieldBuffer&, I_SignalTestInterface_Interface*);
void operator>>= (Aida::FieldReader&, I_SignalTestInterface_Interface*&);

/** @interface ChildInheritingSignals
 * See also the corresponding C++ class I_ChildInheritingSignals_Interface (server side). */
/// See also the corresponding IDL class ChildInheritingSignals.
class I_ChildInheritingSignals_Interface : public virtual I_SignalTestInterface_Interface
{
protected:
  explicit                               I_ChildInheritingSignals_Interface ();
  virtual /*Des*/                       ~I_ChildInheritingSignals_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  typedef Rapicorn::Signals::Signal<I_ChildInheritingSignals_Interface, void (I_ChildInheritingSignals_Interface &c, I_SignalTestInterface_Interface &p, const Aida::Any &a, int i, const QuickRecordImpl &r, const QuickSequenceImpl &s)> Signal_child_signal;
  Signal_child_signal sig_child_signal;
};
void operator<<= (Aida::FieldBuffer&, I_ChildInheritingSignals_Interface&);
void operator<<= (Aida::FieldBuffer&, I_ChildInheritingSignals_Interface*);
void operator>>= (Aida::FieldReader&, I_ChildInheritingSignals_Interface*&);

/** @interface AnotherChild
 * See also the corresponding C++ class I_AnotherChild_Interface (server side). */
/// See also the corresponding IDL class AnotherChild.
class I_AnotherChild_Interface : public virtual I_SignalTestInterface_Interface
{
protected:
  explicit                               I_AnotherChild_Interface ();
  virtual /*Des*/                       ~I_AnotherChild_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
};
void operator<<= (Aida::FieldBuffer&, I_AnotherChild_Interface&);
void operator<<= (Aida::FieldBuffer&, I_AnotherChild_Interface*);
void operator>>= (Aida::FieldReader&, I_AnotherChild_Interface*&);

/** @interface PropertyTester
 * See also the corresponding C++ class I_PropertyTester_Interface (server side). */
/// See also the corresponding IDL class PropertyTester.
class I_PropertyTester_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_PropertyTester_Interface ();
  virtual /*Des*/                       ~I_PropertyTester_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual bool                          bool_prop      () const = 0;
  virtual void                          bool_prop      (bool) = 0;
  virtual int                           int_prop       () const = 0;
  virtual void                          int_prop       (int) = 0;
  virtual double                        float_prop     () const = 0;
  virtual void                          float_prop     (double) = 0;
  virtual std::string                   string_prop    () const = 0;
  virtual void                          string_prop    (const std::string&) = 0;
  virtual QuickEnum                     enum_prop      () const = 0;
  virtual void                          enum_prop      (QuickEnum) = 0;
  virtual QuickRecordImpl               record_prop    () const = 0;
  virtual void                          record_prop    (const QuickRecordImpl&) = 0;
  virtual QuickSequenceImpl             sequence_prop  () const = 0;
  virtual void                          sequence_prop  (const QuickSequenceImpl&) = 0;
  virtual I_GrandChild_Interface*       interface_prop () const = 0;
  virtual void                          interface_prop (I_GrandChild_Interface*) = 0;
  virtual I_PropertyTester_Interface*   self_prop      () const = 0;
  virtual void                          self_prop      (I_PropertyTester_Interface*) = 0;
  virtual Aida::Any                     any_prop       () const = 0;
  virtual void                          any_prop       (const Aida::Any&) = 0;
};
void operator<<= (Aida::FieldBuffer&, I_PropertyTester_Interface&);
void operator<<= (Aida::FieldBuffer&, I_PropertyTester_Interface*);
void operator>>= (Aida::FieldReader&, I_PropertyTester_Interface*&);
} // InterfaceTests

namespace RapicornAidaTest {

enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
inline void operator<<= (Aida::FieldBuffer &fb,  ClickType  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, ClickType &e) { e = ClickType (frr.pop_evalue()); }

/** @interface ButtonArea
 * See also the corresponding C++ class I_ButtonArea_Interface (server side). */
/// See also the corresponding IDL class ButtonArea.
class I_ButtonArea_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_ButtonArea_Interface ();
  virtual /*Des*/                       ~I_ButtonArea_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual std::string                   on_click   () const = 0;
  virtual void                          on_click   (const std::string&) = 0;
  virtual std::string                   on_click2  () const = 0;
  virtual void                          on_click2  (const std::string&) = 0;
  virtual std::string                   on_click3  () const = 0;
  virtual void                          on_click3  (const std::string&) = 0;
  virtual ClickType                     click_type () const = 0;
  virtual void                          click_type (ClickType) = 0;
  typedef Rapicorn::Signals::Signal<I_ButtonArea_Interface, bool (), Rapicorn::Signals::CollectorUntil0<bool> > Signal_check_activate;
  typedef Rapicorn::Signals::Signal<I_ButtonArea_Interface, void ()> Signal_activate;
  Signal_check_activate sig_check_activate;
  Signal_activate sig_activate;
};
void operator<<= (Aida::FieldBuffer&, I_ButtonArea_Interface&);
void operator<<= (Aida::FieldBuffer&, I_ButtonArea_Interface*);
void operator>>= (Aida::FieldReader&, I_ButtonArea_Interface*&);

class I_PureMethods_Interface;

/** @interface PureMethods
 * See also the corresponding C++ class I_PureMethods_Interface (server side). */
/// See also the corresponding IDL class PureMethods.
class I_PureMethods_Interface : public virtual Aida::SimpleServer
{
protected:
  explicit                               I_PureMethods_Interface ();
  virtual /*Des*/                       ~I_PureMethods_Interface () = 0;
public:
  virtual void                          _list_types (Aida::TypeHashList&) const;
  virtual int                           pure_method             (double f) = 0;
};
void operator<<= (Aida::FieldBuffer&, I_PureMethods_Interface&);
void operator<<= (Aida::FieldBuffer&, I_PureMethods_Interface*);
void operator>>= (Aida::FieldReader&, I_PureMethods_Interface*&);
} // RapicornAidaTest

// --- Implementations ---

namespace MandatoryNamespace {

I_FirstInterface_Interface::I_FirstInterface_Interface ()
{}
I_FirstInterface_Interface::~I_FirstInterface_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_FirstInterface_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_FirstInterface_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_FirstInterface_Interface* &obj)
{
  obj = connection_id2object<I_FirstInterface_Interface> (fbr.pop_object());
}
void
I_FirstInterface_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x04be3719c81a379bULL, 0x1079454a90442f2cULL)); // FirstInterface
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const XFooRecordImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (17);
  fb <<= self.single_bool;
  fb <<= self.single_num;
  fb <<= self.single_float;
  fb <<= self.single_string;
  fb <<= self.sibling1;
  fb <<= self.sibling2;
  fb <<= self.multi1;
  fb <<= self.multi2;
  fb <<= self.multi3;
  fb <<= self.multi4;
  fb <<= self.enum_field;
  fb <<= self.iface1;
  fb <<= self.iface2;
  fb <<= self.iface3;
  fb <<= self.any1;
  fb <<= self.any2;
  fb <<= self.any3;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, XFooRecordImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 17) return;
  fbr >>= self.single_bool;
  fbr >>= self.single_num;
  fbr >>= self.single_float;
  fbr >>= self.single_string;
  fbr >>= self.sibling1;
  fbr >>= self.sibling2;
  fbr >>= self.multi1;
  fbr >>= self.multi2;
  fbr >>= self.multi3;
  fbr >>= self.multi4;
  fbr >>= self.enum_field;
  fbr >>= self.iface1;
  fbr >>= self.iface2;
  fbr >>= self.iface3;
  fbr >>= self.any1;
  fbr >>= self.any2;
  fbr >>= self.any3;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const XFooSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, XFooSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
XFooSequenceImpl::reference
XFooSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const IntSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, IntSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
IntSequenceImpl::reference
IntSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const FloatSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, FloatSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
FloatSequenceImpl::reference
FloatSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const StringSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, StringSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
StringSequenceImpl::reference
StringSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const ExtensiveEnumSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, ExtensiveEnumSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
ExtensiveEnumSequenceImpl::reference
ExtensiveEnumSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const RecordSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, RecordSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
RecordSequenceImpl::reference
RecordSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const SequenceSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, SequenceSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
SequenceSequenceImpl::reference
SequenceSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const InterfaceSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, InterfaceSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.reserve (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
InterfaceSequenceImpl::reference
InterfaceSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const AnySequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, AnySequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
AnySequenceImpl::reference
AnySequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const NestedTypesRecImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (2);
  fb <<= self.rec;
  fb <<= self.seq;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, NestedTypesRecImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 2) return;
  fbr >>= self.rec;
  fbr >>= self.seq;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const NestedTypesSeqImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, NestedTypesSeqImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
NestedTypesSeqImpl::reference
NestedTypesSeqImpl::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const NewRecordImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (4);
  fb <<= self.i;
  fb <<= self.enum1;
  fb <<= self.xfs;
  fb <<= self.ntr;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, NewRecordImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 4) return;
  fbr >>= self.i;
  fbr >>= self.enum1;
  fbr >>= self.xfs;
  fbr >>= self.ntr;
}

namespace Inner {
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const InnerRecordImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (3);
  fb <<= self.x;
  fb <<= self.y;
  fb <<= self.rec;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, InnerRecordImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 3) return;
  fbr >>= self.x;
  fbr >>= self.y;
  fbr >>= self.rec;
}
} // Inner
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const Refer2InnerImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (1);
  fb <<= self.r;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, Refer2InnerImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 1) return;
  fbr >>= self.r;
}
} // MandatoryNamespace

namespace OtherNamespace {
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const SomeRecordImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (4);
  fb <<= self.r1;
  fb <<= self.r2;
  fb <<= self.r3;
  fb <<= self.r4;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, SomeRecordImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 4) return;
  fbr >>= self.r1;
  fbr >>= self.r2;
  fbr >>= self.r3;
  fbr >>= self.r4;
}
} // OtherNamespace

namespace InterfaceTests {

I_UIWidgetArea_Interface::I_UIWidgetArea_Interface () :
  sig_void_signal (*this), sig_sample_signal (*this)
{}
I_UIWidgetArea_Interface::~I_UIWidgetArea_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_UIWidgetArea_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_UIWidgetArea_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_UIWidgetArea_Interface* &obj)
{
  obj = connection_id2object<I_UIWidgetArea_Interface> (fbr.pop_object());
}
void
I_UIWidgetArea_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0c1b9195fa9a5a6cULL, 0xc1f636e721317b86ULL)); // UIWidgetArea
}

I_Parent_Interface::I_Parent_Interface ()
{}
I_Parent_Interface::~I_Parent_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_Parent_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_Parent_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_Parent_Interface* &obj)
{
  obj = connection_id2object<I_Parent_Interface> (fbr.pop_object());
}
void
I_Parent_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0d7cb4311e1f74a9ULL, 0xe1ad9d71f1c712e5ULL)); // Parent
}

I_Child_Interface::I_Child_Interface ()
{}
I_Child_Interface::~I_Child_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_Child_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_Child_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_Child_Interface* &obj)
{
  obj = connection_id2object<I_Child_Interface> (fbr.pop_object());
}
void
I_Child_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0d7cb4311e1f74a9ULL, 0xe1ad9d71f1c712e5ULL)); // Parent
  thl.push_back (Aida::TypeHash (0x0a44a1b5cf26cfc0ULL, 0xcd6e05d08ba2667eULL)); // Child
}

I_Descendant_Interface::I_Descendant_Interface ()
{}
I_Descendant_Interface::~I_Descendant_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_Descendant_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_Descendant_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_Descendant_Interface* &obj)
{
  obj = connection_id2object<I_Descendant_Interface> (fbr.pop_object());
}
void
I_Descendant_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0a44a1b5cf26cfc0ULL, 0xcd6e05d08ba2667eULL)); // Child
  thl.push_back (Aida::TypeHash (0x0d7cb4311e1f74a9ULL, 0xe1ad9d71f1c712e5ULL)); // Parent
  thl.push_back (Aida::TypeHash (0x0980fc7a8521c350ULL, 0x641568ba1f461de2ULL)); // Descendant
}

I_GrandChild_Interface::I_GrandChild_Interface ()
{}
I_GrandChild_Interface::~I_GrandChild_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_GrandChild_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_GrandChild_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_GrandChild_Interface* &obj)
{
  obj = connection_id2object<I_GrandChild_Interface> (fbr.pop_object());
}
void
I_GrandChild_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0980fc7a8521c350ULL, 0x641568ba1f461de2ULL)); // Descendant
  thl.push_back (Aida::TypeHash (0x0a44a1b5cf26cfc0ULL, 0xcd6e05d08ba2667eULL)); // Child
  thl.push_back (Aida::TypeHash (0x0d7cb4311e1f74a9ULL, 0xe1ad9d71f1c712e5ULL)); // Parent
  thl.push_back (Aida::TypeHash (0x001a87e60ed9bd66ULL, 0xfff1a96d7bab9cd9ULL)); // GrandChild
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const QuickRecordImpl &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (2);
  fb <<= self.int1;
  fb <<= self.int2;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, QuickRecordImpl &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 2) return;
  fbr >>= self.int1;
  fbr >>= self.int2;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const QuickSequenceImpl &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, QuickSequenceImpl &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
QuickSequenceImpl::reference
QuickSequenceImpl::append_back()
{
  resize (size() + 1);
  return back();
}

I_QuickIface_Interface::I_QuickIface_Interface ()
{}
I_QuickIface_Interface::~I_QuickIface_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_QuickIface_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_QuickIface_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_QuickIface_Interface* &obj)
{
  obj = connection_id2object<I_QuickIface_Interface> (fbr.pop_object());
}
void
I_QuickIface_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0ce40c896cfa0177ULL, 0x5ab6faf97ff6fed2ULL)); // QuickIface
}

I_MethodTestInterface_Interface::I_MethodTestInterface_Interface ()
{}
I_MethodTestInterface_Interface::~I_MethodTestInterface_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_MethodTestInterface_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_MethodTestInterface_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_MethodTestInterface_Interface* &obj)
{
  obj = connection_id2object<I_MethodTestInterface_Interface> (fbr.pop_object());
}
void
I_MethodTestInterface_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x03befccd5d5ee8d5ULL, 0x7f1f65a869ad267fULL)); // MethodTestInterface
}

I_SignalTestInterface_Interface::I_SignalTestInterface_Interface () :
  sig_void_result (*this), sig_bool_result (*this), sig_int_result (*this), sig_float_result (*this), sig_string_result (*this), sig_enum_result (*this), sig_record_result (*this), sig_sequence_result (*this), sig_interface_result (*this), sig_any_result (*this), sig_self_result (*this), sig_void_arg (*this), sig_bool_arg (*this), sig_int_arg (*this), sig_float_arg (*this), sig_string_arg (*this), sig_enum_arg (*this), sig_record_arg (*this), sig_sequence_arg (*this), sig_interface_arg (*this), sig_any_arg (*this), sig_self_args (*this)
{}
I_SignalTestInterface_Interface::~I_SignalTestInterface_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_SignalTestInterface_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_SignalTestInterface_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_SignalTestInterface_Interface* &obj)
{
  obj = connection_id2object<I_SignalTestInterface_Interface> (fbr.pop_object());
}
void
I_SignalTestInterface_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0acc338edd01a172ULL, 0x27c5f8854a5f9458ULL)); // SignalTestInterface
}

I_ChildInheritingSignals_Interface::I_ChildInheritingSignals_Interface () :
  sig_child_signal (*this)
{}
I_ChildInheritingSignals_Interface::~I_ChildInheritingSignals_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_ChildInheritingSignals_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_ChildInheritingSignals_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_ChildInheritingSignals_Interface* &obj)
{
  obj = connection_id2object<I_ChildInheritingSignals_Interface> (fbr.pop_object());
}
void
I_ChildInheritingSignals_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0acc338edd01a172ULL, 0x27c5f8854a5f9458ULL)); // SignalTestInterface
  thl.push_back (Aida::TypeHash (0x0d6e67873f4098cbULL, 0xe7f2eb93eb46037cULL)); // ChildInheritingSignals
}

I_AnotherChild_Interface::I_AnotherChild_Interface ()
{}
I_AnotherChild_Interface::~I_AnotherChild_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_AnotherChild_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_AnotherChild_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_AnotherChild_Interface* &obj)
{
  obj = connection_id2object<I_AnotherChild_Interface> (fbr.pop_object());
}
void
I_AnotherChild_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0acc338edd01a172ULL, 0x27c5f8854a5f9458ULL)); // SignalTestInterface
  thl.push_back (Aida::TypeHash (0x0e2870deaacf05f9ULL, 0x2851002b6bd14b7aULL)); // AnotherChild
}

I_PropertyTester_Interface::I_PropertyTester_Interface ()
{}
I_PropertyTester_Interface::~I_PropertyTester_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_PropertyTester_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_PropertyTester_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_PropertyTester_Interface* &obj)
{
  obj = connection_id2object<I_PropertyTester_Interface> (fbr.pop_object());
}
void
I_PropertyTester_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0de89d5c207bc662ULL, 0x846800e315917b46ULL)); // PropertyTester
}
} // InterfaceTests

namespace RapicornAidaTest {

I_ButtonArea_Interface::I_ButtonArea_Interface () :
  sig_check_activate (*this), sig_activate (*this)
{}
I_ButtonArea_Interface::~I_ButtonArea_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_ButtonArea_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_ButtonArea_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_ButtonArea_Interface* &obj)
{
  obj = connection_id2object<I_ButtonArea_Interface> (fbr.pop_object());
}
void
I_ButtonArea_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0eb6bcdae9e87fe7ULL, 0xb2f16c34cdc20188ULL)); // ButtonArea
}

I_PureMethods_Interface::I_PureMethods_Interface ()
{}
I_PureMethods_Interface::~I_PureMethods_Interface () {}
void
operator<<= (Aida::FieldBuffer &fb, I_PureMethods_Interface &obj)
{
  fb.add_object (connection_object2id (&obj));
}
void
operator<<= (Aida::FieldBuffer &fb, I_PureMethods_Interface *obj)
{
  fb.add_object (connection_object2id (obj));
}
void
operator>>= (Aida::FieldReader &fbr, I_PureMethods_Interface* &obj)
{
  obj = connection_id2object<I_PureMethods_Interface> (fbr.pop_object());
}
void
I_PureMethods_Interface::_list_types (Aida::TypeHashList &thl) const
{
  thl.push_back (Aida::TypeHash (0x0e0bc42228fe9334ULL, 0x66dcee20d071f835ULL)); // PureMethods
}

// --- Method Dispatchers & Registry ---
} // RapicornAidaTest

namespace MandatoryNamespace {
static Aida::FieldBuffer*
_$lsttyp__FirstInterface__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_FirstInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$caller__FirstInterface__void_func (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 0) return aida$_error ("invalid number of arguments");
  I_FirstInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  self->void_func ();
  return NULL;
}


namespace Inner {
} // Inner
} // MandatoryNamespace

namespace OtherNamespace {
} // OtherNamespace

namespace InterfaceTests {
static Aida::FieldBuffer*
_$lsttyp__UIWidgetArea__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$getter__UIWidgetArea__dummy (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  rval = self->dummy ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__UIWidgetArea__dummy (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  arg_dummy;
  fbr >>= arg_dummy;
  self->dummy (arg_dummy);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__UIWidgetArea__on_click (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  rval = self->on_click ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__UIWidgetArea__on_click (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_on_click;
  fbr >>= arg_on_click;
  self->on_click (arg_on_click);
  return NULL;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__simple_method (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 0) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  rval = self->simple_method ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__single_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_n;
  fbr >>= arg_n;
  double  rval = self->single_arg (arg_n);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__single_arg2 (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_n;
  fbr >>= arg_n;
  double  rval = self->single_arg2 (arg_n);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__two_args (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_n;
  fbr >>= arg_n;
  double  arg_r;
  fbr >>= arg_r;
  double  rval = self->two_args (arg_n, arg_r);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__two_args2 (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_n;
  fbr >>= arg_n;
  double  arg_r;
  fbr >>= arg_r;
  double  rval = self->two_args2 (arg_n, arg_r);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__multi_args (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 5) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_n;
  fbr >>= arg_n;
  double  arg_r;
  fbr >>= arg_r;
  int  arg_i;
  fbr >>= arg_i;
  std::string  arg_s;
  fbr >>= arg_s;
  double  arg_y;
  fbr >>= arg_y;
  double  rval = self->multi_args (arg_n, arg_r, arg_i, arg_s, arg_y);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__self_method (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_UIWidgetArea_Interface *arg_ba1;
  fbr >>= arg_ba1;
  I_UIWidgetArea_Interface *arg_ba2;
  fbr >>= arg_ba2;
  double  rval = self->self_method (*arg_ba1, *arg_ba2);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__void_method (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 0) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  self->void_method ();
  return NULL;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__on_click2out (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 0) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  rval = self->on_click2out ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__UIWidgetArea__on_click2in (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_command;
  fbr >>= arg_command;
  self->on_click2in (arg_command);
  return NULL;
}
class _$Closure__UIWidgetArea__void_signal {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__UIWidgetArea__void_signal> SharedPtr;
  _$Closure__UIWidgetArea__void_signal (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__UIWidgetArea__void_signal()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__UIWidgetArea__void_signal (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_void_signal.disconnect (con_id);
  if (handler_id) {
    _$Closure__UIWidgetArea__void_signal::SharedPtr sp (new _$Closure__UIWidgetArea__void_signal (AIDA_CONNECTION(), handler_id));
    cid = self->sig_void_signal.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__UIWidgetArea__sample_signal {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__UIWidgetArea__sample_signal> SharedPtr;
  _$Closure__UIWidgetArea__sample_signal (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__UIWidgetArea__sample_signal()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static double
  handler (I_UIWidgetArea_Interface &arg_ba1,
           int arg_someint,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_ba1;
    fb <<= arg_someint;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__UIWidgetArea__sample_signal (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_UIWidgetArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_sample_signal.disconnect (con_id);
  if (handler_id) {
    _$Closure__UIWidgetArea__sample_signal::SharedPtr sp (new _$Closure__UIWidgetArea__sample_signal (AIDA_CONNECTION(), handler_id));
    cid = self->sig_sample_signal.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__Parent__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_Parent_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__Child__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_Child_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__Descendant__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_Descendant_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__GrandChild__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_GrandChild_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__QuickIface__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_QuickIface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$caller__QuickIface__simple_function (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_QuickIface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_i;
  fbr >>= arg_i;
  self->simple_function (arg_i);
  return NULL;
}

static Aida::FieldBuffer*
_$lsttyp__MethodTestInterface__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_void (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 0) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  self->method_with_void ();
  return NULL;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_bools (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  bool  arg_input;
  fbr >>= arg_input;
  bool  arg_optval;
  fbr >>= arg_optval;
  bool  rval = self->method_with_bools (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_ints (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_input;
  fbr >>= arg_input;
  int  arg_optval;
  fbr >>= arg_optval;
  int  rval = self->method_with_ints (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_floats (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  arg_input;
  fbr >>= arg_input;
  double  arg_optval;
  fbr >>= arg_optval;
  double  rval = self->method_with_floats (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_string (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_input;
  fbr >>= arg_input;
  std::string  arg_optval;
  fbr >>= arg_optval;
  std::string  rval = self->method_with_string (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_enum (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickEnum  arg_input;
  fbr >>= arg_input;
  QuickEnum  arg_optval;
  fbr >>= arg_optval;
  QuickEnum  rval = self->method_with_enum (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_record (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickRecordImpl  arg_input;
  fbr >>= arg_input;
  QuickRecordImpl  arg_optval;
  fbr >>= arg_optval;
  QuickRecordImpl  rval = self->method_with_record (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_sequence (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickSequenceImpl  arg_input;
  fbr >>= arg_input;
  QuickSequenceImpl  arg_optval;
  fbr >>= arg_optval;
  QuickSequenceImpl  rval = self->method_with_sequence (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_interface (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_GrandChild_Interface *arg_input;
  fbr >>= arg_input;
  I_GrandChild_Interface *arg_optval;
  fbr >>= arg_optval;
  I_GrandChild_Interface *rval = self->method_with_interface (*arg_input, *arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_anys (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::Any  arg_input;
  fbr >>= arg_input;
  Aida::Any  arg_optval;
  fbr >>= arg_optval;
  Aida::Any  rval = self->method_with_anys (arg_input, arg_optval);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$caller__MethodTestInterface__method_with_quickiface (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_MethodTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_QuickIface_Interface *arg_input;
  fbr >>= arg_input;
  I_QuickIface_Interface *arg_iface0;
  fbr >>= arg_iface0;
  I_QuickIface_Interface *rval = self->method_with_quickiface (*arg_input, *arg_iface0);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__SignalTestInterface__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
class _$Closure__SignalTestInterface__void_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__void_result> SharedPtr;
  _$Closure__SignalTestInterface__void_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__void_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__void_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_void_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__void_result::SharedPtr sp (new _$Closure__SignalTestInterface__void_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_void_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__bool_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__bool_result> SharedPtr;
  _$Closure__SignalTestInterface__bool_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__bool_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static bool
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__bool_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_bool_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__bool_result::SharedPtr sp (new _$Closure__SignalTestInterface__bool_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_bool_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__int_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__int_result> SharedPtr;
  _$Closure__SignalTestInterface__int_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__int_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static int
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__int_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_int_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__int_result::SharedPtr sp (new _$Closure__SignalTestInterface__int_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_int_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__float_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__float_result> SharedPtr;
  _$Closure__SignalTestInterface__float_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__float_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static double
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__float_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_float_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__float_result::SharedPtr sp (new _$Closure__SignalTestInterface__float_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_float_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__string_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__string_result> SharedPtr;
  _$Closure__SignalTestInterface__string_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__string_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static std::string
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return "";
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__string_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_string_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__string_result::SharedPtr sp (new _$Closure__SignalTestInterface__string_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_string_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__enum_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__enum_result> SharedPtr;
  _$Closure__SignalTestInterface__enum_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__enum_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static QuickEnum
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return QuickEnum (0);
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__enum_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_enum_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__enum_result::SharedPtr sp (new _$Closure__SignalTestInterface__enum_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_enum_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__record_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__record_result> SharedPtr;
  _$Closure__SignalTestInterface__record_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__record_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static QuickRecordImpl
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return QuickRecordImpl();
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__record_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_record_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__record_result::SharedPtr sp (new _$Closure__SignalTestInterface__record_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_record_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__sequence_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__sequence_result> SharedPtr;
  _$Closure__SignalTestInterface__sequence_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__sequence_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static QuickSequenceImpl
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return QuickSequenceImpl();
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__sequence_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_sequence_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__sequence_result::SharedPtr sp (new _$Closure__SignalTestInterface__sequence_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_sequence_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__interface_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__interface_result> SharedPtr;
  _$Closure__SignalTestInterface__interface_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__interface_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static I_GrandChild_Interface*
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__interface_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_interface_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__interface_result::SharedPtr sp (new _$Closure__SignalTestInterface__interface_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_interface_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__any_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__any_result> SharedPtr;
  _$Closure__SignalTestInterface__any_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__any_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static Aida::Any
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return Aida::Any();
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__any_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_any_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__any_result::SharedPtr sp (new _$Closure__SignalTestInterface__any_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_any_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__self_result {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__self_result> SharedPtr;
  _$Closure__SignalTestInterface__self_result (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__self_result()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static I_SignalTestInterface_Interface*
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__self_result (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_self_result.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__self_result::SharedPtr sp (new _$Closure__SignalTestInterface__self_result (AIDA_CONNECTION(), handler_id));
    cid = self->sig_self_result.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__void_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__void_arg> SharedPtr;
  _$Closure__SignalTestInterface__void_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__void_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__void_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_void_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__void_arg::SharedPtr sp (new _$Closure__SignalTestInterface__void_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_void_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__bool_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__bool_arg> SharedPtr;
  _$Closure__SignalTestInterface__bool_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__bool_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (bool arg_b,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_b;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__bool_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_bool_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__bool_arg::SharedPtr sp (new _$Closure__SignalTestInterface__bool_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_bool_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__int_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__int_arg> SharedPtr;
  _$Closure__SignalTestInterface__int_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__int_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (int arg_i,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_i;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__int_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_int_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__int_arg::SharedPtr sp (new _$Closure__SignalTestInterface__int_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_int_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__float_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__float_arg> SharedPtr;
  _$Closure__SignalTestInterface__float_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__float_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (double arg_f,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_f;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__float_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_float_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__float_arg::SharedPtr sp (new _$Closure__SignalTestInterface__float_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_float_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__string_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__string_arg> SharedPtr;
  _$Closure__SignalTestInterface__string_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__string_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (const std::string &arg_s,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_s;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__string_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_string_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__string_arg::SharedPtr sp (new _$Closure__SignalTestInterface__string_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_string_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__enum_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__enum_arg> SharedPtr;
  _$Closure__SignalTestInterface__enum_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__enum_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (QuickEnum arg_e,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_e;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__enum_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_enum_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__enum_arg::SharedPtr sp (new _$Closure__SignalTestInterface__enum_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_enum_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__record_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__record_arg> SharedPtr;
  _$Closure__SignalTestInterface__record_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__record_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (const QuickRecordImpl &arg_r,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_r;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__record_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_record_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__record_arg::SharedPtr sp (new _$Closure__SignalTestInterface__record_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_record_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__sequence_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__sequence_arg> SharedPtr;
  _$Closure__SignalTestInterface__sequence_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__sequence_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (const QuickSequenceImpl &arg_s,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_s;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__sequence_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_sequence_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__sequence_arg::SharedPtr sp (new _$Closure__SignalTestInterface__sequence_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_sequence_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__interface_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__interface_arg> SharedPtr;
  _$Closure__SignalTestInterface__interface_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__interface_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (I_GrandChild_Interface &arg_i,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_i;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__interface_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_interface_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__interface_arg::SharedPtr sp (new _$Closure__SignalTestInterface__interface_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_interface_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__any_arg {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__any_arg> SharedPtr;
  _$Closure__SignalTestInterface__any_arg (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__any_arg()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (const Aida::Any &arg_a,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_a;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__any_arg (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_any_arg.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__any_arg::SharedPtr sp (new _$Closure__SignalTestInterface__any_arg (AIDA_CONNECTION(), handler_id));
    cid = self->sig_any_arg.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__SignalTestInterface__self_args {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__SignalTestInterface__self_args> SharedPtr;
  _$Closure__SignalTestInterface__self_args (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__SignalTestInterface__self_args()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (I_SignalTestInterface_Interface &arg_self_,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_self_;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__SignalTestInterface__self_args (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_SignalTestInterface_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_self_args.disconnect (con_id);
  if (handler_id) {
    _$Closure__SignalTestInterface__self_args::SharedPtr sp (new _$Closure__SignalTestInterface__self_args (AIDA_CONNECTION(), handler_id));
    cid = self->sig_self_args.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__ChildInheritingSignals__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_ChildInheritingSignals_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
class _$Closure__ChildInheritingSignals__child_signal {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__ChildInheritingSignals__child_signal> SharedPtr;
  _$Closure__ChildInheritingSignals__child_signal (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__ChildInheritingSignals__child_signal()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (I_ChildInheritingSignals_Interface &arg_c,
           I_SignalTestInterface_Interface &arg_p,
           const Aida::Any &arg_a,
           int arg_i,
           const QuickRecordImpl &arg_r,
           const QuickSequenceImpl &arg_s,
           SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 6);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    fb <<= arg_c;
    fb <<= arg_p;
    fb <<= arg_a;
    fb <<= arg_i;
    fb <<= arg_r;
    fb <<= arg_s;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__ChildInheritingSignals__child_signal (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_ChildInheritingSignals_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_child_signal.disconnect (con_id);
  if (handler_id) {
    _$Closure__ChildInheritingSignals__child_signal::SharedPtr sp (new _$Closure__ChildInheritingSignals__child_signal (AIDA_CONNECTION(), handler_id));
    cid = self->sig_child_signal.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__AnotherChild__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_AnotherChild_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__PropertyTester__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__bool_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  bool  rval = self->bool_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__bool_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  bool  arg_bool_prop;
  fbr >>= arg_bool_prop;
  self->bool_prop (arg_bool_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__int_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  rval = self->int_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__int_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  int  arg_int_prop;
  fbr >>= arg_int_prop;
  self->int_prop (arg_int_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__float_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  rval = self->float_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__float_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  arg_float_prop;
  fbr >>= arg_float_prop;
  self->float_prop (arg_float_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__string_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  rval = self->string_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__string_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_string_prop;
  fbr >>= arg_string_prop;
  self->string_prop (arg_string_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__enum_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickEnum  rval = self->enum_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__enum_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickEnum  arg_enum_prop;
  fbr >>= arg_enum_prop;
  self->enum_prop (arg_enum_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__record_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickRecordImpl  rval = self->record_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__record_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickRecordImpl  arg_record_prop;
  fbr >>= arg_record_prop;
  self->record_prop (arg_record_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__sequence_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickSequenceImpl  rval = self->sequence_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__sequence_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  QuickSequenceImpl  arg_sequence_prop;
  fbr >>= arg_sequence_prop;
  self->sequence_prop (arg_sequence_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__interface_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_GrandChild_Interface *rval = self->interface_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__interface_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_GrandChild_Interface *arg_interface_prop;
  fbr >>= arg_interface_prop;
  self->interface_prop (&*arg_interface_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__self_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_PropertyTester_Interface *rval = self->self_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__self_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  I_PropertyTester_Interface *arg_self_prop;
  fbr >>= arg_self_prop;
  self->self_prop (&*arg_self_prop);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__PropertyTester__any_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::Any  rval = self->any_prop ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__PropertyTester__any_prop (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PropertyTester_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::Any  arg_any_prop;
  fbr >>= arg_any_prop;
  self->any_prop (arg_any_prop);
  return NULL;
}

} // InterfaceTests

namespace RapicornAidaTest {
static Aida::FieldBuffer*
_$lsttyp__ButtonArea__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$getter__ButtonArea__on_click (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  rval = self->on_click ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__ButtonArea__on_click (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_on_click;
  fbr >>= arg_on_click;
  self->on_click (arg_on_click);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__ButtonArea__on_click2 (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  rval = self->on_click2 ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__ButtonArea__on_click2 (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_on_click2;
  fbr >>= arg_on_click2;
  self->on_click2 (arg_on_click2);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__ButtonArea__on_click3 (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  rval = self->on_click3 ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__ButtonArea__on_click3 (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  std::string  arg_on_click3;
  fbr >>= arg_on_click3;
  self->on_click3 (arg_on_click3);
  return NULL;
}
static Aida::FieldBuffer*
_$getter__ButtonArea__click_type (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  ClickType  rval = self->click_type ();
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}
static Aida::FieldBuffer*
_$setter__ButtonArea__click_type (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  ClickType  arg_click_type;
  fbr >>= arg_click_type;
  self->click_type (arg_click_type);
  return NULL;
}
class _$Closure__ButtonArea__check_activate {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__ButtonArea__check_activate> SharedPtr;
  _$Closure__ButtonArea__check_activate (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__ButtonArea__check_activate()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static bool
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
    return 0;
  }
};
static Aida::FieldBuffer*
_$sigcon__ButtonArea__check_activate (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_check_activate.disconnect (con_id);
  if (handler_id) {
    _$Closure__ButtonArea__check_activate::SharedPtr sp (new _$Closure__ButtonArea__check_activate (AIDA_CONNECTION(), handler_id));
    cid = self->sig_check_activate.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}
class _$Closure__ButtonArea__activate {
  Aida::ServerConnection &m_connection; Aida::uint64_t m_handler;
public:
  typedef std::shared_ptr<_$Closure__ButtonArea__activate> SharedPtr;
  _$Closure__ButtonArea__activate (Aida::ServerConnection &conn, Aida::uint64_t h) : m_connection (conn), m_handler (h) {}
  ~_$Closure__ButtonArea__activate()
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (Aida::MSGID_DISCON, 0); // FIXME: 0
    fb <<= m_handler;
    m_connection.send_event (&fb); // deletes fb
  }
  static void
  handler (SharedPtr sp)
  {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0);
    fb.add_msgid (Aida::MSGID_EVENT, 0); // FIXME: 0
    fb <<= sp->m_handler;
    sp->m_connection.send_event (&fb); // deletes fb
  }
};
static Aida::FieldBuffer*
_$sigcon__ButtonArea__activate (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 2) return aida$_error ("invalid number of arguments");
  I_ButtonArea_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::uint64_t handler_id, con_id, cid = 0;
  fbr >>= handler_id;
  fbr >>= con_id;
  if (con_id) self->sig_activate.disconnect (con_id);
  if (handler_id) {
    _$Closure__ButtonArea__activate::SharedPtr sp (new _$Closure__ButtonArea__activate (AIDA_CONNECTION(), handler_id));
    cid = self->sig_activate.connect (slot (sp->handler, sp)); }
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= cid;
  return &rb;
}

static Aida::FieldBuffer*
_$lsttyp__PureMethods__ (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1) return aida$_error ("invalid number of arguments");
  I_PureMethods_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  Aida::TypeHashList thl;
  self->_list_types (thl);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result (1 + 2 * thl.size());
  rb <<= Aida::int64_t (thl.size());
  for (size_t i = 0; i < thl.size(); i++)
    rb <<= thl[i];
  return &rb;
}
static Aida::FieldBuffer*
_$caller__PureMethods__pure_method (Aida::FieldReader &fbr)
{
  if (fbr.remaining() != 1 + 1) return aida$_error ("invalid number of arguments");
  I_PureMethods_Interface *self;
  fbr >>= self;
  AIDA_CHECK (self, "self must be non-NULL");
  double  arg_f;
  fbr >>= arg_f;
  int  rval = self->pure_method (arg_f);
  Aida::FieldBuffer &rb = *Aida::FieldBuffer::new_result();
  rb <<= rval;
  return &rb;
}

static const Aida::ServerConnection::MethodEntry _aida_stub_entries[] = {
  { 0x3dacdb0c72319c6dULL, 0xd0a4dababf07cfb8ULL, MandatoryNamespace::_$lsttyp__FirstInterface__, },
  { 0x209463c55becedadULL, 0x39ddfcb9aadc3c74ULL, MandatoryNamespace::_$caller__FirstInterface__void_func, },
  { 0x3ced16bab1c08fe8ULL, 0xd1fa4cb922b6d7deULL, InterfaceTests::_$lsttyp__UIWidgetArea__, },
  { 0x39146750080bd117ULL, 0x9edc3ab3b5e82e8dULL, InterfaceTests::_$getter__UIWidgetArea__dummy, },
  { 0x2a284d0b5305ac3aULL, 0xd98a1d86235ad649ULL, InterfaceTests::_$setter__UIWidgetArea__dummy, },
  { 0x37b8129e6139dfaeULL, 0xece65fb7aeda0163ULL, InterfaceTests::_$getter__UIWidgetArea__on_click, },
  { 0x2d15d46bb30e2a40ULL, 0xc421a429912efd6dULL, InterfaceTests::_$setter__UIWidgetArea__on_click, },
  { 0x39a122b559d15903ULL, 0x0a95fe35b7a1de33ULL, InterfaceTests::_$caller__UIWidgetArea__simple_method, },
  { 0x3910395d202c93c2ULL, 0x9206a89acaaf2086ULL, InterfaceTests::_$caller__UIWidgetArea__single_arg, },
  { 0x3b5ae84b86dfa59cULL, 0x5d2ef3880b1fa360ULL, InterfaceTests::_$caller__UIWidgetArea__single_arg2, },
  { 0x359c33f1677a63ebULL, 0x3a05748016992575ULL, InterfaceTests::_$caller__UIWidgetArea__two_args, },
  { 0x3291a584ff9121b3ULL, 0xbd14f4bbc47fb2ccULL, InterfaceTests::_$caller__UIWidgetArea__two_args2, },
  { 0x3501ef84b7c1d9ffULL, 0x564566ab8a5e1b8bULL, InterfaceTests::_$caller__UIWidgetArea__multi_args, },
  { 0x316521a2bcc037d0ULL, 0x43987053dab0c3c0ULL, InterfaceTests::_$caller__UIWidgetArea__self_method, },
  { 0x2e02c52c84773703ULL, 0x00027e452edb615cULL, InterfaceTests::_$caller__UIWidgetArea__void_method, },
  { 0x3e4f2ff4e1424783ULL, 0x439ed3d602e3946eULL, InterfaceTests::_$caller__UIWidgetArea__on_click2out, },
  { 0x2294f15cd15e9458ULL, 0x5e0ac9b493bb4f17ULL, InterfaceTests::_$caller__UIWidgetArea__on_click2in, },
  { 0x52ef738c2571d0f2ULL, 0x05b653adf0a80acfULL, InterfaceTests::_$sigcon__UIWidgetArea__void_signal, },
  { 0x511bbb2e2b129d5bULL, 0xe7152819ec289550ULL, InterfaceTests::_$sigcon__UIWidgetArea__sample_signal, },
  { 0x364b25c79aef2195ULL, 0x61e123d5c1b02ffeULL, InterfaceTests::_$lsttyp__Parent__, },
  { 0x3c8323457768deefULL, 0x3d61b2123c42c46bULL, InterfaceTests::_$lsttyp__Child__, },
  { 0x32d59697075869a1ULL, 0x9f10f279be69b4e2ULL, InterfaceTests::_$lsttyp__Descendant__, },
  { 0x320a324ec480c060ULL, 0x86f1af86bd39afc2ULL, InterfaceTests::_$lsttyp__GrandChild__, },
  { 0x3bfdb92d01f4df38ULL, 0x09c3ffac5658b30eULL, InterfaceTests::_$lsttyp__QuickIface__, },
  { 0x2446078b004b9aabULL, 0x37d6c73a34ac7070ULL, InterfaceTests::_$caller__QuickIface__simple_function, },
  { 0x38887fce34a056a1ULL, 0xdfafd7692069f2bcULL, InterfaceTests::_$lsttyp__MethodTestInterface__, },
  { 0x281392e54343bee9ULL, 0x0dbeb788728dbff4ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_void, },
  { 0x3b68546991e25342ULL, 0xa71399caec9ccfc7ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_bools, },
  { 0x39555e79a31047bfULL, 0x0f06b4f122a81e1dULL, InterfaceTests::_$caller__MethodTestInterface__method_with_ints, },
  { 0x391dd7c671dada38ULL, 0x32ca18bc1bd39689ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_floats, },
  { 0x3ad5eafe588b965aULL, 0x38c04145925d2963ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_string, },
  { 0x387f08a5c150e6a7ULL, 0x83c133fcd2be3200ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_enum, },
  { 0x3b59b493f287edf0ULL, 0x4771d353c78389d1ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_record, },
  { 0x34c9e8a686a7f261ULL, 0x9af099b173ac979cULL, InterfaceTests::_$caller__MethodTestInterface__method_with_sequence, },
  { 0x34619983babcee5bULL, 0x9875f78f28f381b7ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_interface, },
  { 0x37b8d8ed63487319ULL, 0xb18dc7a6d35529d5ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_anys, },
  { 0x3a2ab33a8358edcbULL, 0x7c028db9464052a0ULL, InterfaceTests::_$caller__MethodTestInterface__method_with_quickiface, },
  { 0x3b8444b272305b05ULL, 0xeeb938b589d70b8cULL, InterfaceTests::_$lsttyp__SignalTestInterface__, },
  { 0x535d5e95471873b6ULL, 0x7a9f5692ce00e007ULL, InterfaceTests::_$sigcon__SignalTestInterface__void_result, },
  { 0x51ffffa2f8db1b1bULL, 0x3e01434baf49eceeULL, InterfaceTests::_$sigcon__SignalTestInterface__bool_result, },
  { 0x51ac083cdc878affULL, 0x72ad7414773447a2ULL, InterfaceTests::_$sigcon__SignalTestInterface__int_result, },
  { 0x5cc54429499b42b6ULL, 0x35e1fb7707130bcaULL, InterfaceTests::_$sigcon__SignalTestInterface__float_result, },
  { 0x5790f575b6cac788ULL, 0x27db8e3c014993a7ULL, InterfaceTests::_$sigcon__SignalTestInterface__string_result, },
  { 0x56fc6f3f4946e7b2ULL, 0x0fe0cc5f83d2ab84ULL, InterfaceTests::_$sigcon__SignalTestInterface__enum_result, },
  { 0x50b723665ed298a5ULL, 0x32aa063680a4e3c0ULL, InterfaceTests::_$sigcon__SignalTestInterface__record_result, },
  { 0x5ef00325dfcf4552ULL, 0x991130ecddd21730ULL, InterfaceTests::_$sigcon__SignalTestInterface__sequence_result, },
  { 0x58e8587c542d85ceULL, 0xe2b572e902c69f7cULL, InterfaceTests::_$sigcon__SignalTestInterface__interface_result, },
  { 0x52aa86cb9557c7b5ULL, 0xb5b86bcd272326c5ULL, InterfaceTests::_$sigcon__SignalTestInterface__any_result, },
  { 0x59bb2da621bab28fULL, 0x32bc82e7eb9bc512ULL, InterfaceTests::_$sigcon__SignalTestInterface__self_result, },
  { 0x583dc36c7785c7f3ULL, 0xb330cefa4e8247a9ULL, InterfaceTests::_$sigcon__SignalTestInterface__void_arg, },
  { 0x5f7ba898d12986bfULL, 0x8a1143a5f6dc85b8ULL, InterfaceTests::_$sigcon__SignalTestInterface__bool_arg, },
  { 0x5f91dc79c2bee013ULL, 0x809b90b2fad4ea0aULL, InterfaceTests::_$sigcon__SignalTestInterface__int_arg, },
  { 0x5d5c43cd47b258caULL, 0xb0d5fde097d6d12cULL, InterfaceTests::_$sigcon__SignalTestInterface__float_arg, },
  { 0x53de7a105b57bf62ULL, 0x9d8ffe4942a0934fULL, InterfaceTests::_$sigcon__SignalTestInterface__string_arg, },
  { 0x586138796f133c4dULL, 0x1c7573f2d30ac907ULL, InterfaceTests::_$sigcon__SignalTestInterface__enum_arg, },
  { 0x59cb77461ddeac82ULL, 0xfeaa98721bd8ecd3ULL, InterfaceTests::_$sigcon__SignalTestInterface__record_arg, },
  { 0x547b4dd41606b568ULL, 0x1d763791a33d2bc9ULL, InterfaceTests::_$sigcon__SignalTestInterface__sequence_arg, },
  { 0x57a5dbfbeb5a4ef9ULL, 0xb5df0c3b3bba4b22ULL, InterfaceTests::_$sigcon__SignalTestInterface__interface_arg, },
  { 0x51d96c2cd8c40104ULL, 0x04aedd456681cb81ULL, InterfaceTests::_$sigcon__SignalTestInterface__any_arg, },
  { 0x5c515ee37b78a970ULL, 0xe89c2af2f29359a0ULL, InterfaceTests::_$sigcon__SignalTestInterface__self_args, },
  { 0x3e2ad0e03001d9acULL, 0x29b504a5e59d6c5fULL, InterfaceTests::_$lsttyp__ChildInheritingSignals__, },
  { 0x56e02e4bf72a0363ULL, 0x4af5fd2e14057dc2ULL, InterfaceTests::_$sigcon__ChildInheritingSignals__child_signal, },
  { 0x3d193e12c75ef8cdULL, 0x583552525e108c61ULL, InterfaceTests::_$lsttyp__AnotherChild__, },
  { 0x342f93a48aa12aebULL, 0x06c2ed978db9d30eULL, InterfaceTests::_$lsttyp__PropertyTester__, },
  { 0x396c5b1aaf49cec6ULL, 0xb6218ab5ac6b82c3ULL, InterfaceTests::_$getter__PropertyTester__bool_prop, },
  { 0x2bd3c8fc8f71f8b4ULL, 0x2dde5c2c8fcf750cULL, InterfaceTests::_$setter__PropertyTester__bool_prop, },
  { 0x369c402f00bbf1e2ULL, 0x515a4131e4516216ULL, InterfaceTests::_$getter__PropertyTester__int_prop, },
  { 0x2a015ad6b813701dULL, 0x62fa674331e78289ULL, InterfaceTests::_$setter__PropertyTester__int_prop, },
  { 0x3b2c96526265c4baULL, 0xc1f4b15d96504a08ULL, InterfaceTests::_$getter__PropertyTester__float_prop, },
  { 0x25ae78062c0435cdULL, 0x1d21f473f7647360ULL, InterfaceTests::_$setter__PropertyTester__float_prop, },
  { 0x385771786e6432dbULL, 0xcb19bfb3aa9a26feULL, InterfaceTests::_$getter__PropertyTester__string_prop, },
  { 0x206d200c92ba7e41ULL, 0x857975e0304c85f3ULL, InterfaceTests::_$setter__PropertyTester__string_prop, },
  { 0x3d09e074f5d2f8edULL, 0x38e8a275e29c3fc2ULL, InterfaceTests::_$getter__PropertyTester__enum_prop, },
  { 0x2b77a2f3a3c4d5b4ULL, 0x4d5b96d1adf5f7ccULL, InterfaceTests::_$setter__PropertyTester__enum_prop, },
  { 0x31443949c61d0fecULL, 0xeb221638d6ffd3cfULL, InterfaceTests::_$getter__PropertyTester__record_prop, },
  { 0x2a5f5c212625f446ULL, 0x30d24123307269ceULL, InterfaceTests::_$setter__PropertyTester__record_prop, },
  { 0x3f323c929c803ea8ULL, 0x6ebf49e977bfb699ULL, InterfaceTests::_$getter__PropertyTester__sequence_prop, },
  { 0x232174952090a941ULL, 0xae8b7a3e13fdfde7ULL, InterfaceTests::_$setter__PropertyTester__sequence_prop, },
  { 0x33a8b72ea92bb600ULL, 0x3837c1118556aaedULL, InterfaceTests::_$getter__PropertyTester__interface_prop, },
  { 0x29163b10631cf4b4ULL, 0xf014d69b1a1153e9ULL, InterfaceTests::_$setter__PropertyTester__interface_prop, },
  { 0x3e6b07e114fab96bULL, 0x45a97f76ee1a7bcfULL, InterfaceTests::_$getter__PropertyTester__self_prop, },
  { 0x2c1aea6b5567c7beULL, 0x8f21acd05f5030deULL, InterfaceTests::_$setter__PropertyTester__self_prop, },
  { 0x331c2730c160062aULL, 0xaabfaeca6649ae46ULL, InterfaceTests::_$getter__PropertyTester__any_prop, },
  { 0x28a440900d170de2ULL, 0x69e43a111fa9fb39ULL, InterfaceTests::_$setter__PropertyTester__any_prop, },
  { 0x3ba079ca93d55fb3ULL, 0xf9944831dc1fc726ULL, RapicornAidaTest::_$lsttyp__ButtonArea__, },
  { 0x3f6e2e244632537cULL, 0xfd0507d0d775d378ULL, RapicornAidaTest::_$getter__ButtonArea__on_click, },
  { 0x21deec11706d9e22ULL, 0xe49764529e2818caULL, RapicornAidaTest::_$setter__ButtonArea__on_click, },
  { 0x3fc6f6ef4e1ab204ULL, 0x4790604ab2ffd999ULL, RapicornAidaTest::_$getter__ButtonArea__on_click2, },
  { 0x29fb5831619e59b2ULL, 0x3ad2cb6ee3214d2fULL, RapicornAidaTest::_$setter__ButtonArea__on_click2, },
  { 0x387a3b53e25004c1ULL, 0xafe6289a8ef446fdULL, RapicornAidaTest::_$getter__ButtonArea__on_click3, },
  { 0x2e609af16c0176daULL, 0x17c7ea8ce9fcf874ULL, RapicornAidaTest::_$setter__ButtonArea__on_click3, },
  { 0x33032db41e62e30fULL, 0x92d90ac8cf899010ULL, RapicornAidaTest::_$getter__ButtonArea__click_type, },
  { 0x21058465dc0b1d3fULL, 0x7e683383d0024c74ULL, RapicornAidaTest::_$setter__ButtonArea__click_type, },
  { 0x5ed315978fdefdcaULL, 0x9efe9e4845d8907eULL, RapicornAidaTest::_$sigcon__ButtonArea__check_activate, },
  { 0x57905c3b089b970eULL, 0x3774e2d97c70a48fULL, RapicornAidaTest::_$sigcon__ButtonArea__activate, },
  { 0x34692a915fe47960ULL, 0x86e3694656f6f9afULL, RapicornAidaTest::_$lsttyp__PureMethods__, },
  { 0x3b3394fb03a86bf1ULL, 0x914fbcdcdac7d567ULL, RapicornAidaTest::_$caller__PureMethods__pure_method, },
};
static Aida::ServerConnection::MethodRegistry _aida_stub_registry (_aida_stub_entries);

} // RapicornAidaTest

