// --- Generated by AidaCxxStub ---

// --- ClientHH Boilerplate ---
#include <aidacc/runtime.hh>

#include <rapicorn-core.hh> // for rcore/signal.hh
using Rapicorn::Signals::slot;

// --- ClientCC/ServerCC Boilerplate ---
#include <string>
#include <vector>
#include <stdexcept>
#ifndef __AIDA_GENERIC_CC_BOILERPLATE__
#define __AIDA_GENERIC_CC_BOILERPLATE__

#define AIDA_CHECK(cond,errmsg) do { if (cond) break; throw std::runtime_error (std::string ("AIDA-ERROR: ") + errmsg); } while (0)

namespace { // Anonymous
using Aida::uint64_t;

static __attribute__ ((__format__ (__printf__, 1, 2), unused))
Aida::FieldBuffer* aida$_error (const char *format, ...)
{
  va_list args;
  va_start (args, format);
  Aida::error_vprintf (format, args);
  va_end (args);
  return NULL;
}

} // Anonymous
#endif // __AIDA_GENERIC_CC_BOILERPLATE__

#include <aidacc/cxxstubaux.hh>


#ifndef AIDA_CONNECTION
#define AIDA_CONNECTION()       (*(Aida::ClientConnection*)NULL)
Aida::uint64_t       connection_handle2id  (const Aida::SmartHandle &h) { return h._rpc_id(); }
static inline void   connection_context4id (Aida::uint64_t ipcid, Aida::NonCopyable *ctx) {}
template<class C> C* connection_id2context (Aida::uint64_t oid) { return (C*) NULL; }
#endif // !AIDA_CONNECTION


// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {

enum Empty {
};
inline void operator<<= (Aida::FieldBuffer &fb,  Empty  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Empty &e) { e = Empty (frr.pop_evalue()); }

enum Enum1 {
  E1_A = 1,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum1  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum1 &e) { e = Enum1 (frr.pop_evalue()); }

enum Enum1c {
  E1C_A = 1,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum1c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum1c &e) { e = Enum1c (frr.pop_evalue()); }

enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum2  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum2 &e) { e = Enum2 (frr.pop_evalue()); }

enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum2c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum2c &e) { e = Enum2c (frr.pop_evalue()); }

enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum3  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum3 &e) { e = Enum3 (frr.pop_evalue()); }

enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum3c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum3c &e) { e = Enum3c (frr.pop_evalue()); }

enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4a  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4a &e) { e = Enum4a (frr.pop_evalue()); }

enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4b  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4b &e) { e = Enum4b (frr.pop_evalue()); }

enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4c  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4c &e) { e = Enum4c (frr.pop_evalue()); }

enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
inline void operator<<= (Aida::FieldBuffer &fb,  Enum4d  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, Enum4d &e) { e = Enum4d (frr.pop_evalue()); }

enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
inline void operator<<= (Aida::FieldBuffer &fb,  ExtensiveEnum  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, ExtensiveEnum &e) { e = ExtensiveEnum (frr.pop_evalue()); }

/** @interface FirstInterface
 * See also the corresponding C++ class FirstInterfaceHandle (client side). */
/// See also the corresponding IDL class FirstInterface.
class FirstInterfaceHandle : public virtual Aida::SmartHandle
{
  static FirstInterfaceHandle   _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
public:
  template<class C>
  static FirstInterfaceHandle   downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      FirstInterfaceHandle ();
  void                          void_func            ();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const FirstInterfaceHandle&);
void operator>>= (Aida::FieldReader&, FirstInterfaceHandle&);

/** @interface XFooRecord
 * See also the corresponding C++ class XFooRecordStruct (client side). */
/// See also the corresponding IDL class XFooRecord.
struct XFooRecordStruct
{
  bool                          single_bool;
  int                           single_num;
  double                        single_float;
  std::string                   single_string;
  int                           sibling1;
  int                           sibling2;
  int                           multi1;
  int                           multi2;
  int                           multi3;
  int                           multi4;
  ExtensiveEnum                 enum_field;
  FirstInterfaceHandle          iface1;
  FirstInterfaceHandle          iface2;
  FirstInterfaceHandle          iface3;
  Aida::Any                     any1;
  Aida::Any                     any2;
  Aida::Any                     any3;
  inline                        XFooRecordStruct () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
void operator<<= (Aida::FieldBuffer&, const XFooRecordStruct&);
void operator>>= (Aida::FieldReader&, XFooRecordStruct&);

/** @interface XFooSequence
 * See also the corresponding C++ class XFooSequenceStruct (client side). */
/// See also the corresponding IDL class XFooSequence.
struct XFooSequenceStruct : public std::vector<bool>
{
  typedef std::vector<bool> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const XFooSequenceStruct&);
void operator>>= (Aida::FieldReader&, XFooSequenceStruct&);

/** @interface IntSequence
 * See also the corresponding C++ class IntSequenceStruct (client side). */
/// See also the corresponding IDL class IntSequence.
struct IntSequenceStruct : public std::vector<int>
{
  typedef std::vector<int> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const IntSequenceStruct&);
void operator>>= (Aida::FieldReader&, IntSequenceStruct&);

/** @interface FloatSequence
 * See also the corresponding C++ class FloatSequenceStruct (client side). */
/// See also the corresponding IDL class FloatSequence.
struct FloatSequenceStruct : public std::vector<double>
{
  typedef std::vector<double> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const FloatSequenceStruct&);
void operator>>= (Aida::FieldReader&, FloatSequenceStruct&);

/** @interface StringSequence
 * See also the corresponding C++ class StringSequenceStruct (client side). */
/// See also the corresponding IDL class StringSequence.
struct StringSequenceStruct : public std::vector<std::string>
{
  typedef std::vector<std::string> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const StringSequenceStruct&);
void operator>>= (Aida::FieldReader&, StringSequenceStruct&);

/** @interface ExtensiveEnumSequence
 * See also the corresponding C++ class ExtensiveEnumSequenceStruct (client side). */
/// See also the corresponding IDL class ExtensiveEnumSequence.
struct ExtensiveEnumSequenceStruct : public std::vector<ExtensiveEnum>
{
  typedef std::vector<ExtensiveEnum> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const ExtensiveEnumSequenceStruct&);
void operator>>= (Aida::FieldReader&, ExtensiveEnumSequenceStruct&);

/** @interface RecordSequence
 * See also the corresponding C++ class RecordSequenceStruct (client side). */
/// See also the corresponding IDL class RecordSequence.
struct RecordSequenceStruct : public std::vector<XFooRecordStruct>
{
  typedef std::vector<XFooRecordStruct> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const RecordSequenceStruct&);
void operator>>= (Aida::FieldReader&, RecordSequenceStruct&);

/** @interface SequenceSequence
 * See also the corresponding C++ class SequenceSequenceStruct (client side). */
/// See also the corresponding IDL class SequenceSequence.
struct SequenceSequenceStruct : public std::vector<IntSequenceStruct>
{
  typedef std::vector<IntSequenceStruct> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const SequenceSequenceStruct&);
void operator>>= (Aida::FieldReader&, SequenceSequenceStruct&);

/** @interface InterfaceSequence
 * See also the corresponding C++ class InterfaceSequenceStruct (client side). */
/// See also the corresponding IDL class InterfaceSequence.
struct InterfaceSequenceStruct : public std::vector<FirstInterfaceHandle>
{
  typedef std::vector<FirstInterfaceHandle> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const InterfaceSequenceStruct&);
void operator>>= (Aida::FieldReader&, InterfaceSequenceStruct&);

/** @interface AnySequence
 * See also the corresponding C++ class AnySequenceStruct (client side). */
/// See also the corresponding IDL class AnySequence.
struct AnySequenceStruct : public std::vector<Aida::Any>
{
  typedef std::vector<Aida::Any> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const AnySequenceStruct&);
void operator>>= (Aida::FieldReader&, AnySequenceStruct&);

/** @interface NestedTypesRec
 * See also the corresponding C++ class NestedTypesRecStruct (client side). */
/// See also the corresponding IDL class NestedTypesRec.
struct NestedTypesRecStruct
{
  XFooRecordStruct              rec;
  XFooSequenceStruct            seq;
  inline                        NestedTypesRecStruct () { }
};
void operator<<= (Aida::FieldBuffer&, const NestedTypesRecStruct&);
void operator>>= (Aida::FieldReader&, NestedTypesRecStruct&);

/** @interface NestedTypesSeq
 * See also the corresponding C++ class NestedTypesSeqStruct (client side). */
/// See also the corresponding IDL class NestedTypesSeq.
struct NestedTypesSeqStruct : public std::vector<NestedTypesRecStruct>
{
  typedef std::vector<NestedTypesRecStruct> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const NestedTypesSeqStruct&);
void operator>>= (Aida::FieldReader&, NestedTypesSeqStruct&);

typedef Aida::Any AliasAny;

typedef int AliasInt;

typedef double AliasFloat;

typedef bool AliasBool;

typedef std::string AliasString;

typedef XFooRecordStruct AliasRecord;

typedef XFooSequenceStruct AliasSequence;

typedef ExtensiveEnum AliasEnum;

/** @interface NewRecord
 * See also the corresponding C++ class NewRecordStruct (client side). */
/// See also the corresponding IDL class NewRecord.
struct NewRecordStruct
{
  int                           i;
  Enum1                         enum1;
  XFooSequenceStruct            xfs;
  NestedTypesRecStruct          ntr;
  inline                        NewRecordStruct () { i = 0; enum1 = Enum1 (0); }
};
void operator<<= (Aida::FieldBuffer&, const NewRecordStruct&);
void operator>>= (Aida::FieldReader&, NewRecordStruct&);

namespace Inner {

/** @interface InnerRecord
 * See also the corresponding C++ class InnerRecordStruct (client side). */
/// See also the corresponding IDL class InnerRecord.
struct InnerRecordStruct
{
  int                           x;
  int                           y;
  NewRecordStruct               rec;
  inline                        InnerRecordStruct () { x = 0; y = 0; }
};
void operator<<= (Aida::FieldBuffer&, const InnerRecordStruct&);
void operator>>= (Aida::FieldReader&, InnerRecordStruct&);
} // Inner

/** @interface Refer2Inner
 * See also the corresponding C++ class Refer2InnerStruct (client side). */
/// See also the corresponding IDL class Refer2Inner.
struct Refer2InnerStruct
{
  Inner::InnerRecordStruct      r;
  inline                        Refer2InnerStruct () { }
};
void operator<<= (Aida::FieldBuffer&, const Refer2InnerStruct&);
void operator>>= (Aida::FieldReader&, Refer2InnerStruct&);
} // MandatoryNamespace

namespace OtherNamespace {

/** @interface SomeRecord
 * See also the corresponding C++ class SomeRecordStruct (client side). */
/// See also the corresponding IDL class SomeRecord.
struct SomeRecordStruct
{
  MandatoryNamespace::NewRecordStruct r1;
  MandatoryNamespace::NewRecordStruct r2;
  MandatoryNamespace::Inner::InnerRecordStruct r3;
  MandatoryNamespace::Inner::InnerRecordStruct r4;
  inline                        SomeRecordStruct () { }
};
void operator<<= (Aida::FieldBuffer&, const SomeRecordStruct&);
void operator>>= (Aida::FieldReader&, SomeRecordStruct&);
} // OtherNamespace

namespace Auxdata {

typedef int bar;

typedef double x;

typedef std::string s;
} // Auxdata

namespace InterfaceTests {

/** @interface UIWidgetArea
 * See also the corresponding C++ class UIWidgetAreaHandle (client side). */
/// See also the corresponding IDL class UIWidgetArea.
class UIWidgetAreaHandle : public virtual Aida::SmartHandle
{
  static UIWidgetAreaHandle     _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
  typedef Rapicorn::Signals::SignalProxy<UIWidgetAreaHandle, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::SignalProxy<UIWidgetAreaHandle, double (UIWidgetAreaHandle &ba1, int someint)> Signal_sample_signal;
public:
  template<class C>
  static UIWidgetAreaHandle     downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      UIWidgetAreaHandle ();
  double                        dummy    () const;
  void                          dummy    (double);
  std::string                   on_click () const;
  void                          on_click (const std::string&);
  Signal_void_signal&           sig_void_signal();
  Signal_sample_signal&         sig_sample_signal();
  double                        simple_method      ();
  double                        single_arg         (int n);
  double                        single_arg2        (int n = 5);
  double                        two_args           (int n,
                                                    double r);
  double                        two_args2          (int n = 6,
                                                    double r = 7.7);
  double                        multi_args         (int n,
                                                    double r,
                                                    int i,
                                                    const std::string &s = "String ding",
                                                    double y = 5);
  double                        self_method        (UIWidgetAreaHandle &ba1,
                                                    UIWidgetAreaHandle &ba2);
  void                          void_method        ();
  std::string                   on_click2out       ();
  void                          on_click2in        (const std::string &command);
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const UIWidgetAreaHandle&);
void operator>>= (Aida::FieldReader&, UIWidgetAreaHandle&);

/** @interface Parent
 * See also the corresponding C++ class ParentHandle (client side). */
/// See also the corresponding IDL class Parent.
class ParentHandle : public virtual Aida::SmartHandle
{
  static ParentHandle           _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
public:
  template<class C>
  static ParentHandle           downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      ParentHandle ();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const ParentHandle&);
void operator>>= (Aida::FieldReader&, ParentHandle&);

/** @interface Child
 * See also the corresponding C++ class ChildHandle (client side). */
/// See also the corresponding IDL class Child.
class ChildHandle : public ParentHandle
{
  static ChildHandle            _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
public:
  template<class C>
  static ChildHandle            downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      ChildHandle ();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const ChildHandle&);
void operator>>= (Aida::FieldReader&, ChildHandle&);

/** @interface Descendant
 * See also the corresponding C++ class DescendantHandle (client side). */
/// See also the corresponding IDL class Descendant.
class DescendantHandle : public ChildHandle
{
  static DescendantHandle       _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
public:
  template<class C>
  static DescendantHandle       downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      DescendantHandle ();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const DescendantHandle&);
void operator>>= (Aida::FieldReader&, DescendantHandle&);

/** @interface GrandChild
 * See also the corresponding C++ class GrandChildHandle (client side). */
/// See also the corresponding IDL class GrandChild.
class GrandChildHandle : public DescendantHandle
{
  static GrandChildHandle       _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
public:
  template<class C>
  static GrandChildHandle       downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      GrandChildHandle ();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const GrandChildHandle&);
void operator>>= (Aida::FieldReader&, GrandChildHandle&);

enum QuickEnum {
  ZERO = 0,
};
inline void operator<<= (Aida::FieldBuffer &fb,  QuickEnum  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, QuickEnum &e) { e = QuickEnum (frr.pop_evalue()); }

/** @interface QuickRecord
 * See also the corresponding C++ class QuickRecordStruct (client side). */
/// See also the corresponding IDL class QuickRecord.
struct QuickRecordStruct
{
  int                           int1;
  int                           int2;
  inline                        QuickRecordStruct () { int1 = 0; int2 = 0; }
};
void operator<<= (Aida::FieldBuffer&, const QuickRecordStruct&);
void operator>>= (Aida::FieldReader&, QuickRecordStruct&);

/** @interface QuickSequence
 * See also the corresponding C++ class QuickSequenceStruct (client side). */
/// See also the corresponding IDL class QuickSequence.
struct QuickSequenceStruct : public std::vector<double>
{
  typedef std::vector<double> Sequence;
  reference append_back(); ///< Append data at the end, returns write reference to data.
};
void operator<<= (Aida::FieldBuffer&, const QuickSequenceStruct&);
void operator>>= (Aida::FieldReader&, QuickSequenceStruct&);

/** @interface QuickIface
 * See also the corresponding C++ class QuickIfaceHandle (client side). */
/// See also the corresponding IDL class QuickIface.
class QuickIfaceHandle : public virtual Aida::SmartHandle
{
  static QuickIfaceHandle       _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
public:
  template<class C>
  static QuickIfaceHandle       downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      QuickIfaceHandle ();
  void                          simple_function  (int i = 9);
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const QuickIfaceHandle&);
void operator>>= (Aida::FieldReader&, QuickIfaceHandle&);

/** @interface MethodTestInterface
 * See also the corresponding C++ class MethodTestInterfaceHandle (client side). */
/// See also the corresponding IDL class MethodTestInterface.
class MethodTestInterfaceHandle : public virtual Aida::SmartHandle
{
  static MethodTestInterfaceHandle _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
public:
  template<class C>
  static MethodTestInterfaceHandle downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      MethodTestInterfaceHandle ();
  void                          method_with_void          ();
  bool                          method_with_bools         (bool input,
                                                           bool optval = 0);
  int                           method_with_ints          (int input,
                                                           int optval = -2);
  double                        method_with_floats        (double input,
                                                           double optval = 309.9);
  std::string                   method_with_string        (const std::string &input,
                                                           const std::string &optval = "default");
  QuickEnum                     method_with_enum          (QuickEnum input,
                                                           QuickEnum optval = QuickEnum (0));
  QuickRecordStruct             method_with_record        (const QuickRecordStruct &input,
                                                           const QuickRecordStruct &optval = QuickRecordStruct());
  QuickSequenceStruct           method_with_sequence      (const QuickSequenceStruct &input,
                                                           const QuickSequenceStruct &optval = QuickSequenceStruct());
  GrandChildHandle              method_with_interface     (GrandChildHandle &input,
                                                           GrandChildHandle &optval = *(GrandChildHandle*) NULL);
  Aida::Any                     method_with_anys          (const Aida::Any &input,
                                                           const Aida::Any &optval);
  QuickIfaceHandle              method_with_quickiface    (QuickIfaceHandle &input,
                                                           QuickIfaceHandle &iface0 = *(QuickIfaceHandle*) NULL);
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const MethodTestInterfaceHandle&);
void operator>>= (Aida::FieldReader&, MethodTestInterfaceHandle&);

/** @interface SignalTestInterface
 * See also the corresponding C++ class SignalTestInterfaceHandle (client side). */
/// See also the corresponding IDL class SignalTestInterface.
class SignalTestInterfaceHandle : public virtual Aida::SmartHandle
{
  static SignalTestInterfaceHandle _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void ()> Signal_void_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, bool ()> Signal_bool_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, int ()> Signal_int_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, double ()> Signal_float_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, std::string ()> Signal_string_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, QuickEnum ()> Signal_enum_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, QuickRecordStruct ()> Signal_record_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, QuickSequenceStruct ()> Signal_sequence_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, GrandChildHandle ()> Signal_interface_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, Aida::Any ()> Signal_any_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, SignalTestInterfaceHandle ()> Signal_self_result;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void ()> Signal_void_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (bool b)> Signal_bool_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (int i)> Signal_int_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (double f)> Signal_float_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (const std::string &s)> Signal_string_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (QuickEnum e)> Signal_enum_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (const QuickRecordStruct &r)> Signal_record_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (const QuickSequenceStruct &s)> Signal_sequence_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (GrandChildHandle &i)> Signal_interface_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (const Aida::Any &a)> Signal_any_arg;
  typedef Rapicorn::Signals::SignalProxy<SignalTestInterfaceHandle, void (SignalTestInterfaceHandle &self_)> Signal_self_args;
public:
  template<class C>
  static SignalTestInterfaceHandle downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      SignalTestInterfaceHandle ();
  Signal_void_result&           sig_void_result();
  Signal_bool_result&           sig_bool_result();
  Signal_int_result&            sig_int_result();
  Signal_float_result&          sig_float_result();
  Signal_string_result&         sig_string_result();
  Signal_enum_result&           sig_enum_result();
  Signal_record_result&         sig_record_result();
  Signal_sequence_result&       sig_sequence_result();
  Signal_interface_result&      sig_interface_result();
  Signal_any_result&            sig_any_result();
  Signal_self_result&           sig_self_result();
  Signal_void_arg&              sig_void_arg();
  Signal_bool_arg&              sig_bool_arg();
  Signal_int_arg&               sig_int_arg();
  Signal_float_arg&             sig_float_arg();
  Signal_string_arg&            sig_string_arg();
  Signal_enum_arg&              sig_enum_arg();
  Signal_record_arg&            sig_record_arg();
  Signal_sequence_arg&          sig_sequence_arg();
  Signal_interface_arg&         sig_interface_arg();
  Signal_any_arg&               sig_any_arg();
  Signal_self_args&             sig_self_args();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const SignalTestInterfaceHandle&);
void operator>>= (Aida::FieldReader&, SignalTestInterfaceHandle&);

/** @interface ChildInheritingSignals
 * See also the corresponding C++ class ChildInheritingSignalsHandle (client side). */
/// See also the corresponding IDL class ChildInheritingSignals.
class ChildInheritingSignalsHandle : public SignalTestInterfaceHandle
{
  static ChildInheritingSignalsHandle _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  typedef Rapicorn::Signals::SignalProxy<ChildInheritingSignalsHandle, void (ChildInheritingSignalsHandle &c, SignalTestInterfaceHandle &p, const Aida::Any &a, int i, const QuickRecordStruct &r, const QuickSequenceStruct &s)> Signal_child_signal;
public:
  template<class C>
  static ChildInheritingSignalsHandle downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      ChildInheritingSignalsHandle ();
  Signal_child_signal&          sig_child_signal();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const ChildInheritingSignalsHandle&);
void operator>>= (Aida::FieldReader&, ChildInheritingSignalsHandle&);

/** @interface AnotherChild
 * See also the corresponding C++ class AnotherChildHandle (client side). */
/// See also the corresponding IDL class AnotherChild.
class AnotherChildHandle : public SignalTestInterfaceHandle
{
  static AnotherChildHandle     _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
public:
  template<class C>
  static AnotherChildHandle     downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      AnotherChildHandle ();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const AnotherChildHandle&);
void operator>>= (Aida::FieldReader&, AnotherChildHandle&);

/** @interface PropertyTester
 * See also the corresponding C++ class PropertyTesterHandle (client side). */
/// See also the corresponding IDL class PropertyTester.
class PropertyTesterHandle : public virtual Aida::SmartHandle
{
  static PropertyTesterHandle   _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
public:
  template<class C>
  static PropertyTesterHandle   downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      PropertyTesterHandle ();
  bool                          bool_prop      () const;
  void                          bool_prop      (bool);
  int                           int_prop       () const;
  void                          int_prop       (int);
  double                        float_prop     () const;
  void                          float_prop     (double);
  std::string                   string_prop    () const;
  void                          string_prop    (const std::string&);
  QuickEnum                     enum_prop      () const;
  void                          enum_prop      (QuickEnum);
  QuickRecordStruct             record_prop    () const;
  void                          record_prop    (const QuickRecordStruct&);
  QuickSequenceStruct           sequence_prop  () const;
  void                          sequence_prop  (const QuickSequenceStruct&);
  GrandChildHandle              interface_prop () const;
  void                          interface_prop (GrandChildHandle);
  PropertyTesterHandle          self_prop      () const;
  void                          self_prop      (PropertyTesterHandle);
  Aida::Any                     any_prop       () const;
  void                          any_prop       (const Aida::Any&);
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const PropertyTesterHandle&);
void operator>>= (Aida::FieldReader&, PropertyTesterHandle&);
} // InterfaceTests

namespace RapicornAidaTest {

enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
inline void operator<<= (Aida::FieldBuffer &fb,  ClickType  e) { fb <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::FieldReader &frr, ClickType &e) { e = ClickType (frr.pop_evalue()); }

/** @interface ButtonArea
 * See also the corresponding C++ class ButtonAreaHandle (client side). */
/// See also the corresponding IDL class ButtonArea.
class ButtonAreaHandle : public virtual Aida::SmartHandle
{
  static ButtonAreaHandle       _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
  typedef Rapicorn::Signals::SignalProxy<ButtonAreaHandle, bool ()> Signal_check_activate;
  typedef Rapicorn::Signals::SignalProxy<ButtonAreaHandle, void ()> Signal_activate;
public:
  template<class C>
  static ButtonAreaHandle       downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      ButtonAreaHandle ();
  std::string                   on_click   () const;
  void                          on_click   (const std::string&);
  std::string                   on_click2  () const;
  void                          on_click2  (const std::string&);
  std::string                   on_click3  () const;
  void                          on_click3  (const std::string&);
  ClickType                     click_type () const;
  void                          click_type (ClickType);
  Signal_check_activate&        sig_check_activate();
  Signal_activate&              sig_activate();
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const ButtonAreaHandle&);
void operator>>= (Aida::FieldReader&, ButtonAreaHandle&);

class PureMethodsHandle;

/** @interface PureMethods
 * See also the corresponding C++ class PureMethodsHandle (client side). */
/// See also the corresponding IDL class PureMethods.
class PureMethodsHandle : public virtual Aida::SmartHandle
{
  static PureMethodsHandle      _cast (Aida::SmartHandle&, const Aida::TypeHashList&);
  static const Aida::TypeHash&  _type ();
protected:
  static Aida::ClientConnection __client_connection__ (void);
public:
  template<class C>
  static PureMethodsHandle      downcast (C c) { return _cast (c, c.cast_types()); }
  const Aida::TypeHashList&     cast_types ();
  explicit                      PureMethodsHandle ();
  int                           pure_method       (double f);
//inline               operator _UnspecifiedBool () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
void operator<<= (Aida::FieldBuffer&, const PureMethodsHandle&);
void operator>>= (Aida::FieldReader&, PureMethodsHandle&);
} // RapicornAidaTest

// --- Implementations ---

namespace MandatoryNamespace {

// === FirstInterface ===
static inline void ref   (FirstInterfaceHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (FirstInterfaceHandle&) {} // dummy stub for Signal<>.emit
struct FirstInterface_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public FirstInterfaceHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  FirstInterface_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
FirstInterface_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3dacdb0c72319c6dULL, 0xd0a4dababf07cfb8ULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
FirstInterfaceHandle::FirstInterfaceHandle ()
{}
Aida::ClientConnection
FirstInterfaceHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const FirstInterfaceHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, FirstInterfaceHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<FirstInterface_Context$> (ipcid)->handle$ : FirstInterfaceHandle();
}
const Aida::TypeHash&
FirstInterfaceHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x04be3719c81a379bULL, 0x1079454a90442f2cULL);
  return type_hash;
}
FirstInterfaceHandle
FirstInterfaceHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<FirstInterface_Context$> (connection_handle2id (other))->handle$;
  return FirstInterfaceHandle();
}
const Aida::TypeHashList&
FirstInterfaceHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<FirstInterface_Context$> (ipcid)->list_types();
}
void
FirstInterfaceHandle::void_func ()
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0), *fr = NULL;
  fb.add_msgid (0x209463c55becedadULL, 0x39ddfcb9aadc3c74ULL); // msgid
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (AIDA_UNLIKELY (fr != NULL)) delete fr;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const XFooRecordStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (17);
  fb <<= self.single_bool;
  fb <<= self.single_num;
  fb <<= self.single_float;
  fb <<= self.single_string;
  fb <<= self.sibling1;
  fb <<= self.sibling2;
  fb <<= self.multi1;
  fb <<= self.multi2;
  fb <<= self.multi3;
  fb <<= self.multi4;
  fb <<= self.enum_field;
  fb <<= self.iface1;
  fb <<= self.iface2;
  fb <<= self.iface3;
  fb <<= self.any1;
  fb <<= self.any2;
  fb <<= self.any3;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, XFooRecordStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 17) return;
  fbr >>= self.single_bool;
  fbr >>= self.single_num;
  fbr >>= self.single_float;
  fbr >>= self.single_string;
  fbr >>= self.sibling1;
  fbr >>= self.sibling2;
  fbr >>= self.multi1;
  fbr >>= self.multi2;
  fbr >>= self.multi3;
  fbr >>= self.multi4;
  fbr >>= self.enum_field;
  fbr >>= self.iface1;
  fbr >>= self.iface2;
  fbr >>= self.iface3;
  fbr >>= self.any1;
  fbr >>= self.any2;
  fbr >>= self.any3;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const XFooSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, XFooSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
XFooSequenceStruct::reference
XFooSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const IntSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, IntSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
IntSequenceStruct::reference
IntSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const FloatSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, FloatSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
FloatSequenceStruct::reference
FloatSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const StringSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, StringSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
StringSequenceStruct::reference
StringSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const ExtensiveEnumSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, ExtensiveEnumSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
ExtensiveEnumSequenceStruct::reference
ExtensiveEnumSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const RecordSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, RecordSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
RecordSequenceStruct::reference
RecordSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const SequenceSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, SequenceSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
SequenceSequenceStruct::reference
SequenceSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const InterfaceSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, InterfaceSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.reserve (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
InterfaceSequenceStruct::reference
InterfaceSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const AnySequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, AnySequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
AnySequenceStruct::reference
AnySequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const NestedTypesRecStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (2);
  fb <<= self.rec;
  fb <<= self.seq;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, NestedTypesRecStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 2) return;
  fbr >>= self.rec;
  fbr >>= self.seq;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const NestedTypesSeqStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, NestedTypesSeqStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
NestedTypesSeqStruct::reference
NestedTypesSeqStruct::append_back()
{
  resize (size() + 1);
  return back();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const NewRecordStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (4);
  fb <<= self.i;
  fb <<= self.enum1;
  fb <<= self.xfs;
  fb <<= self.ntr;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, NewRecordStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 4) return;
  fbr >>= self.i;
  fbr >>= self.enum1;
  fbr >>= self.xfs;
  fbr >>= self.ntr;
}

namespace Inner {
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const InnerRecordStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (3);
  fb <<= self.x;
  fb <<= self.y;
  fb <<= self.rec;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, InnerRecordStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 3) return;
  fbr >>= self.x;
  fbr >>= self.y;
  fbr >>= self.rec;
}
} // Inner
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const Refer2InnerStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (1);
  fb <<= self.r;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, Refer2InnerStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 1) return;
  fbr >>= self.r;
}
} // MandatoryNamespace

namespace OtherNamespace {
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const SomeRecordStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (4);
  fb <<= self.r1;
  fb <<= self.r2;
  fb <<= self.r3;
  fb <<= self.r4;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, SomeRecordStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 4) return;
  fbr >>= self.r1;
  fbr >>= self.r2;
  fbr >>= self.r3;
  fbr >>= self.r4;
}
} // OtherNamespace

namespace InterfaceTests {

// === UIWidgetArea ===
static inline void ref   (UIWidgetAreaHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (UIWidgetAreaHandle&) {} // dummy stub for Signal<>.emit
struct UIWidgetArea_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public UIWidgetAreaHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  typedef Aida::CxxStub::SignalHandler<UIWidgetAreaHandle, void ()> SignalHandler__void_signal;
  SignalHandler__void_signal void_signal;
  typedef Aida::CxxStub::SignalHandler<UIWidgetAreaHandle, double (UIWidgetAreaHandle &ba1, int someint)> SignalHandler__sample_signal;
  SignalHandler__sample_signal sample_signal;
  UIWidgetArea_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    void_signal (handle$, 0x52ef738c2571d0f2ULL, 0x05b653adf0a80acfULL),
    sample_signal (handle$, 0x511bbb2e2b129d5bULL, 0xe7152819ec289550ULL),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
UIWidgetArea_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3ced16bab1c08fe8ULL, 0xd1fa4cb922b6d7deULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
UIWidgetAreaHandle::UIWidgetAreaHandle ()
{}
Aida::ClientConnection
UIWidgetAreaHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const UIWidgetAreaHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, UIWidgetAreaHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<UIWidgetArea_Context$> (ipcid)->handle$ : UIWidgetAreaHandle();
}
const Aida::TypeHash&
UIWidgetAreaHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0c1b9195fa9a5a6cULL, 0xc1f636e721317b86ULL);
  return type_hash;
}
UIWidgetAreaHandle
UIWidgetAreaHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<UIWidgetArea_Context$> (connection_handle2id (other))->handle$;
  return UIWidgetAreaHandle();
}
const Aida::TypeHashList&
UIWidgetAreaHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<UIWidgetArea_Context$> (ipcid)->list_types();
}
UIWidgetAreaHandle::Signal_void_signal&
UIWidgetAreaHandle::sig_void_signal ()
{
  return connection_id2context<UIWidgetArea_Context$> (connection_handle2id (*this))->void_signal.psignal;
}
UIWidgetAreaHandle::Signal_sample_signal&
UIWidgetAreaHandle::sig_sample_signal ()
{
  return connection_id2context<UIWidgetArea_Context$> (connection_handle2id (*this))->sample_signal.psignal;
}
double
UIWidgetAreaHandle::dummy () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x39146750080bd117ULL, 0x9edc3ab3b5e82e8dULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
UIWidgetAreaHandle::dummy (double value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2a284d0b5305ac3aULL, 0xd98a1d86235ad649ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
UIWidgetAreaHandle::on_click () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x37b8129e6139dfaeULL, 0xece65fb7aeda0163ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
UIWidgetAreaHandle::on_click (const std::string &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2d15d46bb30e2a40ULL, 0xc421a429912efd6dULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
double
UIWidgetAreaHandle::simple_method ()
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0), *fr = NULL;
  fb.add_msgid (0x39a122b559d15903ULL, 0x0a95fe35b7a1de33ULL); // msgid
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
UIWidgetAreaHandle::single_arg (int arg_n)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x3910395d202c93c2ULL, 0x9206a89acaaf2086ULL); // msgid
  fb <<= (*this);
  fb <<= arg_n;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
UIWidgetAreaHandle::single_arg2 (int arg_n)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x3b5ae84b86dfa59cULL, 0x5d2ef3880b1fa360ULL); // msgid
  fb <<= (*this);
  fb <<= arg_n;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
UIWidgetAreaHandle::two_args (int arg_n,
                              double arg_r)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x359c33f1677a63ebULL, 0x3a05748016992575ULL); // msgid
  fb <<= (*this);
  fb <<= arg_n;
  fb <<= arg_r;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
UIWidgetAreaHandle::two_args2 (int arg_n,
                               double arg_r)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x3291a584ff9121b3ULL, 0xbd14f4bbc47fb2ccULL); // msgid
  fb <<= (*this);
  fb <<= arg_n;
  fb <<= arg_r;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
UIWidgetAreaHandle::multi_args (int arg_n,
                                double arg_r,
                                int arg_i,
                                const std::string &arg_s,
                                double arg_y)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 5), *fr = NULL;
  fb.add_msgid (0x3501ef84b7c1d9ffULL, 0x564566ab8a5e1b8bULL); // msgid
  fb <<= (*this);
  fb <<= arg_n;
  fb <<= arg_r;
  fb <<= arg_i;
  fb <<= arg_s;
  fb <<= arg_y;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
UIWidgetAreaHandle::self_method (UIWidgetAreaHandle &arg_ba1,
                                 UIWidgetAreaHandle &arg_ba2)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x316521a2bcc037d0ULL, 0x43987053dab0c3c0ULL); // msgid
  fb <<= (*this);
  fb <<= arg_ba1;
  fb <<= arg_ba2;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
UIWidgetAreaHandle::void_method ()
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0), *fr = NULL;
  fb.add_msgid (0x2e02c52c84773703ULL, 0x00027e452edb615cULL); // msgid
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (AIDA_UNLIKELY (fr != NULL)) delete fr;
}
std::string
UIWidgetAreaHandle::on_click2out ()
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0), *fr = NULL;
  fb.add_msgid (0x3e4f2ff4e1424783ULL, 0x439ed3d602e3946eULL); // msgid
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
UIWidgetAreaHandle::on_click2in (const std::string &arg_command)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2294f15cd15e9458ULL, 0x5e0ac9b493bb4f17ULL); // msgid
  fb <<= (*this);
  fb <<= arg_command;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (AIDA_UNLIKELY (fr != NULL)) delete fr;
}

// === Parent ===
static inline void ref   (ParentHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (ParentHandle&) {} // dummy stub for Signal<>.emit
struct Parent_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public ParentHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  Parent_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
Parent_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x364b25c79aef2195ULL, 0x61e123d5c1b02ffeULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
ParentHandle::ParentHandle ()
{}
Aida::ClientConnection
ParentHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const ParentHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, ParentHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<Parent_Context$> (ipcid)->handle$ : ParentHandle();
}
const Aida::TypeHash&
ParentHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0d7cb4311e1f74a9ULL, 0xe1ad9d71f1c712e5ULL);
  return type_hash;
}
ParentHandle
ParentHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<Parent_Context$> (connection_handle2id (other))->handle$;
  return ParentHandle();
}
const Aida::TypeHashList&
ParentHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<Parent_Context$> (ipcid)->list_types();
}

// === Child ===
static inline void ref   (ChildHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (ChildHandle&) {} // dummy stub for Signal<>.emit
struct Child_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public ChildHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  Child_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
Child_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3c8323457768deefULL, 0x3d61b2123c42c46bULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
ChildHandle::ChildHandle ()
{}
void
operator<<= (Aida::FieldBuffer &fb, const ChildHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, ChildHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<Child_Context$> (ipcid)->handle$ : ChildHandle();
}
const Aida::TypeHash&
ChildHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0a44a1b5cf26cfc0ULL, 0xcd6e05d08ba2667eULL);
  return type_hash;
}
ChildHandle
ChildHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<Child_Context$> (connection_handle2id (other))->handle$;
  return ChildHandle();
}
const Aida::TypeHashList&
ChildHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<Child_Context$> (ipcid)->list_types();
}

// === Descendant ===
static inline void ref   (DescendantHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (DescendantHandle&) {} // dummy stub for Signal<>.emit
struct Descendant_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public DescendantHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  Descendant_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
Descendant_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x32d59697075869a1ULL, 0x9f10f279be69b4e2ULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
DescendantHandle::DescendantHandle ()
{}
void
operator<<= (Aida::FieldBuffer &fb, const DescendantHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, DescendantHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<Descendant_Context$> (ipcid)->handle$ : DescendantHandle();
}
const Aida::TypeHash&
DescendantHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0980fc7a8521c350ULL, 0x641568ba1f461de2ULL);
  return type_hash;
}
DescendantHandle
DescendantHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<Descendant_Context$> (connection_handle2id (other))->handle$;
  return DescendantHandle();
}
const Aida::TypeHashList&
DescendantHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<Descendant_Context$> (ipcid)->list_types();
}

// === GrandChild ===
static inline void ref   (GrandChildHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (GrandChildHandle&) {} // dummy stub for Signal<>.emit
struct GrandChild_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public GrandChildHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  GrandChild_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
GrandChild_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x320a324ec480c060ULL, 0x86f1af86bd39afc2ULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
GrandChildHandle::GrandChildHandle ()
{}
void
operator<<= (Aida::FieldBuffer &fb, const GrandChildHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, GrandChildHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<GrandChild_Context$> (ipcid)->handle$ : GrandChildHandle();
}
const Aida::TypeHash&
GrandChildHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x001a87e60ed9bd66ULL, 0xfff1a96d7bab9cd9ULL);
  return type_hash;
}
GrandChildHandle
GrandChildHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<GrandChild_Context$> (connection_handle2id (other))->handle$;
  return GrandChildHandle();
}
const Aida::TypeHashList&
GrandChildHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<GrandChild_Context$> (ipcid)->list_types();
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const QuickRecordStruct &self)
{
  Aida::FieldBuffer &fb = dst.add_rec (2);
  fb <<= self.int1;
  fb <<= self.int2;
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, QuickRecordStruct &self)
{
  Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() < 2) return;
  fbr >>= self.int1;
  fbr >>= self.int2;
}
inline void __attribute__ ((used))
operator<<= (Aida::FieldBuffer &dst, const QuickSequenceStruct &self)
{
  const size_t len = self.size();
  Aida::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::FieldReader &src, QuickSequenceStruct &self)
{
  Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
QuickSequenceStruct::reference
QuickSequenceStruct::append_back()
{
  resize (size() + 1);
  return back();
}

// === QuickIface ===
static inline void ref   (QuickIfaceHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (QuickIfaceHandle&) {} // dummy stub for Signal<>.emit
struct QuickIface_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public QuickIfaceHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  QuickIface_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
QuickIface_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3bfdb92d01f4df38ULL, 0x09c3ffac5658b30eULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
QuickIfaceHandle::QuickIfaceHandle ()
{}
Aida::ClientConnection
QuickIfaceHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const QuickIfaceHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, QuickIfaceHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<QuickIface_Context$> (ipcid)->handle$ : QuickIfaceHandle();
}
const Aida::TypeHash&
QuickIfaceHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0ce40c896cfa0177ULL, 0x5ab6faf97ff6fed2ULL);
  return type_hash;
}
QuickIfaceHandle
QuickIfaceHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<QuickIface_Context$> (connection_handle2id (other))->handle$;
  return QuickIfaceHandle();
}
const Aida::TypeHashList&
QuickIfaceHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<QuickIface_Context$> (ipcid)->list_types();
}
void
QuickIfaceHandle::simple_function (int arg_i)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2446078b004b9aabULL, 0x37d6c73a34ac7070ULL); // msgid
  fb <<= (*this);
  fb <<= arg_i;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (AIDA_UNLIKELY (fr != NULL)) delete fr;
}

// === MethodTestInterface ===
static inline void ref   (MethodTestInterfaceHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (MethodTestInterfaceHandle&) {} // dummy stub for Signal<>.emit
struct MethodTestInterface_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public MethodTestInterfaceHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  MethodTestInterface_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
MethodTestInterface_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x38887fce34a056a1ULL, 0xdfafd7692069f2bcULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
MethodTestInterfaceHandle::MethodTestInterfaceHandle ()
{}
Aida::ClientConnection
MethodTestInterfaceHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const MethodTestInterfaceHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, MethodTestInterfaceHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<MethodTestInterface_Context$> (ipcid)->handle$ : MethodTestInterfaceHandle();
}
const Aida::TypeHash&
MethodTestInterfaceHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x03befccd5d5ee8d5ULL, 0x7f1f65a869ad267fULL);
  return type_hash;
}
MethodTestInterfaceHandle
MethodTestInterfaceHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<MethodTestInterface_Context$> (connection_handle2id (other))->handle$;
  return MethodTestInterfaceHandle();
}
const Aida::TypeHashList&
MethodTestInterfaceHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<MethodTestInterface_Context$> (ipcid)->list_types();
}
void
MethodTestInterfaceHandle::method_with_void ()
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 0), *fr = NULL;
  fb.add_msgid (0x281392e54343bee9ULL, 0x0dbeb788728dbff4ULL); // msgid
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (AIDA_UNLIKELY (fr != NULL)) delete fr;
}
bool
MethodTestInterfaceHandle::method_with_bools (bool arg_input,
                                              bool arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x3b68546991e25342ULL, 0xa71399caec9ccfc7ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  bool  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
int
MethodTestInterfaceHandle::method_with_ints (int arg_input,
                                             int arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x39555e79a31047bfULL, 0x0f06b4f122a81e1dULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  int  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
double
MethodTestInterfaceHandle::method_with_floats (double arg_input,
                                               double arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x391dd7c671dada38ULL, 0x32ca18bc1bd39689ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
std::string
MethodTestInterfaceHandle::method_with_string (const std::string &arg_input,
                                               const std::string &arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x3ad5eafe588b965aULL, 0x38c04145925d2963ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
QuickEnum
MethodTestInterfaceHandle::method_with_enum (QuickEnum arg_input,
                                             QuickEnum arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x387f08a5c150e6a7ULL, 0x83c133fcd2be3200ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickEnum  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
QuickRecordStruct
MethodTestInterfaceHandle::method_with_record (const QuickRecordStruct &arg_input,
                                               const QuickRecordStruct &arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x3b59b493f287edf0ULL, 0x4771d353c78389d1ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickRecordStruct  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
QuickSequenceStruct
MethodTestInterfaceHandle::method_with_sequence (const QuickSequenceStruct &arg_input,
                                                 const QuickSequenceStruct &arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x34c9e8a686a7f261ULL, 0x9af099b173ac979cULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickSequenceStruct  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
GrandChildHandle
MethodTestInterfaceHandle::method_with_interface (GrandChildHandle &arg_input,
                                                  GrandChildHandle &arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x34619983babcee5bULL, 0x9875f78f28f381b7ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  GrandChildHandle  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
Aida::Any
MethodTestInterfaceHandle::method_with_anys (const Aida::Any &arg_input,
                                             const Aida::Any &arg_optval)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x37b8d8ed63487319ULL, 0xb18dc7a6d35529d5ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_optval;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  Aida::Any  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
QuickIfaceHandle
MethodTestInterfaceHandle::method_with_quickiface (QuickIfaceHandle &arg_input,
                                                   QuickIfaceHandle &arg_iface0)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 2), *fr = NULL;
  fb.add_msgid (0x3a2ab33a8358edcbULL, 0x7c028db9464052a0ULL); // msgid
  fb <<= (*this);
  fb <<= arg_input;
  fb <<= arg_iface0;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickIfaceHandle  retval;
  frr >>= retval;
  delete fr;
  return retval;
}

// === SignalTestInterface ===
static inline void ref   (SignalTestInterfaceHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (SignalTestInterfaceHandle&) {} // dummy stub for Signal<>.emit
struct SignalTestInterface_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public SignalTestInterfaceHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void ()> SignalHandler__void_result;
  SignalHandler__void_result void_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, bool ()> SignalHandler__bool_result;
  SignalHandler__bool_result bool_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, int ()> SignalHandler__int_result;
  SignalHandler__int_result int_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, double ()> SignalHandler__float_result;
  SignalHandler__float_result float_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, std::string ()> SignalHandler__string_result;
  SignalHandler__string_result string_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, QuickEnum ()> SignalHandler__enum_result;
  SignalHandler__enum_result enum_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, QuickRecordStruct ()> SignalHandler__record_result;
  SignalHandler__record_result record_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, QuickSequenceStruct ()> SignalHandler__sequence_result;
  SignalHandler__sequence_result sequence_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, GrandChildHandle ()> SignalHandler__interface_result;
  SignalHandler__interface_result interface_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, Aida::Any ()> SignalHandler__any_result;
  SignalHandler__any_result any_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, SignalTestInterfaceHandle ()> SignalHandler__self_result;
  SignalHandler__self_result self_result;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void ()> SignalHandler__void_arg;
  SignalHandler__void_arg void_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (bool b)> SignalHandler__bool_arg;
  SignalHandler__bool_arg bool_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (int i)> SignalHandler__int_arg;
  SignalHandler__int_arg int_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (double f)> SignalHandler__float_arg;
  SignalHandler__float_arg float_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (const std::string &s)> SignalHandler__string_arg;
  SignalHandler__string_arg string_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (QuickEnum e)> SignalHandler__enum_arg;
  SignalHandler__enum_arg enum_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (const QuickRecordStruct &r)> SignalHandler__record_arg;
  SignalHandler__record_arg record_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (const QuickSequenceStruct &s)> SignalHandler__sequence_arg;
  SignalHandler__sequence_arg sequence_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (GrandChildHandle &i)> SignalHandler__interface_arg;
  SignalHandler__interface_arg interface_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (const Aida::Any &a)> SignalHandler__any_arg;
  SignalHandler__any_arg any_arg;
  typedef Aida::CxxStub::SignalHandler<SignalTestInterfaceHandle, void (SignalTestInterfaceHandle &self_)> SignalHandler__self_args;
  SignalHandler__self_args self_args;
  SignalTestInterface_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    void_result (handle$, 0x535d5e95471873b6ULL, 0x7a9f5692ce00e007ULL),
    bool_result (handle$, 0x51ffffa2f8db1b1bULL, 0x3e01434baf49eceeULL),
    int_result (handle$, 0x51ac083cdc878affULL, 0x72ad7414773447a2ULL),
    float_result (handle$, 0x5cc54429499b42b6ULL, 0x35e1fb7707130bcaULL),
    string_result (handle$, 0x5790f575b6cac788ULL, 0x27db8e3c014993a7ULL),
    enum_result (handle$, 0x56fc6f3f4946e7b2ULL, 0x0fe0cc5f83d2ab84ULL),
    record_result (handle$, 0x50b723665ed298a5ULL, 0x32aa063680a4e3c0ULL),
    sequence_result (handle$, 0x5ef00325dfcf4552ULL, 0x991130ecddd21730ULL),
    interface_result (handle$, 0x58e8587c542d85ceULL, 0xe2b572e902c69f7cULL),
    any_result (handle$, 0x52aa86cb9557c7b5ULL, 0xb5b86bcd272326c5ULL),
    self_result (handle$, 0x59bb2da621bab28fULL, 0x32bc82e7eb9bc512ULL),
    void_arg (handle$, 0x583dc36c7785c7f3ULL, 0xb330cefa4e8247a9ULL),
    bool_arg (handle$, 0x5f7ba898d12986bfULL, 0x8a1143a5f6dc85b8ULL),
    int_arg (handle$, 0x5f91dc79c2bee013ULL, 0x809b90b2fad4ea0aULL),
    float_arg (handle$, 0x5d5c43cd47b258caULL, 0xb0d5fde097d6d12cULL),
    string_arg (handle$, 0x53de7a105b57bf62ULL, 0x9d8ffe4942a0934fULL),
    enum_arg (handle$, 0x586138796f133c4dULL, 0x1c7573f2d30ac907ULL),
    record_arg (handle$, 0x59cb77461ddeac82ULL, 0xfeaa98721bd8ecd3ULL),
    sequence_arg (handle$, 0x547b4dd41606b568ULL, 0x1d763791a33d2bc9ULL),
    interface_arg (handle$, 0x57a5dbfbeb5a4ef9ULL, 0xb5df0c3b3bba4b22ULL),
    any_arg (handle$, 0x51d96c2cd8c40104ULL, 0x04aedd456681cb81ULL),
    self_args (handle$, 0x5c515ee37b78a970ULL, 0xe89c2af2f29359a0ULL),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
SignalTestInterface_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3b8444b272305b05ULL, 0xeeb938b589d70b8cULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
SignalTestInterfaceHandle::SignalTestInterfaceHandle ()
{}
Aida::ClientConnection
SignalTestInterfaceHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const SignalTestInterfaceHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, SignalTestInterfaceHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<SignalTestInterface_Context$> (ipcid)->handle$ : SignalTestInterfaceHandle();
}
const Aida::TypeHash&
SignalTestInterfaceHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0acc338edd01a172ULL, 0x27c5f8854a5f9458ULL);
  return type_hash;
}
SignalTestInterfaceHandle
SignalTestInterfaceHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (other))->handle$;
  return SignalTestInterfaceHandle();
}
const Aida::TypeHashList&
SignalTestInterfaceHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<SignalTestInterface_Context$> (ipcid)->list_types();
}
SignalTestInterfaceHandle::Signal_void_result&
SignalTestInterfaceHandle::sig_void_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->void_result.psignal;
}
SignalTestInterfaceHandle::Signal_bool_result&
SignalTestInterfaceHandle::sig_bool_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->bool_result.psignal;
}
SignalTestInterfaceHandle::Signal_int_result&
SignalTestInterfaceHandle::sig_int_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->int_result.psignal;
}
SignalTestInterfaceHandle::Signal_float_result&
SignalTestInterfaceHandle::sig_float_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->float_result.psignal;
}
SignalTestInterfaceHandle::Signal_string_result&
SignalTestInterfaceHandle::sig_string_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->string_result.psignal;
}
SignalTestInterfaceHandle::Signal_enum_result&
SignalTestInterfaceHandle::sig_enum_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->enum_result.psignal;
}
SignalTestInterfaceHandle::Signal_record_result&
SignalTestInterfaceHandle::sig_record_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->record_result.psignal;
}
SignalTestInterfaceHandle::Signal_sequence_result&
SignalTestInterfaceHandle::sig_sequence_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->sequence_result.psignal;
}
SignalTestInterfaceHandle::Signal_interface_result&
SignalTestInterfaceHandle::sig_interface_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->interface_result.psignal;
}
SignalTestInterfaceHandle::Signal_any_result&
SignalTestInterfaceHandle::sig_any_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->any_result.psignal;
}
SignalTestInterfaceHandle::Signal_self_result&
SignalTestInterfaceHandle::sig_self_result ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->self_result.psignal;
}
SignalTestInterfaceHandle::Signal_void_arg&
SignalTestInterfaceHandle::sig_void_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->void_arg.psignal;
}
SignalTestInterfaceHandle::Signal_bool_arg&
SignalTestInterfaceHandle::sig_bool_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->bool_arg.psignal;
}
SignalTestInterfaceHandle::Signal_int_arg&
SignalTestInterfaceHandle::sig_int_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->int_arg.psignal;
}
SignalTestInterfaceHandle::Signal_float_arg&
SignalTestInterfaceHandle::sig_float_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->float_arg.psignal;
}
SignalTestInterfaceHandle::Signal_string_arg&
SignalTestInterfaceHandle::sig_string_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->string_arg.psignal;
}
SignalTestInterfaceHandle::Signal_enum_arg&
SignalTestInterfaceHandle::sig_enum_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->enum_arg.psignal;
}
SignalTestInterfaceHandle::Signal_record_arg&
SignalTestInterfaceHandle::sig_record_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->record_arg.psignal;
}
SignalTestInterfaceHandle::Signal_sequence_arg&
SignalTestInterfaceHandle::sig_sequence_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->sequence_arg.psignal;
}
SignalTestInterfaceHandle::Signal_interface_arg&
SignalTestInterfaceHandle::sig_interface_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->interface_arg.psignal;
}
SignalTestInterfaceHandle::Signal_any_arg&
SignalTestInterfaceHandle::sig_any_arg ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->any_arg.psignal;
}
SignalTestInterfaceHandle::Signal_self_args&
SignalTestInterfaceHandle::sig_self_args ()
{
  return connection_id2context<SignalTestInterface_Context$> (connection_handle2id (*this))->self_args.psignal;
}

// === ChildInheritingSignals ===
static inline void ref   (ChildInheritingSignalsHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (ChildInheritingSignalsHandle&) {} // dummy stub for Signal<>.emit
struct ChildInheritingSignals_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public ChildInheritingSignalsHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  typedef Aida::CxxStub::SignalHandler<ChildInheritingSignalsHandle, void (ChildInheritingSignalsHandle &c, SignalTestInterfaceHandle &p, const Aida::Any &a, int i, const QuickRecordStruct &r, const QuickSequenceStruct &s)> SignalHandler__child_signal;
  SignalHandler__child_signal child_signal;
  ChildInheritingSignals_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    child_signal (handle$, 0x56e02e4bf72a0363ULL, 0x4af5fd2e14057dc2ULL),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
ChildInheritingSignals_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3e2ad0e03001d9acULL, 0x29b504a5e59d6c5fULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
ChildInheritingSignalsHandle::ChildInheritingSignalsHandle ()
{}
void
operator<<= (Aida::FieldBuffer &fb, const ChildInheritingSignalsHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, ChildInheritingSignalsHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<ChildInheritingSignals_Context$> (ipcid)->handle$ : ChildInheritingSignalsHandle();
}
const Aida::TypeHash&
ChildInheritingSignalsHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0d6e67873f4098cbULL, 0xe7f2eb93eb46037cULL);
  return type_hash;
}
ChildInheritingSignalsHandle
ChildInheritingSignalsHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<ChildInheritingSignals_Context$> (connection_handle2id (other))->handle$;
  return ChildInheritingSignalsHandle();
}
const Aida::TypeHashList&
ChildInheritingSignalsHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<ChildInheritingSignals_Context$> (ipcid)->list_types();
}
ChildInheritingSignalsHandle::Signal_child_signal&
ChildInheritingSignalsHandle::sig_child_signal ()
{
  return connection_id2context<ChildInheritingSignals_Context$> (connection_handle2id (*this))->child_signal.psignal;
}

// === AnotherChild ===
static inline void ref   (AnotherChildHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (AnotherChildHandle&) {} // dummy stub for Signal<>.emit
struct AnotherChild_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public AnotherChildHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  AnotherChild_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
AnotherChild_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3d193e12c75ef8cdULL, 0x583552525e108c61ULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
AnotherChildHandle::AnotherChildHandle ()
{}
void
operator<<= (Aida::FieldBuffer &fb, const AnotherChildHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, AnotherChildHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<AnotherChild_Context$> (ipcid)->handle$ : AnotherChildHandle();
}
const Aida::TypeHash&
AnotherChildHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0e2870deaacf05f9ULL, 0x2851002b6bd14b7aULL);
  return type_hash;
}
AnotherChildHandle
AnotherChildHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<AnotherChild_Context$> (connection_handle2id (other))->handle$;
  return AnotherChildHandle();
}
const Aida::TypeHashList&
AnotherChildHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<AnotherChild_Context$> (ipcid)->list_types();
}

// === PropertyTester ===
static inline void ref   (PropertyTesterHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (PropertyTesterHandle&) {} // dummy stub for Signal<>.emit
struct PropertyTester_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public PropertyTesterHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  PropertyTester_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
PropertyTester_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x342f93a48aa12aebULL, 0x06c2ed978db9d30eULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
PropertyTesterHandle::PropertyTesterHandle ()
{}
Aida::ClientConnection
PropertyTesterHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const PropertyTesterHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, PropertyTesterHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<PropertyTester_Context$> (ipcid)->handle$ : PropertyTesterHandle();
}
const Aida::TypeHash&
PropertyTesterHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0de89d5c207bc662ULL, 0x846800e315917b46ULL);
  return type_hash;
}
PropertyTesterHandle
PropertyTesterHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<PropertyTester_Context$> (connection_handle2id (other))->handle$;
  return PropertyTesterHandle();
}
const Aida::TypeHashList&
PropertyTesterHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<PropertyTester_Context$> (ipcid)->list_types();
}
bool
PropertyTesterHandle::bool_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x396c5b1aaf49cec6ULL, 0xb6218ab5ac6b82c3ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  bool  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::bool_prop (bool value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2bd3c8fc8f71f8b4ULL, 0x2dde5c2c8fcf750cULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
int
PropertyTesterHandle::int_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x369c402f00bbf1e2ULL, 0x515a4131e4516216ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  int  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::int_prop (int value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2a015ad6b813701dULL, 0x62fa674331e78289ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
double
PropertyTesterHandle::float_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x3b2c96526265c4baULL, 0xc1f4b15d96504a08ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  double  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::float_prop (double value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x25ae78062c0435cdULL, 0x1d21f473f7647360ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
PropertyTesterHandle::string_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x385771786e6432dbULL, 0xcb19bfb3aa9a26feULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::string_prop (const std::string &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x206d200c92ba7e41ULL, 0x857975e0304c85f3ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
QuickEnum
PropertyTesterHandle::enum_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x3d09e074f5d2f8edULL, 0x38e8a275e29c3fc2ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickEnum  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::enum_prop (QuickEnum value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2b77a2f3a3c4d5b4ULL, 0x4d5b96d1adf5f7ccULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
QuickRecordStruct
PropertyTesterHandle::record_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x31443949c61d0fecULL, 0xeb221638d6ffd3cfULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickRecordStruct  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::record_prop (const QuickRecordStruct &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2a5f5c212625f446ULL, 0x30d24123307269ceULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
QuickSequenceStruct
PropertyTesterHandle::sequence_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x3f323c929c803ea8ULL, 0x6ebf49e977bfb699ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  QuickSequenceStruct  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::sequence_prop (const QuickSequenceStruct &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x232174952090a941ULL, 0xae8b7a3e13fdfde7ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
GrandChildHandle
PropertyTesterHandle::interface_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x33a8b72ea92bb600ULL, 0x3837c1118556aaedULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  GrandChildHandle  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::interface_prop (GrandChildHandle value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x29163b10631cf4b4ULL, 0xf014d69b1a1153e9ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
PropertyTesterHandle
PropertyTesterHandle::self_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x3e6b07e114fab96bULL, 0x45a97f76ee1a7bcfULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  PropertyTesterHandle  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::self_prop (PropertyTesterHandle value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2c1aea6b5567c7beULL, 0x8f21acd05f5030deULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
Aida::Any
PropertyTesterHandle::any_prop () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x331c2730c160062aULL, 0xaabfaeca6649ae46ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  Aida::Any  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
PropertyTesterHandle::any_prop (const Aida::Any &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x28a440900d170de2ULL, 0x69e43a111fa9fb39ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
} // InterfaceTests

namespace RapicornAidaTest {

// === ButtonArea ===
static inline void ref   (ButtonAreaHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (ButtonAreaHandle&) {} // dummy stub for Signal<>.emit
struct ButtonArea_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public ButtonAreaHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  typedef Aida::CxxStub::SignalHandler<ButtonAreaHandle, bool ()> SignalHandler__check_activate;
  SignalHandler__check_activate check_activate;
  typedef Aida::CxxStub::SignalHandler<ButtonAreaHandle, void ()> SignalHandler__activate;
  SignalHandler__activate activate;
  ButtonArea_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    check_activate (handle$, 0x5ed315978fdefdcaULL, 0x9efe9e4845d8907eULL),
    activate (handle$, 0x57905c3b089b970eULL, 0x3774e2d97c70a48fULL),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
ButtonArea_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x3ba079ca93d55fb3ULL, 0xf9944831dc1fc726ULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
ButtonAreaHandle::ButtonAreaHandle ()
{}
Aida::ClientConnection
ButtonAreaHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const ButtonAreaHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, ButtonAreaHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<ButtonArea_Context$> (ipcid)->handle$ : ButtonAreaHandle();
}
const Aida::TypeHash&
ButtonAreaHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0eb6bcdae9e87fe7ULL, 0xb2f16c34cdc20188ULL);
  return type_hash;
}
ButtonAreaHandle
ButtonAreaHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<ButtonArea_Context$> (connection_handle2id (other))->handle$;
  return ButtonAreaHandle();
}
const Aida::TypeHashList&
ButtonAreaHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<ButtonArea_Context$> (ipcid)->list_types();
}
ButtonAreaHandle::Signal_check_activate&
ButtonAreaHandle::sig_check_activate ()
{
  return connection_id2context<ButtonArea_Context$> (connection_handle2id (*this))->check_activate.psignal;
}
ButtonAreaHandle::Signal_activate&
ButtonAreaHandle::sig_activate ()
{
  return connection_id2context<ButtonArea_Context$> (connection_handle2id (*this))->activate.psignal;
}
std::string
ButtonAreaHandle::on_click () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x3f6e2e244632537cULL, 0xfd0507d0d775d378ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
ButtonAreaHandle::on_click (const std::string &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x21deec11706d9e22ULL, 0xe49764529e2818caULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
ButtonAreaHandle::on_click2 () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x3fc6f6ef4e1ab204ULL, 0x4790604ab2ffd999ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
ButtonAreaHandle::on_click2 (const std::string &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x29fb5831619e59b2ULL, 0x3ad2cb6ee3214d2fULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
ButtonAreaHandle::on_click3 () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x387a3b53e25004c1ULL, 0xafe6289a8ef446fdULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  std::string  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
ButtonAreaHandle::on_click3 (const std::string &value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x2e609af16c0176daULL, 0x17c7ea8ce9fcf874ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
ClickType
ButtonAreaHandle::click_type () const
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1), *fr = NULL;
  fb.add_msgid (0x33032db41e62e30fULL, 0x92d90ac8cf899010ULL);
  fb <<= (*this);
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  ClickType  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
void
ButtonAreaHandle::click_type (ClickType value)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x21058465dc0b1d3fULL, 0x7e683383d0024c74ULL); // msgid
  fb <<= (*this);
  fb <<= value;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}

// === PureMethods ===
static inline void ref   (PureMethodsHandle&) {} // dummy stub for Signal<>.emit
static inline void unref (PureMethodsHandle&) {} // dummy stub for Signal<>.emit
struct PureMethods_Context$ : public Aida::NonCopyable {
  struct SmartHandle$ : public PureMethodsHandle {
    SmartHandle$ (Aida::uint64_t ipcid) : Aida::SmartHandle (ipcid) {}
  } handle$;
  PureMethods_Context$ (Aida::uint64_t ipcid) :
    handle$ (ipcid),
    m_cached_types (NULL)
  {}
  Aida::TypeHashList *m_cached_types;
  const Aida::TypeHashList& list_types ();
};
const Aida::TypeHashList&
PureMethods_Context$::list_types ()
{
  if (!m_cached_types) {
    Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1);
    fb.add_msgid (0x34692a915fe47960ULL, 0x86e3694656f6f9afULL);
    fb <<= handle$;
    Aida::FieldBuffer *fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
    AIDA_CHECK (fr != NULL, "missing result from 2-way call");
    Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    size_t len;
    frr >>= len;
    AIDA_CHECK (frr.remaining() == len * 2, "result truncated");
    Aida::TypeHashList *thv = new Aida::TypeHashList();
    Aida::TypeHash thash;
    for (size_t i = 0; i < len; i++) {
      frr >>= thash;
      thv->push_back (thash);
    }
    delete fr;
    if (!Aida::atomic_ptr_cas (&m_cached_types, (Aida::TypeHashList*) NULL, thv))
      delete thv;
  }
  return *m_cached_types;
}
PureMethodsHandle::PureMethodsHandle ()
{}
Aida::ClientConnection
PureMethodsHandle::__client_connection__ (void)
{
  return AIDA_CONNECTION();
}
void
operator<<= (Aida::FieldBuffer &fb, const PureMethodsHandle &handle)
{
  fb.add_object (connection_handle2id (handle));
}
void
operator>>= (Aida::FieldReader &fbr, PureMethodsHandle &handle)
{
  const Aida::uint64_t ipcid = fbr.pop_object();
  handle = AIDA_ISLIKELY (ipcid) ? connection_id2context<PureMethods_Context$> (ipcid)->handle$ : PureMethodsHandle();
}
const Aida::TypeHash&
PureMethodsHandle::_type()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x0e0bc42228fe9334ULL, 0x66dcee20d071f835ULL);
  return type_hash;
}
PureMethodsHandle
PureMethodsHandle::_cast (Aida::SmartHandle &other, const Aida::TypeHashList &types)
{
  size_t i; const Aida::TypeHash &mine = _type();
  for (i = 0; i < types.size(); i++)
    if (mine == types[i])
      return connection_id2context<PureMethods_Context$> (connection_handle2id (other))->handle$;
  return PureMethodsHandle();
}
const Aida::TypeHashList&
PureMethodsHandle::cast_types()
{
  static Aida::TypeHashList notypes;
  const Aida::uint64_t ipcid = connection_handle2id (*this);
  if (AIDA_UNLIKELY (!ipcid)) return notypes; // null handle
  return connection_id2context<PureMethods_Context$> (ipcid)->list_types();
}
int
PureMethodsHandle::pure_method (double arg_f)
{
  Aida::FieldBuffer &fb = *Aida::FieldBuffer::_new (2 + 1 + 1), *fr = NULL;
  fb.add_msgid (0x3b3394fb03a86bf1ULL, 0x914fbcdcdac7d567ULL); // msgid
  fb <<= (*this);
  fb <<= arg_f;
  fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  Aida::FieldReader frr (*fr);
  frr.skip_msgid(); // FIXME: check msgid
  int  retval;
  frr >>= retval;
  delete fr;
  return retval;
}
} // RapicornAidaTest

