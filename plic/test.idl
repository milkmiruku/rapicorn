/* IDL test file					 	-*-mode:c++;-*-
 *
 * This work is provided "as is"; redistribution and modification
 * in whole or in part, in any medium, physical or electronic is
 * permitted without restriction.
 *
 * This work is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * In no event shall the authors or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 */

// single line comment

/* multi line comment on single line */

/* multi line comment with embedded single line slashes //
// still in multi line comment
// */

;;;;;;;	// multi semicolon test

namespace EmptyNamespace1 { }

namespace EmptyNamespace2 {
;;;;;;;	// multi semicolon in namespace test
}

namespace MandatoryNamespace {

// simple constant tests
Const A = 1;
Const S = "string";
Const S2 = "concatenated" "string";
Const A = 1 + 3 * 5 + 2 ** 3 % 11 + 1.5;	// 25.5
Const B = A**3;					// 16581.375

/* test that C++ style commments are properly ignored within strings */
Const CXX_COMMENT_TEST_1 = "Foo // bar";
Const CXX_COMMENT_TEST_2 = "Foo \" // bar";
Const CXX_COMMENT_TEST_3 = "Foo \\";//bar
Const CXX_COMMENT_TEST_4 = "Foo /**/ bar";
Const CXX_COMMENT_TEST_5 = "Foo /*//*/ bar";
Const CXX_COMMENT_TEST_6 = "Foo /* */ */ bar";
Const CXX_COMMENT_TEST_7 = "Foo /* /* /* bar";
Const CXX_COMMENT_TEST_8 = "Foo /* /* */ /* bar";


// enumerations
enumeration Empty  { };
enumeration Enum1  { A };
enumeration Enum1c { A, };
enumeration Enum2  { A, B };
enumeration Enum2c { A, B, };
enumeration Enum3  { A, B, C };
enumeration Enum3c { A, B, C, };
enumeration Enum4a { A, B, C, D  /**/ };
enumeration Enum4b { A, B, C, D, /**/ };
enumeration Enum4c { A, B, C, D  //
                       };
enumeration Enum4d { A, B, C, D, //
                       };

// enumeration arguments
enum ExtensiveEnum {
  V0,
  V10 =    "10",
  V11 =  _("11"),
  V12 = (  "12"),
  V13 = (  "v13"),
  V14 = (_("v14")),
  V15 = (  "v15",    "V15"),
  V16 = (_("v16"),   "V16"),
  V17 = (  "v17",  _("V17")),
  V18 = (_("v18"), _("V18")),
  V18 = (_("v18"), _("V18")),
  /* we cannot parse leading number expressions in enum args */
  // V1  =  1,
  // V2  = (2),
  // V3  = (3,   "v3"),
  // V4  = (4, _("v4")),
  // V5  = (5,   "v5",    "V5"),
  // V6  = (6, _("v6"),   "V6"),
  // V7  = (7,   "v7",  _("V7")),
  // V8  = (8, _("v8"), _("V8")),
};

} // MandatoryNamespace
