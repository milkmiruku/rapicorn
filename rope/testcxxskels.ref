#include <rapicorn.hh>

/* --- Generated by PLIC-CxxCaller --- */

// --- ServerHH Boilerplate ---
#include <rcore/plicutils.hh>
#include <rcore/rapicornsignal.hh>
using Rapicorn::Signals::slot;

// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};

class I_FirstInterface_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_FirstInterface_Iface ();
  virtual /*Des*/         ~I_FirstInterface_Iface () = 0;
public:
  virtual void            void_func ();
};
class FirstInterface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline FirstInterface () {}
  inline FirstInterface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline FirstInterface (I_FirstInterface_Iface *iface) { _iface (iface); }
  inline FirstInterface (I_FirstInterface_Iface &iface) { _iface (&iface); }
  // void            void_func ();
  inline I_FirstInterface_Iface& operator*  () const { return *dynamic_cast<I_FirstInterface_Iface*> (_iface()); }
  inline I_FirstInterface_Iface* operator-> () const { return dynamic_cast<I_FirstInterface_Iface*> (_iface()); }
  inline operator  I_FirstInterface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  FirstInterface  iface1;
  FirstInterface  iface2;
  FirstInterface  iface3;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence {
  typedef std::vector<bool> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        single_bool;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct IntSequence {
  typedef std::vector<int> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        numx;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct FloatSequence {
  typedef std::vector<double> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        fractalvalue;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct StringSequence {
  typedef std::vector<std::string> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        blurb;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct ExtensiveEnumSequence {
  typedef std::vector<ExtensiveEnum> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        enum_elements;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct RecordSequence {
  typedef std::vector<XFooRecord> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        repeatedfield;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct SequenceSequence {
  typedef std::vector<IntSequence> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        moreints;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct InterfaceSequence {
  typedef std::vector<FirstInterface> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        iface1;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq {
  typedef std::vector<NestedTypesRec> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};

namespace Inner {
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline InnerRecord () { x = 0; y = 0; }
};
} // Inner
struct Refer2Inner {
  Inner::InnerRecord r;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline Refer2Inner () { }
};
} // MandatoryNamespace

namespace OtherNamespace {
struct SomeRecord {
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline SomeRecord () { }
};
} // OtherNamespace

namespace Auxdata {
typedef int bar;
typedef double x;
typedef std::string s;
} // Auxdata

namespace InterfaceTests {

class I_UIWidgetArea_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_UIWidgetArea_Iface ();
  virtual /*Des*/         ~I_UIWidgetArea_Iface () = 0;
public:
  typedef Rapicorn::Signals::Signal<I_UIWidgetArea_Iface, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::Signal<I_UIWidgetArea_Iface, double (I_UIWidgetArea_Iface &ba1, int someint)> Signal_sample_signal;
  Signal_void_signal sig_void_signal;
  Signal_sample_signal sig_sample_signal;
  virtual double          simple_method ();
  virtual double          single_arg    (int n);
  virtual double          single_arg2   (int n = 5);
  virtual double          two_args      (int n,
                                         double r);
  virtual double          two_args2     (int n = 6,
                                         double r = 7.7);
  virtual double          multi_args    (int n,
                                         double r,
                                         int i,
                                         const std::string &s = "String ding",
                                         double y = 5);
  virtual double          self_method   (I_UIWidgetArea_Iface &ba1,
                                         I_UIWidgetArea_Iface &ba2);
  virtual void            void_method   ();
  virtual std::string     on_click2out  ();
  virtual void            on_click2in   (const std::string &command);
};
class UIWidgetArea : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline UIWidgetArea () {}
  inline UIWidgetArea (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline UIWidgetArea (I_UIWidgetArea_Iface *iface) { _iface (iface); }
  inline UIWidgetArea (I_UIWidgetArea_Iface &iface) { _iface (&iface); }
  // double          simple_method ();
  // double          single_arg    (int);
  // double          single_arg2   (int);
  // double          two_args      (int, double);
  // double          two_args2     (int, double);
  // double          multi_args    (int, double, int, const std::string&, double);
  // double          self_method   (UIWidgetArea&, UIWidgetArea&);
  // void            void_method   ();
  // std::string     on_click2out  ();
  // void            on_click2in   (const std::string&);
  inline I_UIWidgetArea_Iface& operator*  () const { return *dynamic_cast<I_UIWidgetArea_Iface*> (_iface()); }
  inline I_UIWidgetArea_Iface* operator-> () const { return dynamic_cast<I_UIWidgetArea_Iface*> (_iface()); }
  inline operator  I_UIWidgetArea_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_Parent_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_Parent_Iface ();
  virtual /*Des*/         ~I_Parent_Iface () = 0;
public:
};
class Parent : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline Parent () {}
  inline Parent (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline Parent (I_Parent_Iface *iface) { _iface (iface); }
  inline Parent (I_Parent_Iface &iface) { _iface (&iface); }
  inline I_Parent_Iface& operator*  () const { return *dynamic_cast<I_Parent_Iface*> (_iface()); }
  inline I_Parent_Iface* operator-> () const { return dynamic_cast<I_Parent_Iface*> (_iface()); }
  inline operator  I_Parent_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_Child_Iface : public virtual I_Parent_Iface {
protected:
  explicit                 I_Child_Iface ();
  virtual /*Des*/         ~I_Child_Iface () = 0;
public:
};
class Child : public Parent {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline Child () {}
  inline Child (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline Child (I_Child_Iface *iface) { _iface (iface); }
  inline Child (I_Child_Iface &iface) { _iface (&iface); }
  inline I_Child_Iface& operator*  () const { return *dynamic_cast<I_Child_Iface*> (_iface()); }
  inline I_Child_Iface* operator-> () const { return dynamic_cast<I_Child_Iface*> (_iface()); }
  inline operator  I_Child_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_Descendant_Iface : public virtual I_Child_Iface {
protected:
  explicit                 I_Descendant_Iface ();
  virtual /*Des*/         ~I_Descendant_Iface () = 0;
public:
};
class Descendant : public Child {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline Descendant () {}
  inline Descendant (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline Descendant (I_Descendant_Iface *iface) { _iface (iface); }
  inline Descendant (I_Descendant_Iface &iface) { _iface (&iface); }
  inline I_Descendant_Iface& operator*  () const { return *dynamic_cast<I_Descendant_Iface*> (_iface()); }
  inline I_Descendant_Iface* operator-> () const { return dynamic_cast<I_Descendant_Iface*> (_iface()); }
  inline operator  I_Descendant_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_GrandChild_Iface : public virtual I_Descendant_Iface {
protected:
  explicit                 I_GrandChild_Iface ();
  virtual /*Des*/         ~I_GrandChild_Iface () = 0;
public:
};
class GrandChild : public Descendant {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline GrandChild () {}
  inline GrandChild (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline GrandChild (I_GrandChild_Iface *iface) { _iface (iface); }
  inline GrandChild (I_GrandChild_Iface &iface) { _iface (&iface); }
  inline I_GrandChild_Iface& operator*  () const { return *dynamic_cast<I_GrandChild_Iface*> (_iface()); }
  inline I_GrandChild_Iface* operator-> () const { return dynamic_cast<I_GrandChild_Iface*> (_iface()); }
  inline operator  I_GrandChild_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord {
  int             int1;
  int             int2;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline QuickRecord () { int1 = 0; int2 = 0; }
};
struct QuickSequence {
  typedef std::vector<double> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        somefloat;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};

class I_QuickIface_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_QuickIface_Iface ();
  virtual /*Des*/         ~I_QuickIface_Iface () = 0;
public:
  virtual void            simple_function (int i = 9);
};
class QuickIface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline QuickIface () {}
  inline QuickIface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline QuickIface (I_QuickIface_Iface *iface) { _iface (iface); }
  inline QuickIface (I_QuickIface_Iface &iface) { _iface (&iface); }
  // void            simple_function (int);
  inline I_QuickIface_Iface& operator*  () const { return *dynamic_cast<I_QuickIface_Iface*> (_iface()); }
  inline I_QuickIface_Iface* operator-> () const { return dynamic_cast<I_QuickIface_Iface*> (_iface()); }
  inline operator  I_QuickIface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_MethodTestInterface_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_MethodTestInterface_Iface ();
  virtual /*Des*/         ~I_MethodTestInterface_Iface () = 0;
public:
  virtual void            method_with_void       ();
  virtual bool            method_with_bools      (bool input,
                                                  bool optval = 0);
  virtual int             method_with_ints       (int input,
                                                  int optval = -2);
  virtual double          method_with_floats     (double input,
                                                  double optval = 309.9);
  virtual std::string     method_with_string     (const std::string &input,
                                                  const std::string &optval = "default");
  virtual QuickEnum       method_with_enum       (QuickEnum input,
                                                  QuickEnum optval = QuickEnum (0));
  virtual QuickRecord     method_with_record     (const QuickRecord &input,
                                                  const QuickRecord &optval = QuickRecord());
  virtual QuickSequence   method_with_sequence   (const QuickSequence &input,
                                                  const QuickSequence &optval = QuickSequence());
  virtual I_GrandChild_Iface* method_with_interface  (I_GrandChild_Iface &input,
                                                      I_GrandChild_Iface &optval = *(I_GrandChild_Iface*) NULL);
  virtual I_QuickIface_Iface* method_with_quickiface (I_QuickIface_Iface &input,
                                                      I_QuickIface_Iface &iface0 = *(I_QuickIface_Iface*) NULL);
};
class MethodTestInterface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline MethodTestInterface () {}
  inline MethodTestInterface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline MethodTestInterface (I_MethodTestInterface_Iface *iface) { _iface (iface); }
  inline MethodTestInterface (I_MethodTestInterface_Iface &iface) { _iface (&iface); }
  // void            method_with_void       ();
  // bool            method_with_bools      (bool, bool);
  // int             method_with_ints       (int, int);
  // double          method_with_floats     (double, double);
  // std::string     method_with_string     (const std::string&, const std::string&);
  // QuickEnum       method_with_enum       (QuickEnum, QuickEnum);
  // QuickRecord     method_with_record     (const QuickRecord&, const QuickRecord&);
  // QuickSequence   method_with_sequence   (const QuickSequence&, const QuickSequence&);
  // GrandChild      method_with_interface  (GrandChild&, GrandChild&);
  // QuickIface      method_with_quickiface (QuickIface&, QuickIface&);
  inline I_MethodTestInterface_Iface& operator*  () const { return *dynamic_cast<I_MethodTestInterface_Iface*> (_iface()); }
  inline I_MethodTestInterface_Iface* operator-> () const { return dynamic_cast<I_MethodTestInterface_Iface*> (_iface()); }
  inline operator  I_MethodTestInterface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // InterfaceTests

namespace RapicornPlicTest {
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class I_ButtonArea_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_ButtonArea_Iface ();
  virtual /*Des*/         ~I_ButtonArea_Iface () = 0;
public:
  typedef Rapicorn::Signals::Signal<I_ButtonArea_Iface, bool (), Rapicorn::Signals::CollectorUntil0<bool> > Signal_check_activate;
  typedef Rapicorn::Signals::Signal<I_ButtonArea_Iface, void ()> Signal_activate;
  Signal_check_activate sig_check_activate;
  Signal_activate sig_activate;
};
class ButtonArea : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline ButtonArea () {}
  inline ButtonArea (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline ButtonArea (I_ButtonArea_Iface *iface) { _iface (iface); }
  inline ButtonArea (I_ButtonArea_Iface &iface) { _iface (&iface); }
  inline I_ButtonArea_Iface& operator*  () const { return *dynamic_cast<I_ButtonArea_Iface*> (_iface()); }
  inline I_ButtonArea_Iface* operator-> () const { return dynamic_cast<I_ButtonArea_Iface*> (_iface()); }
  inline operator  I_ButtonArea_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_PureMethods_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_PureMethods_Iface ();
  virtual /*Des*/         ~I_PureMethods_Iface () = 0;
public:
  virtual int             pure_method (double f) = 0;
};
class PureMethods : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline PureMethods () {}
  inline PureMethods (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline PureMethods (I_PureMethods_Iface *iface) { _iface (iface); }
  inline PureMethods (I_PureMethods_Iface &iface) { _iface (&iface); }
  // int             pure_method (double);
  inline I_PureMethods_Iface& operator*  () const { return *dynamic_cast<I_PureMethods_Iface*> (_iface()); }
  inline I_PureMethods_Iface* operator-> () const { return dynamic_cast<I_PureMethods_Iface*> (_iface()); }
  inline operator  I_PureMethods_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // RapicornPlicTest

// --- Interface Skeletons ---

namespace MandatoryNamespace {

void
I_FirstInterface_Iface::void_func ()
{
}
} // MandatoryNamespace

namespace InterfaceTests {

double
I_UIWidgetArea_Iface::simple_method ()
{
  return 0; // FIXME
}

double
I_UIWidgetArea_Iface::single_arg (int n)
{
  return 0; // FIXME
}

double
I_UIWidgetArea_Iface::single_arg2 (int n)
{
  return 0; // FIXME
}

double
I_UIWidgetArea_Iface::two_args (int n,
                                double r)
{
  return 0; // FIXME
}

double
I_UIWidgetArea_Iface::two_args2 (int n,
                                 double r)
{
  return 0; // FIXME
}

double
I_UIWidgetArea_Iface::multi_args (int n,
                                  double r,
                                  int i,
                                  const std::string &s,
                                  double y)
{
  return 0; // FIXME
}

double
I_UIWidgetArea_Iface::self_method (I_UIWidgetArea_Iface &ba1,
                                   I_UIWidgetArea_Iface &ba2)
{
  return 0; // FIXME
}

void
I_UIWidgetArea_Iface::void_method ()
{
}

std::string
I_UIWidgetArea_Iface::on_click2out ()
{
  return 0; // FIXME
}

void
I_UIWidgetArea_Iface::on_click2in (const std::string &command)
{
}

void
I_QuickIface_Iface::simple_function (int i)
{
}

void
I_MethodTestInterface_Iface::method_with_void ()
{
}

bool
I_MethodTestInterface_Iface::method_with_bools (bool input,
                                                bool optval)
{
  return 0; // FIXME
}

int
I_MethodTestInterface_Iface::method_with_ints (int input,
                                               int optval)
{
  return 0; // FIXME
}

double
I_MethodTestInterface_Iface::method_with_floats (double input,
                                                 double optval)
{
  return 0; // FIXME
}

std::string
I_MethodTestInterface_Iface::method_with_string (const std::string &input,
                                                 const std::string &optval)
{
  return 0; // FIXME
}

QuickEnum
I_MethodTestInterface_Iface::method_with_enum (QuickEnum input,
                                               QuickEnum optval)
{
  return QuickEnum (0); // FIXME
}

QuickRecord
I_MethodTestInterface_Iface::method_with_record (const QuickRecord &input,
                                                 const QuickRecord &optval)
{
  return QuickRecord(); // FIXME
}

QuickSequence
I_MethodTestInterface_Iface::method_with_sequence (const QuickSequence &input,
                                                   const QuickSequence &optval)
{
  return QuickSequence(); // FIXME
}

I_GrandChild_Iface*
I_MethodTestInterface_Iface::method_with_interface (I_GrandChild_Iface &input,
                                                    I_GrandChild_Iface &optval)
{
  return (I_GrandChild_Iface*) NULL; // FIXME
}

I_QuickIface_Iface*
I_MethodTestInterface_Iface::method_with_quickiface (I_QuickIface_Iface &input,
                                                     I_QuickIface_Iface &iface0)
{
  return (I_QuickIface_Iface*) NULL; // FIXME
}
} // InterfaceTests

