/* --- Generated by PLIC-CxxCaller --- */

// --- ServerHH Boilerplate ---
#include <rcore/plicutils.hh>
#include <rcore/rapicornsignal.hh>
using Rapicorn::Signals::slot;

// --- ClientCC/ServerCC Boilerplate ---
#include <string>
#include <vector>
#include <stdexcept>
#ifndef __PLIC_GENERIC_CC_BOILERPLATE__
#define __PLIC_GENERIC_CC_BOILERPLATE__

#define THROW_ERROR()   throw std::runtime_error ("PLIC: Marshalling failed")
#define PLIC_CHECK(cond,errmsg) do { if (cond) break; throw std::runtime_error (std::string ("PLIC-ERROR: ") + errmsg); } while (0)

namespace { // Anonymous
using Plic::uint64;
typedef Plic::Coupler Coupler;
typedef Plic::FieldBuffer FieldBuffer;
typedef Plic::FieldBuffer8 FieldBuffer8;
typedef Plic::FieldBufferReader FieldBufferReader;

#ifndef PLIC_COUPLER
#define PLIC_COUPLER()  _plic_coupler_static
static struct _DummyCoupler : public Coupler {
  virtual FieldBuffer* call_remote (FieldBuffer *fbcall)
  {
    bool hasresult = Plic::msgid_has_result (fbcall->first_id());
    if (push_call (fbcall)) // deletes fbcall
      ; // threaded dispatcher needs CPU
    // wakeup dispatcher
    while (check_dispatch())
      dispatch();
    return !hasresult ? NULL : pop_result();
  }
} _plic_coupler_static;
#endif

} // Anonymous
#endif // __PLIC_GENERIC_CC_BOILERPLATE__


// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};

class I_FirstInterface_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_FirstInterface_Iface ();
  virtual /*Des*/         ~I_FirstInterface_Iface () = 0;
public:
  virtual void            void_func ();
};
class FirstInterface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline FirstInterface () {}
  inline FirstInterface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline FirstInterface (I_FirstInterface_Iface *iface) { _iface (iface); }
  inline FirstInterface (I_FirstInterface_Iface &iface) { _iface (&iface); }
  // void            void_func ();
  inline I_FirstInterface_Iface& operator*  () const { return *dynamic_cast<I_FirstInterface_Iface*> (_iface()); }
  inline I_FirstInterface_Iface* operator-> () const { return dynamic_cast<I_FirstInterface_Iface*> (_iface()); }
  inline operator  I_FirstInterface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  FirstInterface  iface1;
  FirstInterface  iface2;
  FirstInterface  iface3;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence {
  std::vector<bool> single_bool;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct IntSequence {
  std::vector<int> numx;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct FloatSequence {
  std::vector<double> fractalvalue;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct StringSequence {
  std::vector<std::string> blurb;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct ExtensiveEnumSequence {
  std::vector<ExtensiveEnum> enum_elements;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct RecordSequence {
  std::vector<XFooRecord> repeatedfield;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct SequenceSequence {
  std::vector<IntSequence> moreints;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct InterfaceSequence {
  std::vector<FirstInterface> iface1;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq {
  std::vector<NestedTypesRec> ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};

namespace Inner {
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline InnerRecord () { x = 0; y = 0; }
};
} // Inner
struct Refer2Inner {
  Inner::InnerRecord r;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline Refer2Inner () { }
};
} // MandatoryNamespace

namespace OtherNamespace {
struct SomeRecord {
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline SomeRecord () { }
};
} // OtherNamespace

namespace Auxdata {
typedef int bar;
typedef double x;
typedef std::string s;
} // Auxdata

namespace InterfaceTests {

class I_UIWidgetArea_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_UIWidgetArea_Iface ();
  virtual /*Des*/         ~I_UIWidgetArea_Iface () = 0;
public:
  typedef Rapicorn::Signals::Signal<I_UIWidgetArea_Iface, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::Signal<I_UIWidgetArea_Iface, double (I_UIWidgetArea_Iface &ba1, int someint)> Signal_sample_signal;
  Signal_void_signal sig_void_signal;
  Signal_sample_signal sig_sample_signal;
  virtual double          simple_method ();
  virtual double          single_arg    (int n);
  virtual double          single_arg2   (int n = 5);
  virtual double          two_args      (int n,
                                         double r);
  virtual double          two_args2     (int n = 6,
                                         double r = 7.7);
  virtual double          multi_args    (int n,
                                         double r,
                                         int i,
                                         const std::string &s = "String ding",
                                         double y = 5);
  virtual double          self_method   (I_UIWidgetArea_Iface &ba1,
                                         I_UIWidgetArea_Iface &ba2);
  virtual void            void_method   ();
  virtual std::string     on_click2out  ();
  virtual void            on_click2in   (const std::string &command);
};
class UIWidgetArea : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline UIWidgetArea () {}
  inline UIWidgetArea (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline UIWidgetArea (I_UIWidgetArea_Iface *iface) { _iface (iface); }
  inline UIWidgetArea (I_UIWidgetArea_Iface &iface) { _iface (&iface); }
  // double          simple_method ();
  // double          single_arg    (int);
  // double          single_arg2   (int);
  // double          two_args      (int, double);
  // double          two_args2     (int, double);
  // double          multi_args    (int, double, int, const std::string&, double);
  // double          self_method   (UIWidgetArea&, UIWidgetArea&);
  // void            void_method   ();
  // std::string     on_click2out  ();
  // void            on_click2in   (const std::string&);
  inline I_UIWidgetArea_Iface& operator*  () const { return *dynamic_cast<I_UIWidgetArea_Iface*> (_iface()); }
  inline I_UIWidgetArea_Iface* operator-> () const { return dynamic_cast<I_UIWidgetArea_Iface*> (_iface()); }
  inline operator  I_UIWidgetArea_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_Parent_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_Parent_Iface ();
  virtual /*Des*/         ~I_Parent_Iface () = 0;
public:
};
class Parent : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline Parent () {}
  inline Parent (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline Parent (I_Parent_Iface *iface) { _iface (iface); }
  inline Parent (I_Parent_Iface &iface) { _iface (&iface); }
  inline I_Parent_Iface& operator*  () const { return *dynamic_cast<I_Parent_Iface*> (_iface()); }
  inline I_Parent_Iface* operator-> () const { return dynamic_cast<I_Parent_Iface*> (_iface()); }
  inline operator  I_Parent_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_Child_Iface : public virtual I_Parent_Iface {
protected:
  explicit                 I_Child_Iface ();
  virtual /*Des*/         ~I_Child_Iface () = 0;
public:
};
class Child : public Parent {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline Child () {}
  inline Child (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline Child (I_Child_Iface *iface) { _iface (iface); }
  inline Child (I_Child_Iface &iface) { _iface (&iface); }
  inline I_Child_Iface& operator*  () const { return *dynamic_cast<I_Child_Iface*> (_iface()); }
  inline I_Child_Iface* operator-> () const { return dynamic_cast<I_Child_Iface*> (_iface()); }
  inline operator  I_Child_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_Descendant_Iface : public virtual I_Child_Iface {
protected:
  explicit                 I_Descendant_Iface ();
  virtual /*Des*/         ~I_Descendant_Iface () = 0;
public:
};
class Descendant : public Child {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline Descendant () {}
  inline Descendant (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline Descendant (I_Descendant_Iface *iface) { _iface (iface); }
  inline Descendant (I_Descendant_Iface &iface) { _iface (&iface); }
  inline I_Descendant_Iface& operator*  () const { return *dynamic_cast<I_Descendant_Iface*> (_iface()); }
  inline I_Descendant_Iface* operator-> () const { return dynamic_cast<I_Descendant_Iface*> (_iface()); }
  inline operator  I_Descendant_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_GrandChild_Iface : public virtual I_Descendant_Iface {
protected:
  explicit                 I_GrandChild_Iface ();
  virtual /*Des*/         ~I_GrandChild_Iface () = 0;
public:
};
class GrandChild : public Descendant {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline GrandChild () {}
  inline GrandChild (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline GrandChild (I_GrandChild_Iface *iface) { _iface (iface); }
  inline GrandChild (I_GrandChild_Iface &iface) { _iface (&iface); }
  inline I_GrandChild_Iface& operator*  () const { return *dynamic_cast<I_GrandChild_Iface*> (_iface()); }
  inline I_GrandChild_Iface* operator-> () const { return dynamic_cast<I_GrandChild_Iface*> (_iface()); }
  inline operator  I_GrandChild_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord {
  int             int1;
  int             int2;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline QuickRecord () { int1 = 0; int2 = 0; }
};
struct QuickSequence {
  std::vector<double> somefloat;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};

class I_QuickIface_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_QuickIface_Iface ();
  virtual /*Des*/         ~I_QuickIface_Iface () = 0;
public:
  virtual void            simple_function (int i = 9);
};
class QuickIface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline QuickIface () {}
  inline QuickIface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline QuickIface (I_QuickIface_Iface *iface) { _iface (iface); }
  inline QuickIface (I_QuickIface_Iface &iface) { _iface (&iface); }
  // void            simple_function (int);
  inline I_QuickIface_Iface& operator*  () const { return *dynamic_cast<I_QuickIface_Iface*> (_iface()); }
  inline I_QuickIface_Iface* operator-> () const { return dynamic_cast<I_QuickIface_Iface*> (_iface()); }
  inline operator  I_QuickIface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_MethodTestInterface_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_MethodTestInterface_Iface ();
  virtual /*Des*/         ~I_MethodTestInterface_Iface () = 0;
public:
  virtual void            method_with_void       ();
  virtual bool            method_with_bools      (bool input,
                                                  bool optval = 0);
  virtual int             method_with_ints       (int input,
                                                  int optval = -2);
  virtual double          method_with_floats     (double input,
                                                  double optval = 309.9);
  virtual std::string     method_with_string     (const std::string &input,
                                                  const std::string &optval = "default");
  virtual QuickEnum       method_with_enum       (QuickEnum input,
                                                  QuickEnum optval = QuickEnum (0));
  virtual QuickRecord     method_with_record     (const QuickRecord &input,
                                                  const QuickRecord &optval = QuickRecord());
  virtual QuickSequence   method_with_sequence   (const QuickSequence &input,
                                                  const QuickSequence &optval = QuickSequence());
  virtual I_GrandChild_Iface* method_with_interface  (I_GrandChild_Iface &input,
                                                      I_GrandChild_Iface &optval = *(I_GrandChild_Iface*) NULL);
  virtual I_QuickIface_Iface* method_with_quickiface (I_QuickIface_Iface &input,
                                                      I_QuickIface_Iface &iface0 = *(I_QuickIface_Iface*) NULL);
};
class MethodTestInterface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline MethodTestInterface () {}
  inline MethodTestInterface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline MethodTestInterface (I_MethodTestInterface_Iface *iface) { _iface (iface); }
  inline MethodTestInterface (I_MethodTestInterface_Iface &iface) { _iface (&iface); }
  // void            method_with_void       ();
  // bool            method_with_bools      (bool, bool);
  // int             method_with_ints       (int, int);
  // double          method_with_floats     (double, double);
  // std::string     method_with_string     (const std::string&, const std::string&);
  // QuickEnum       method_with_enum       (QuickEnum, QuickEnum);
  // QuickRecord     method_with_record     (const QuickRecord&, const QuickRecord&);
  // QuickSequence   method_with_sequence   (const QuickSequence&, const QuickSequence&);
  // GrandChild      method_with_interface  (GrandChild&, GrandChild&);
  // QuickIface      method_with_quickiface (QuickIface&, QuickIface&);
  inline I_MethodTestInterface_Iface& operator*  () const { return *dynamic_cast<I_MethodTestInterface_Iface*> (_iface()); }
  inline I_MethodTestInterface_Iface* operator-> () const { return dynamic_cast<I_MethodTestInterface_Iface*> (_iface()); }
  inline operator  I_MethodTestInterface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // InterfaceTests

namespace RapicornPlicTest {
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class I_ButtonArea_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_ButtonArea_Iface ();
  virtual /*Des*/         ~I_ButtonArea_Iface () = 0;
public:
  typedef Rapicorn::Signals::Signal<I_ButtonArea_Iface, bool (), Rapicorn::Signals::CollectorUntil0<bool> > Signal_check_activate;
  typedef Rapicorn::Signals::Signal<I_ButtonArea_Iface, void ()> Signal_activate;
  Signal_check_activate sig_check_activate;
  Signal_activate sig_activate;
};
class ButtonArea : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline ButtonArea () {}
  inline ButtonArea (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline ButtonArea (I_ButtonArea_Iface *iface) { _iface (iface); }
  inline ButtonArea (I_ButtonArea_Iface &iface) { _iface (&iface); }
  inline I_ButtonArea_Iface& operator*  () const { return *dynamic_cast<I_ButtonArea_Iface*> (_iface()); }
  inline I_ButtonArea_Iface* operator-> () const { return dynamic_cast<I_ButtonArea_Iface*> (_iface()); }
  inline operator  I_ButtonArea_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class I_PureMethods_Iface : public virtual Plic::SimpleServer {
protected:
  explicit                 I_PureMethods_Iface ();
  virtual /*Des*/         ~I_PureMethods_Iface () = 0;
public:
  virtual int             pure_method (double f) = 0;
};
class PureMethods : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline void _iface (Plic::SimpleServer *_iface) { _void_iface (_iface); }
public:
  inline PureMethods () {}
  inline PureMethods (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline PureMethods (I_PureMethods_Iface *iface) { _iface (iface); }
  inline PureMethods (I_PureMethods_Iface &iface) { _iface (&iface); }
  // int             pure_method (double);
  inline I_PureMethods_Iface& operator*  () const { return *dynamic_cast<I_PureMethods_Iface*> (_iface()); }
  inline I_PureMethods_Iface* operator-> () const { return dynamic_cast<I_PureMethods_Iface*> (_iface()); }
  inline operator  I_PureMethods_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // RapicornPlicTest

// --- Implementations ---

namespace MandatoryNamespace {
I_FirstInterface_Iface::I_FirstInterface_Iface ()
{}
I_FirstInterface_Iface::~I_FirstInterface_Iface () {}

bool
XFooRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (14);
  fb.add_int64 (this->single_bool);
  fb.add_int64 (this->single_num);
  fb.add_double (this->single_float);
  fb.add_string (this->single_string);
  fb.add_int64 (this->sibling1);
  fb.add_int64 (this->sibling2);
  fb.add_int64 (this->multi1);
  fb.add_int64 (this->multi2);
  fb.add_int64 (this->multi3);
  fb.add_int64 (this->multi4);
  fb.add_evalue (this->enum_field);
  fb.add_object (FirstInterface (this->iface1)._rpc_id());
  fb.add_object (FirstInterface (this->iface2)._rpc_id());
  fb.add_object (FirstInterface (this->iface3)._rpc_id());
  return true;
}
bool
XFooRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 14) return false;
  this->single_bool = fbr.pop_int64();
  this->single_num = fbr.pop_int64();
  this->single_float = fbr.pop_double();
  this->single_string = fbr.pop_string();
  this->sibling1 = fbr.pop_int64();
  this->sibling2 = fbr.pop_int64();
  this->multi1 = fbr.pop_int64();
  this->multi2 = fbr.pop_int64();
  this->multi3 = fbr.pop_int64();
  this->multi4 = fbr.pop_int64();
  this->enum_field = ExtensiveEnum (fbr.pop_evalue());
  this->iface1 = FirstInterface (cpl, fbr);
  this->iface2 = FirstInterface (cpl, fbr);
  this->iface3 = FirstInterface (cpl, fbr);
  return true;
}

bool
XFooSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = single_bool.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 (this->single_bool[k]);
  }
  return true;
}
bool
XFooSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->single_bool.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->single_bool.push_back (fbr.pop_int64());
  }
  return true;
}

bool
IntSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = numx.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 (this->numx[k]);
  }
  return true;
}
bool
IntSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->numx.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->numx.push_back (fbr.pop_int64());
  }
  return true;
}

bool
FloatSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = fractalvalue.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double (this->fractalvalue[k]);
  }
  return true;
}
bool
FloatSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->fractalvalue.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->fractalvalue.push_back (fbr.pop_double());
  }
  return true;
}

bool
StringSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = blurb.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_string (this->blurb[k]);
  }
  return true;
}
bool
StringSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->blurb.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->blurb.push_back (fbr.pop_string());
  }
  return true;
}

bool
ExtensiveEnumSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = enum_elements.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_evalue (this->enum_elements[k]);
  }
  return true;
}
bool
ExtensiveEnumSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->enum_elements.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->enum_elements.push_back (ExtensiveEnum (fbr.pop_evalue()));
  }
  return true;
}

bool
RecordSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = repeatedfield.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->repeatedfield[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
RecordSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->repeatedfield.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->repeatedfield[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
SequenceSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = moreints.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->moreints[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
SequenceSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->moreints.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->moreints[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
InterfaceSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = iface1.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_object (FirstInterface (this->iface1[k])._rpc_id());
  }
  return true;
}
bool
InterfaceSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->iface1.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->iface1.push_back (FirstInterface (cpl, fbr));
  }
  return true;
}

bool
NestedTypesRec::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  if (!this->rec.proto_add (cpl, fb)) return false;
  if (!this->seq.proto_add (cpl, fb)) return false;
  return true;
}
bool
NestedTypesRec::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  if (!this->rec.proto_pop (cpl, fbr)) return false;
  if (!this->seq.proto_pop (cpl, fbr)) return false;
  return true;
}

bool
NestedTypesSeq::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = ntr.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->ntr[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
NestedTypesSeq::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->ntr.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->ntr[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
NewRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  fb.add_int64 (this->i);
  fb.add_evalue (this->enum1);
  if (!this->xfs.proto_add (cpl, fb)) return false;
  if (!this->ntr.proto_add (cpl, fb)) return false;
  return true;
}
bool
NewRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  this->i = fbr.pop_int64();
  this->enum1 = Enum1 (fbr.pop_evalue());
  if (!this->xfs.proto_pop (cpl, fbr)) return false;
  if (!this->ntr.proto_pop (cpl, fbr)) return false;
  return true;
}


namespace Inner {
bool
InnerRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (3);
  fb.add_int64 (this->x);
  fb.add_int64 (this->y);
  if (!this->rec.proto_add (cpl, fb)) return false;
  return true;
}
bool
InnerRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) return false;
  this->x = fbr.pop_int64();
  this->y = fbr.pop_int64();
  if (!this->rec.proto_pop (cpl, fbr)) return false;
  return true;
}

} // Inner
bool
Refer2Inner::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (1);
  if (!this->r.proto_add (cpl, fb)) return false;
  return true;
}
bool
Refer2Inner::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) return false;
  if (!this->r.proto_pop (cpl, fbr)) return false;
  return true;
}

} // MandatoryNamespace

namespace OtherNamespace {
bool
SomeRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  if (!this->r1.proto_add (cpl, fb)) return false;
  if (!this->r2.proto_add (cpl, fb)) return false;
  if (!this->r3.proto_add (cpl, fb)) return false;
  if (!this->r4.proto_add (cpl, fb)) return false;
  return true;
}
bool
SomeRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  if (!this->r1.proto_pop (cpl, fbr)) return false;
  if (!this->r2.proto_pop (cpl, fbr)) return false;
  if (!this->r3.proto_pop (cpl, fbr)) return false;
  if (!this->r4.proto_pop (cpl, fbr)) return false;
  return true;
}

} // OtherNamespace

namespace InterfaceTests {
I_UIWidgetArea_Iface::I_UIWidgetArea_Iface () :
  sig_void_signal (*this), sig_sample_signal (*this)
{}
I_UIWidgetArea_Iface::~I_UIWidgetArea_Iface () {}

I_Parent_Iface::I_Parent_Iface ()
{}
I_Parent_Iface::~I_Parent_Iface () {}

I_Child_Iface::I_Child_Iface ()
{}
I_Child_Iface::~I_Child_Iface () {}

I_Descendant_Iface::I_Descendant_Iface ()
{}
I_Descendant_Iface::~I_Descendant_Iface () {}

I_GrandChild_Iface::I_GrandChild_Iface ()
{}
I_GrandChild_Iface::~I_GrandChild_Iface () {}

bool
QuickRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  fb.add_int64 (this->int1);
  fb.add_int64 (this->int2);
  return true;
}
bool
QuickRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  this->int1 = fbr.pop_int64();
  this->int2 = fbr.pop_int64();
  return true;
}

bool
QuickSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = somefloat.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double (this->somefloat[k]);
  }
  return true;
}
bool
QuickSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->somefloat.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->somefloat.push_back (fbr.pop_double());
  }
  return true;
}

I_QuickIface_Iface::I_QuickIface_Iface ()
{}
I_QuickIface_Iface::~I_QuickIface_Iface () {}

I_MethodTestInterface_Iface::I_MethodTestInterface_Iface ()
{}
I_MethodTestInterface_Iface::~I_MethodTestInterface_Iface () {}

} // InterfaceTests

namespace RapicornPlicTest {
I_ButtonArea_Iface::I_ButtonArea_Iface () :
  sig_check_activate (*this), sig_activate (*this)
{}
I_ButtonArea_Iface::~I_ButtonArea_Iface () {}

I_PureMethods_Iface::I_PureMethods_Iface ()
{}
I_PureMethods_Iface::~I_PureMethods_Iface () {}


// --- Method Dispatchers & Registry ---
} // RapicornPlicTest

namespace MandatoryNamespace {
static FieldBuffer*
_dispatch__FirstInterface_void_func (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 0) return false;
  I_FirstInterface_Iface *self;
  self = FirstInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  self->void_func ();
  return NULL;
}


namespace Inner {
} // Inner
} // MandatoryNamespace

namespace OtherNamespace {
} // OtherNamespace

namespace InterfaceTests {
static FieldBuffer*
_dispatch__UIWidgetArea_simple_method (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 0) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  double rval = self->simple_method ();
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_single_arg (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 1) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double rval = self->single_arg (arg_n);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_single_arg2 (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 1) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double rval = self->single_arg2 (arg_n);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_two_args (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double arg_r = fbr.pop_double();
  double rval = self->two_args (arg_n, arg_r);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_two_args2 (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double arg_r = fbr.pop_double();
  double rval = self->two_args2 (arg_n, arg_r);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_multi_args (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 5) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double arg_r = fbr.pop_double();
  int arg_i = fbr.pop_int64();
  std::string arg_s = fbr.pop_string();
  double arg_y = fbr.pop_double();
  double rval = self->multi_args (arg_n, arg_r, arg_i, arg_s, arg_y);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_self_method (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  I_UIWidgetArea_Iface *arg_ba1 = UIWidgetArea (cpl, fbr).operator->();
  I_UIWidgetArea_Iface *arg_ba2 = UIWidgetArea (cpl, fbr).operator->();
  double rval = self->self_method (*arg_ba1, *arg_ba2);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_void_method (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 0) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  self->void_method ();
  return NULL;
}
static FieldBuffer*
_dispatch__UIWidgetArea_on_click2out (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 0) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  std::string rval = self->on_click2out ();
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_string (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__UIWidgetArea_on_click2in (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 1) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  std::string arg_command = fbr.pop_string();
  self->on_click2in (arg_command);
  return NULL;
}
struct _CLOSURE_UIWidgetArea_void_signal {
  typedef Plic::shared_ptr<_CLOSURE_UIWidgetArea_void_signal> SharedPtr;
  _CLOSURE_UIWidgetArea_void_signal (Plic::Coupler &cpl, uint64 h) : m_coupler (cpl), m_handler (h) {}
  static void
  handler (SharedPtr sp)
  {
    FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0);
    fb.add_type_hash (0x60000000257c7180ULL, 0xfac77ebb19c6ab72ULL, 0xb34dd194f62b665dULL, 0x0c329a03aebf472bULL); // event_id
    fb.add_int64 (sp->m_handler);
    sp->m_coupler.call_remote (&fb); // deletes fb
  }
  private: Plic::Coupler &m_coupler; uint64 m_handler;
};
static FieldBuffer*
_dispatch__UIWidgetArea_void_signal (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  uint64 con_id = fbr.pop_int64();
  uint64 cid = 0, handler_id = fbr.pop_int64();
  if (con_id) self->sig_void_signal.disconnect (con_id);
  if (handler_id) {
    _CLOSURE_UIWidgetArea_void_signal::SharedPtr sp (new _CLOSURE_UIWidgetArea_void_signal (cpl, handler_id));
    cid = self->sig_void_signal.connect (slot (sp->handler, sp)); }
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (cid);
  return &rb;
}struct _CLOSURE_UIWidgetArea_sample_signal {
  typedef Plic::shared_ptr<_CLOSURE_UIWidgetArea_sample_signal> SharedPtr;
  _CLOSURE_UIWidgetArea_sample_signal (Plic::Coupler &cpl, uint64 h) : m_coupler (cpl), m_handler (h) {}
  static double
  handler (I_UIWidgetArea_Iface &arg_ba1,
           int arg_someint,
           SharedPtr sp)
  {
    FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2);
    fb.add_type_hash (0x60000000a31a6e24ULL, 0xfe2020b5b9671356ULL, 0x11e8a29ccb87db27ULL, 0xcbe662a2887ef78fULL); // event_id
    fb.add_int64 (sp->m_handler);
    fb.add_object (UIWidgetArea (arg_ba1)._rpc_id());
    fb.add_int64 (arg_someint);
    sp->m_coupler.call_remote (&fb); // deletes fb
    return 0;
  }
  private: Plic::Coupler &m_coupler; uint64 m_handler;
};
static FieldBuffer*
_dispatch__UIWidgetArea_sample_signal (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_UIWidgetArea_Iface *self;
  self = UIWidgetArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  uint64 con_id = fbr.pop_int64();
  uint64 cid = 0, handler_id = fbr.pop_int64();
  if (con_id) self->sig_sample_signal.disconnect (con_id);
  if (handler_id) {
    _CLOSURE_UIWidgetArea_sample_signal::SharedPtr sp (new _CLOSURE_UIWidgetArea_sample_signal (cpl, handler_id));
    cid = self->sig_sample_signal.connect (slot (sp->handler, sp)); }
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (cid);
  return &rb;
}




static FieldBuffer*
_dispatch__QuickIface_simple_function (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 1) return false;
  I_QuickIface_Iface *self;
  self = QuickIface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_i = fbr.pop_int64();
  self->simple_function (arg_i);
  return NULL;
}

static FieldBuffer*
_dispatch__MethodTestInterface_method_with_void (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 0) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  self->method_with_void ();
  return NULL;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_bools (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  bool arg_input = fbr.pop_int64();
  bool arg_optval = fbr.pop_int64();
  bool rval = self->method_with_bools (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_ints (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  int arg_input = fbr.pop_int64();
  int arg_optval = fbr.pop_int64();
  int rval = self->method_with_ints (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_floats (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  double arg_input = fbr.pop_double();
  double arg_optval = fbr.pop_double();
  double rval = self->method_with_floats (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_double (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_string (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  std::string arg_input = fbr.pop_string();
  std::string arg_optval = fbr.pop_string();
  std::string rval = self->method_with_string (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_string (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_enum (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  QuickEnum arg_input = QuickEnum (fbr.pop_evalue());
  QuickEnum arg_optval = QuickEnum (fbr.pop_evalue());
  QuickEnum rval = self->method_with_enum (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_evalue (rval);
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_record (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  QuickRecord arg_input;
  if (!arg_input.proto_pop (cpl, fbr)) return false;
  QuickRecord arg_optval;
  if (!arg_optval.proto_pop (cpl, fbr)) return false;
  QuickRecord rval = self->method_with_record (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  if (!rval.proto_add (cpl, rb)) return false;
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_sequence (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  QuickSequence arg_input;
  if (!arg_input.proto_pop (cpl, fbr)) return false;
  QuickSequence arg_optval;
  if (!arg_optval.proto_pop (cpl, fbr)) return false;
  QuickSequence rval = self->method_with_sequence (arg_input, arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  if (!rval.proto_add (cpl, rb)) return false;
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_interface (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  I_GrandChild_Iface *arg_input = GrandChild (cpl, fbr).operator->();
  I_GrandChild_Iface *arg_optval = GrandChild (cpl, fbr).operator->();
  I_GrandChild_Iface *rval = self->method_with_interface (*arg_input, *arg_optval);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_object (GrandChild (rval)._rpc_id());
  return &rb;
}
static FieldBuffer*
_dispatch__MethodTestInterface_method_with_quickiface (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_MethodTestInterface_Iface *self;
  self = MethodTestInterface (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  I_QuickIface_Iface *arg_input = QuickIface (cpl, fbr).operator->();
  I_QuickIface_Iface *arg_iface0 = QuickIface (cpl, fbr).operator->();
  I_QuickIface_Iface *rval = self->method_with_quickiface (*arg_input, *arg_iface0);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_object (QuickIface (rval)._rpc_id());
  return &rb;
}

} // InterfaceTests

namespace RapicornPlicTest {
struct _CLOSURE_ButtonArea_check_activate {
  typedef Plic::shared_ptr<_CLOSURE_ButtonArea_check_activate> SharedPtr;
  _CLOSURE_ButtonArea_check_activate (Plic::Coupler &cpl, uint64 h) : m_coupler (cpl), m_handler (h) {}
  static bool
  handler (SharedPtr sp)
  {
    FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0);
    fb.add_type_hash (0x600000002002b254ULL, 0x237b6d00631699f2ULL, 0xaa4a2bf137175f39ULL, 0x16724232857b7195ULL); // event_id
    fb.add_int64 (sp->m_handler);
    sp->m_coupler.call_remote (&fb); // deletes fb
    return 0;
  }
  private: Plic::Coupler &m_coupler; uint64 m_handler;
};
static FieldBuffer*
_dispatch__ButtonArea_check_activate (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_ButtonArea_Iface *self;
  self = ButtonArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  uint64 con_id = fbr.pop_int64();
  uint64 cid = 0, handler_id = fbr.pop_int64();
  if (con_id) self->sig_check_activate.disconnect (con_id);
  if (handler_id) {
    _CLOSURE_ButtonArea_check_activate::SharedPtr sp (new _CLOSURE_ButtonArea_check_activate (cpl, handler_id));
    cid = self->sig_check_activate.connect (slot (sp->handler, sp)); }
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (cid);
  return &rb;
}struct _CLOSURE_ButtonArea_activate {
  typedef Plic::shared_ptr<_CLOSURE_ButtonArea_activate> SharedPtr;
  _CLOSURE_ButtonArea_activate (Plic::Coupler &cpl, uint64 h) : m_coupler (cpl), m_handler (h) {}
  static void
  handler (SharedPtr sp)
  {
    FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0);
    fb.add_type_hash (0x600000001eea842bULL, 0xdb7ee9164c9f8a60ULL, 0x1d0b0a314944036aULL, 0xfc73ff4aec88f8ffULL); // event_id
    fb.add_int64 (sp->m_handler);
    sp->m_coupler.call_remote (&fb); // deletes fb
  }
  private: Plic::Coupler &m_coupler; uint64 m_handler;
};
static FieldBuffer*
_dispatch__ButtonArea_activate (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 2) return false;
  I_ButtonArea_Iface *self;
  self = ButtonArea (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  uint64 con_id = fbr.pop_int64();
  uint64 cid = 0, handler_id = fbr.pop_int64();
  if (con_id) self->sig_activate.disconnect (con_id);
  if (handler_id) {
    _CLOSURE_ButtonArea_activate::SharedPtr sp (new _CLOSURE_ButtonArea_activate (cpl, handler_id));
    cid = self->sig_activate.connect (slot (sp->handler, sp)); }
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (cid);
  return &rb;
}
static FieldBuffer*
_dispatch__PureMethods_pure_method (Coupler &cpl)
{
  FieldBufferReader &fbr = cpl.reader;
  fbr.skip4(); // TypeHash
  if (fbr.remaining() != 1 + 1) return false;
  I_PureMethods_Iface *self;
  self = PureMethods (cpl, fbr).operator->();
  PLIC_CHECK (self, "self must be non-NULL");
  double arg_f = fbr.pop_double();
  int rval = self->pure_method (arg_f);
  FieldBuffer &rb  = *FieldBuffer::new_result();
  rb.add_int64 (rval);
  return &rb;
}

static const Plic::DispatcherEntry _dispatcher_entries[] = {
  { { 0x200000001dfd7256ULL, 0xdec25cd632ee83caULL, 0x06b4549d6fedf832ULL, 0x9a1e54caedf1db9bULL }, MandatoryNamespace::_dispatch__FirstInterface_void_func, },
  { { 0x30000000fd8072dfULL, 0x591f7cce6e74034aULL, 0x419df82c635c78d1ULL, 0x1e2fc6cf88d761faULL }, InterfaceTests::_dispatch__UIWidgetArea_simple_method, },
  { { 0x3000000075ce4c8bULL, 0x1a40a9c8bd145a39ULL, 0x37b83f96f1d3168bULL, 0x3f57c461185c3752ULL }, InterfaceTests::_dispatch__UIWidgetArea_single_arg, },
  { { 0x30000000179c202fULL, 0xa554850da029f547ULL, 0xe2591a43b7c79a61ULL, 0xe19a6853f11b1b99ULL }, InterfaceTests::_dispatch__UIWidgetArea_single_arg2, },
  { { 0x300000006a210506ULL, 0xa76bb7cd90d84838ULL, 0x8000823cfb905b8cULL, 0x39826abcf9caba00ULL }, InterfaceTests::_dispatch__UIWidgetArea_two_args, },
  { { 0x30000000ac125ff1ULL, 0xac6be3d45e25ada6ULL, 0x040efc8ab508b1d3ULL, 0x15e48df9e26c0caaULL }, InterfaceTests::_dispatch__UIWidgetArea_two_args2, },
  { { 0x300000000361838dULL, 0xc298afde820561a5ULL, 0x8fe8c83788c4bb38ULL, 0xb3179ae3d510e7b2ULL }, InterfaceTests::_dispatch__UIWidgetArea_multi_args, },
  { { 0x30000000b9d64621ULL, 0x3a96692d3e1ef7dbULL, 0xdced671b586f7aa7ULL, 0x1d3870f7ed0285e5ULL }, InterfaceTests::_dispatch__UIWidgetArea_self_method, },
  { { 0x200000000ff38422ULL, 0x440e8e84942acf8eULL, 0x0c4945e5794d8356ULL, 0x2e2e61471f31bfbfULL }, InterfaceTests::_dispatch__UIWidgetArea_void_method, },
  { { 0x300000004b649644ULL, 0x8a9b2140ad7fc83dULL, 0x10b67ed382387b14ULL, 0xe7b6cc0714a17f30ULL }, InterfaceTests::_dispatch__UIWidgetArea_on_click2out, },
  { { 0x20000000f671167cULL, 0xdfc42ce42beb58f7ULL, 0x15afc969aae521d6ULL, 0xadbec8ab9522f6f8ULL }, InterfaceTests::_dispatch__UIWidgetArea_on_click2in, },
  { { 0x50000000257c7180ULL, 0xfac77ebb19c6ab72ULL, 0xb34dd194f62b665dULL, 0x0c329a03aebf472bULL }, InterfaceTests::_dispatch__UIWidgetArea_void_signal, },
  { { 0x50000000a31a6e24ULL, 0xfe2020b5b9671356ULL, 0x11e8a29ccb87db27ULL, 0xcbe662a2887ef78fULL }, InterfaceTests::_dispatch__UIWidgetArea_sample_signal, },
  { { 0x20000000be855008ULL, 0x6bf2269ff6939544ULL, 0x6a0846e9f5a62da8ULL, 0x59c8e2a4e4629e80ULL }, InterfaceTests::_dispatch__QuickIface_simple_function, },
  { { 0x20000000a426153aULL, 0x0a2f5758267a2651ULL, 0xd9bff16cf6755833ULL, 0x8959ddaf9e5b8a44ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_void, },
  { { 0x300000003917295eULL, 0x76cb59d18d695319ULL, 0x0fe6acdaa38d48dfULL, 0xa26ca0854c18e565ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_bools, },
  { { 0x3000000015f688dcULL, 0x4db9c06f4357aa4eULL, 0x902ee7647790de7cULL, 0x18aa217be2c83cbaULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_ints, },
  { { 0x30000000bfc2d47bULL, 0x70b13d1cdf2c9488ULL, 0x77c2ea3ad44c2625ULL, 0xd6093e05e70ea643ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_floats, },
  { { 0x300000002732b2feULL, 0x6dfd49db44b97641ULL, 0x010dcacac6eb8ed7ULL, 0xa79383e035fc64e1ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_string, },
  { { 0x300000003f676d86ULL, 0x903cbdda7f9bf8e6ULL, 0xb56b87771cbd4b69ULL, 0x5723ee9d219ddda5ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_enum, },
  { { 0x3000000004a0b014ULL, 0x7eef09335a6cd6afULL, 0xd80237b6e1df12f6ULL, 0x70618be70ed6e858ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_record, },
  { { 0x30000000e92eb1f1ULL, 0xbc6d5e758278964aULL, 0xe88f958f88ca346cULL, 0xf29e446630c57f23ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_sequence, },
  { { 0x3000000001640ae0ULL, 0xf5403244c684c076ULL, 0x208c721dda088467ULL, 0x425f3425b0dcfad4ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_interface, },
  { { 0x3000000082dc142eULL, 0x7d16cadebfca9b39ULL, 0x168d05eb3cf56adbULL, 0x31e28c41cf8bb4f9ULL }, InterfaceTests::_dispatch__MethodTestInterface_method_with_quickiface, },
  { { 0x500000002002b254ULL, 0x237b6d00631699f2ULL, 0xaa4a2bf137175f39ULL, 0x16724232857b7195ULL }, RapicornPlicTest::_dispatch__ButtonArea_check_activate, },
  { { 0x500000001eea842bULL, 0xdb7ee9164c9f8a60ULL, 0x1d0b0a314944036aULL, 0xfc73ff4aec88f8ffULL }, RapicornPlicTest::_dispatch__ButtonArea_activate, },
  { { 0x30000000e96382b8ULL, 0x8c16fe069c1d6b1eULL, 0x002e82b90c7db308ULL, 0x9c8a9e5a95b6ea99ULL }, RapicornPlicTest::_dispatch__PureMethods_pure_method, },
};
static Plic::DispatcherRegistry _dispatcher_registry (_dispatcher_entries);

} // RapicornPlicTest

