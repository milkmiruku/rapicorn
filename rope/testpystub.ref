### === Generated by Rapicorn-PyStub === ###

import __testpass as _CPY
class _BaseRecord_:
  def __init__ (self, **entries):
    self.__dict__.update (entries)
class _BaseClass_ (object):
  class _AidaID_:
    def __init__ (self, _aidaid):
      assert isinstance (_aidaid, (int, long))
      self.id = _aidaid
  def __init__ (self, _aida_id):
    assert isinstance (_aida_id, _BaseClass_._AidaID_)
    self.__dict__['__aida_pyobject__'] = _aida_id.id

class FirstInterface (_BaseClass_):
  def __init__ (self, _aida_id):
    super (FirstInterface, self).__init__ (_aida_id)
  def void_func (self): # one way
    ___ret = _CPY._AIDA_pycall__MandatoryNamespace__FirstInterface__void_func_void (self)
    return ___ret
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class XFooRecord (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'single_bool' : 0,  'single_num' : 0,  'num64' : 0,  'single_float' : 0,  'single_string' : '',  'sibling1' : 0,  'sibling2' : 0,  'multi1' : 0,  'multi2' : 0,  'multi3' : 0,  'multi4' : 0,  'enum_field' : 0,  'iface1' : None,  'iface2' : None,  'iface3' : None,  'any1' : (),  'any2' : (),  'any3' : (), }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = XFooRecord()
    if hasattr (args, "__iter__") and len (args) == 18:
      self.single_bool = args[0]
      #  self.single_bool.vint64 = args[0]
      self.single_num = args[1]
      #  self.single_num.vint64 = args[1]
      self.num64 = args[2]
      #  self.num64.vint64 = args[2]
      self.single_float = args[3]
      #  self.single_float.vdouble = args[3]
      self.single_string = args[4]
      #  self.single_string.vstring = args[4]
      self.sibling1 = args[5]
      #  self.sibling1.vint64 = args[5]
      self.sibling2 = args[6]
      #  self.sibling2.vint64 = args[6]
      self.multi1 = args[7]
      #  self.multi1.vint64 = args[7]
      self.multi2 = args[8]
      #  self.multi2.vint64 = args[8]
      self.multi3 = args[9]
      #  self.multi3.vint64 = args[9]
      self.multi4 = args[10]
      #  self.multi4.vint64 = args[10]
      self.enum_field = args[11]
      #  self.enum_field.vint64 = args[11]
      self.iface1 = args[12]
      #  self.iface1.vstring (Instance2StringCast (args[12]))
      self.iface2 = args[13]
      #  self.iface2.vstring (Instance2StringCast (args[13]))
      self.iface3 = args[14]
      #  self.iface3.vstring (Instance2StringCast (args[14]))
      self.any1 = args[15]
      #  # FIXME: support Aida::Any with Any.to_proto (self.any1.vany, args[15])
      self.any2 = args[16]
      #  # FIXME: support Aida::Any with Any.to_proto (self.any2.vany, args[16])
      self.any3 = args[17]
      #  # FIXME: support Aida::Any with Any.to_proto (self.any3.vany, args[17])
    elif isinstance (args, dict):
      self.single_bool = args["single_bool"]
      self.single_num = args["single_num"]
      self.num64 = args["num64"]
      self.single_float = args["single_float"]
      self.single_string = args["single_string"]
      self.sibling1 = args["sibling1"]
      self.sibling2 = args["sibling2"]
      self.multi1 = args["multi1"]
      self.multi2 = args["multi2"]
      self.multi3 = args["multi3"]
      self.multi4 = args["multi4"]
      self.enum_field = args["enum_field"]
      self.iface1 = args["iface1"]
      self.iface2 = args["iface2"]
      self.iface3 = args["iface3"]
      self.any1 = args["any1"]
      self.any2 = args["any2"]
      self.any3 = args["any3"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.single_bool
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.single_num
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.num64
    _aida_field = _aida_rp.fields.add()
    _aida_field.vdouble = self.single_float
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring = self.single_string
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.sibling1
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.sibling2
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi1
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi2
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi3
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi4
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.enum_field
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring (Instance2StringCast (self.iface1))
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring (Instance2StringCast (self.iface2))
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring (Instance2StringCast (self.iface3))
    _aida_field = _aida_rp.fields.add()
    # FIXME: support Aida::Any with Any.to_proto (_aida_field.vany, self.any1)
    _aida_field = _aida_rp.fields.add()
    # FIXME: support Aida::Any with Any.to_proto (_aida_field.vany, self.any2)
    _aida_field = _aida_rp.fields.add()
    # FIXME: support Aida::Any with Any.to_proto (_aida_field.vany, self.any3)

class NestedTypesRec (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'rec' : None,  'seq' : (), }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = NestedTypesRec()
    if hasattr (args, "__iter__") and len (args) == 2:
      self.rec = args[0]
      #  XFooRecord.to_proto (self.rec.vrec, args[0])
      self.seq = args[1]
      #  XFooSequence.to_proto (self.seq.vseq, args[1])
    elif isinstance (args, dict):
      self.rec = args["rec"]
      self.seq = args["seq"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    XFooRecord.to_proto (_aida_field.vrec, self.rec)
    _aida_field = _aida_rp.fields.add()
    XFooSequence.to_proto (_aida_field.vseq, self.seq)

class AliasRecord (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'single_bool' : 0,  'single_num' : 0,  'num64' : 0,  'single_float' : 0,  'single_string' : '',  'sibling1' : 0,  'sibling2' : 0,  'multi1' : 0,  'multi2' : 0,  'multi3' : 0,  'multi4' : 0,  'enum_field' : 0,  'iface1' : None,  'iface2' : None,  'iface3' : None,  'any1' : (),  'any2' : (),  'any3' : (), }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = AliasRecord()
    if hasattr (args, "__iter__") and len (args) == 18:
      self.single_bool = args[0]
      #  self.single_bool.vint64 = args[0]
      self.single_num = args[1]
      #  self.single_num.vint64 = args[1]
      self.num64 = args[2]
      #  self.num64.vint64 = args[2]
      self.single_float = args[3]
      #  self.single_float.vdouble = args[3]
      self.single_string = args[4]
      #  self.single_string.vstring = args[4]
      self.sibling1 = args[5]
      #  self.sibling1.vint64 = args[5]
      self.sibling2 = args[6]
      #  self.sibling2.vint64 = args[6]
      self.multi1 = args[7]
      #  self.multi1.vint64 = args[7]
      self.multi2 = args[8]
      #  self.multi2.vint64 = args[8]
      self.multi3 = args[9]
      #  self.multi3.vint64 = args[9]
      self.multi4 = args[10]
      #  self.multi4.vint64 = args[10]
      self.enum_field = args[11]
      #  self.enum_field.vint64 = args[11]
      self.iface1 = args[12]
      #  self.iface1.vstring (Instance2StringCast (args[12]))
      self.iface2 = args[13]
      #  self.iface2.vstring (Instance2StringCast (args[13]))
      self.iface3 = args[14]
      #  self.iface3.vstring (Instance2StringCast (args[14]))
      self.any1 = args[15]
      #  # FIXME: support Aida::Any with Any.to_proto (self.any1.vany, args[15])
      self.any2 = args[16]
      #  # FIXME: support Aida::Any with Any.to_proto (self.any2.vany, args[16])
      self.any3 = args[17]
      #  # FIXME: support Aida::Any with Any.to_proto (self.any3.vany, args[17])
    elif isinstance (args, dict):
      self.single_bool = args["single_bool"]
      self.single_num = args["single_num"]
      self.num64 = args["num64"]
      self.single_float = args["single_float"]
      self.single_string = args["single_string"]
      self.sibling1 = args["sibling1"]
      self.sibling2 = args["sibling2"]
      self.multi1 = args["multi1"]
      self.multi2 = args["multi2"]
      self.multi3 = args["multi3"]
      self.multi4 = args["multi4"]
      self.enum_field = args["enum_field"]
      self.iface1 = args["iface1"]
      self.iface2 = args["iface2"]
      self.iface3 = args["iface3"]
      self.any1 = args["any1"]
      self.any2 = args["any2"]
      self.any3 = args["any3"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.single_bool
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.single_num
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.num64
    _aida_field = _aida_rp.fields.add()
    _aida_field.vdouble = self.single_float
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring = self.single_string
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.sibling1
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.sibling2
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi1
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi2
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi3
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.multi4
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.enum_field
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring (Instance2StringCast (self.iface1))
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring (Instance2StringCast (self.iface2))
    _aida_field = _aida_rp.fields.add()
    _aida_field.vstring (Instance2StringCast (self.iface3))
    _aida_field = _aida_rp.fields.add()
    # FIXME: support Aida::Any with Any.to_proto (_aida_field.vany, self.any1)
    _aida_field = _aida_rp.fields.add()
    # FIXME: support Aida::Any with Any.to_proto (_aida_field.vany, self.any2)
    _aida_field = _aida_rp.fields.add()
    # FIXME: support Aida::Any with Any.to_proto (_aida_field.vany, self.any3)

class NewRecord (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'i' : 0,  'enum1' : 0,  'xfs' : (),  'ntr' : None, }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = NewRecord()
    if hasattr (args, "__iter__") and len (args) == 4:
      self.i = args[0]
      #  self.i.vint64 = args[0]
      self.enum1 = args[1]
      #  self.enum1.vint64 = args[1]
      self.xfs = args[2]
      #  XFooSequence.to_proto (self.xfs.vseq, args[2])
      self.ntr = args[3]
      #  NestedTypesRec.to_proto (self.ntr.vrec, args[3])
    elif isinstance (args, dict):
      self.i = args["i"]
      self.enum1 = args["enum1"]
      self.xfs = args["xfs"]
      self.ntr = args["ntr"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.i
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.enum1
    _aida_field = _aida_rp.fields.add()
    XFooSequence.to_proto (_aida_field.vseq, self.xfs)
    _aida_field = _aida_rp.fields.add()
    NestedTypesRec.to_proto (_aida_field.vrec, self.ntr)

class InnerRecord (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'x' : 0,  'y' : 0,  'rec' : None, }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = InnerRecord()
    if hasattr (args, "__iter__") and len (args) == 3:
      self.x = args[0]
      #  self.x.vint64 = args[0]
      self.y = args[1]
      #  self.y.vint64 = args[1]
      self.rec = args[2]
      #  NewRecord.to_proto (self.rec.vrec, args[2])
    elif isinstance (args, dict):
      self.x = args["x"]
      self.y = args["y"]
      self.rec = args["rec"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.x
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.y
    _aida_field = _aida_rp.fields.add()
    NewRecord.to_proto (_aida_field.vrec, self.rec)

class Refer2Inner (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'r' : None, }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = Refer2Inner()
    if hasattr (args, "__iter__") and len (args) == 1:
      self.r = args[0]
      #  InnerRecord.to_proto (self.r.vrec, args[0])
    elif isinstance (args, dict):
      self.r = args["r"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    InnerRecord.to_proto (_aida_field.vrec, self.r)

class SomeRecord (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'r1' : None,  'r2' : None,  'r3' : None,  'r4' : None, }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = SomeRecord()
    if hasattr (args, "__iter__") and len (args) == 4:
      self.r1 = args[0]
      #  NewRecord.to_proto (self.r1.vrec, args[0])
      self.r2 = args[1]
      #  NewRecord.to_proto (self.r2.vrec, args[1])
      self.r3 = args[2]
      #  InnerRecord.to_proto (self.r3.vrec, args[2])
      self.r4 = args[3]
      #  InnerRecord.to_proto (self.r4.vrec, args[3])
    elif isinstance (args, dict):
      self.r1 = args["r1"]
      self.r2 = args["r2"]
      self.r3 = args["r3"]
      self.r4 = args["r4"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    NewRecord.to_proto (_aida_field.vrec, self.r1)
    _aida_field = _aida_rp.fields.add()
    NewRecord.to_proto (_aida_field.vrec, self.r2)
    _aida_field = _aida_rp.fields.add()
    InnerRecord.to_proto (_aida_field.vrec, self.r3)
    _aida_field = _aida_rp.fields.add()
    InnerRecord.to_proto (_aida_field.vrec, self.r4)

class UIWidgetArea (_BaseClass_):
  def __init__ (self, _aida_id):
    super (UIWidgetArea, self).__init__ (_aida_id)
  def simple_method (self): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__simple_method_float64 (self)
    return ___ret
  def single_arg (self, n): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__single_arg_float64_int32 (self, n)
    return ___ret
  def single_arg2 (self, n = 5): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__single_arg2_float64_int32 (self, n)
    return ___ret
  def two_args (self, n, r): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__two_args_float64_int32_float64 (self, n, r)
    return ___ret
  def two_args2 (self, n = 6, r = 7.7): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__two_args2_float64_int32_float64 (self, n, r)
    return ___ret
  def multi_args (self, b, n, r, i, s = "String ding", y = 5): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__multi_args_float64_bool_int64_float64_int32_String_float64 (self, b, n, r, i, s, y)
    return ___ret
  def self_method (self, ba1, ba2): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__self_method_float64_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea (self, ba1, ba2)
    return ___ret
  def void_method (self): # one way
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__void_method_void (self)
    return ___ret
  def on_click2out (self): # String
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__on_click2out_String (self)
    return ___ret
  def on_click2in (self, command): # one way
    ___ret = _CPY._AIDA_pycall__InterfaceTests__UIWidgetArea__on_click2in_void_String (self, command)
    return ___ret
  def sig_void_signal_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__UIWidgetArea__void_signal_void (self, func, 0)
  def sig_void_signal_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__UIWidgetArea__void_signal_void (self, None, connection_id)
  def sig_sample_signal_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__UIWidgetArea__sample_signal_float64_InterfaceTests__UIWidgetArea_int32 (self, func, 0)
  def sig_sample_signal_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__UIWidgetArea__sample_signal_float64_InterfaceTests__UIWidgetArea_int32 (self, None, connection_id)
  def __getattr__ (self, name):
    if name == "dummy":
      return _CPY._AIDA_pygetter__f67db704b9d460d6d4950feab697e61e (self) # UIWidgetArea.dummy
    if name == "on_click":
      return _CPY._AIDA_pygetter__58ba68f6b64584c9a7d2686edb40f27a (self) # UIWidgetArea.on_click
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    if name == "dummy":
      return _CPY._AIDA_pysetter__7aaf2f96f30428293d0391e5b72e7ba5 (self, value) # UIWidgetArea.dummy
    if name == "on_click":
      return _CPY._AIDA_pysetter__f0025ec0fa66e3e2880c10e8e6b57cfb (self, value) # UIWidgetArea.on_click
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class Parent (_BaseClass_):
  def __init__ (self, _aida_id):
    super (Parent, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class Child (Parent):
  def __init__ (self, _aida_id):
    super (Child, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class Descendant (Child):
  def __init__ (self, _aida_id):
    super (Descendant, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class GrandChild (Descendant):
  def __init__ (self, _aida_id):
    super (GrandChild, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class QuickRecord (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'int1' : 0,  'int2' : 0, }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = QuickRecord()
    if hasattr (args, "__iter__") and len (args) == 2:
      self.int1 = args[0]
      #  self.int1.vint64 = args[0]
      self.int2 = args[1]
      #  self.int2.vint64 = args[1]
    elif isinstance (args, dict):
      self.int1 = args["int1"]
      self.int2 = args["int2"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.int1
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.int2

class QuickIface (_BaseClass_):
  def __init__ (self, _aida_id):
    super (QuickIface, self).__init__ (_aida_id)
  def simple_function (self, i = 9): # one way
    ___ret = _CPY._AIDA_pycall__InterfaceTests__QuickIface__simple_function_void_int32 (self, i)
    return ___ret
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class MethodTestInterface (_BaseClass_):
  def __init__ (self, _aida_id):
    super (MethodTestInterface, self).__init__ (_aida_id)
  def method_with_void (self): # one way
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_void_void (self)
    return ___ret
  def method_with_bools (self, input, optval = 0): # bool
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool (self, input, optval)
    return ___ret
  def method_with_ints32 (self, input, optval = -2): # int32
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_ints32_int32_int32_int32 (self, input, optval)
    return ___ret
  def method_with_ints64 (self, input, optval = 576460752303423488): # int64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_ints64_int64_int64_int64 (self, input, optval)
    return ___ret
  def method_with_floats (self, input, optval = 309.9): # float64
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_floats_float64_float64_float64 (self, input, optval)
    return ___ret
  def method_with_string (self, input, optval = "default"): # String
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_string_String_String_String (self, input, optval)
    return ___ret
  def method_with_enum (self, input, optval = 0): # QuickEnum
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum (self, input, optval)
    return ___ret
  def method_with_record (self, input, optval = None): # QuickRecord
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord (self, input, optval)
    return ___ret
  def method_with_sequence (self, input, optval = ()): # QuickSequence
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence (self, input, optval)
    return ___ret
  def method_with_interface (self, input, optval = None): # GrandChild
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild (self, input, optval)
    return ___ret
  def method_with_anys (self, input, optval): # Any
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_anys_Any_Any_Any (self, input, optval)
    return ___ret
  def method_with_quickiface (self, input, iface0 = None): # QuickIface
    ___ret = _CPY._AIDA_pycall__InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface (self, input, iface0)
    return ___ret
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class SignalTestInterface (_BaseClass_):
  def __init__ (self, _aida_id):
    super (SignalTestInterface, self).__init__ (_aida_id)
  def sig_void_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__void_result_void (self, func, 0)
  def sig_void_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__void_result_void (self, None, connection_id)
  def sig_bool_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__bool_result_bool (self, func, 0)
  def sig_bool_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__bool_result_bool (self, None, connection_id)
  def sig_int32_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int32_result_int32 (self, func, 0)
  def sig_int32_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int32_result_int32 (self, None, connection_id)
  def sig_int64_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int64_result_int64 (self, func, 0)
  def sig_int64_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int64_result_int64 (self, None, connection_id)
  def sig_float64_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__float64_result_float64 (self, func, 0)
  def sig_float64_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__float64_result_float64 (self, None, connection_id)
  def sig_string_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__string_result_String (self, func, 0)
  def sig_string_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__string_result_String (self, None, connection_id)
  def sig_enum_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum (self, func, 0)
  def sig_enum_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum (self, None, connection_id)
  def sig_record_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord (self, func, 0)
  def sig_record_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord (self, None, connection_id)
  def sig_sequence_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence (self, func, 0)
  def sig_sequence_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence (self, None, connection_id)
  def sig_interface_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild (self, func, 0)
  def sig_interface_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild (self, None, connection_id)
  def sig_any_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__any_result_Any (self, func, 0)
  def sig_any_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__any_result_Any (self, None, connection_id)
  def sig_self_result_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface (self, func, 0)
  def sig_self_result_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface (self, None, connection_id)
  def sig_void_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__void_arg_void (self, func, 0)
  def sig_void_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__void_arg_void (self, None, connection_id)
  def sig_bool_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__bool_arg_void_bool (self, func, 0)
  def sig_bool_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__bool_arg_void_bool (self, None, connection_id)
  def sig_int32_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int32_arg_void_int32 (self, func, 0)
  def sig_int32_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int32_arg_void_int32 (self, None, connection_id)
  def sig_int64_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int64_arg_void_int64 (self, func, 0)
  def sig_int64_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__int64_arg_void_int64 (self, None, connection_id)
  def sig_float64_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__float64_arg_void_float64 (self, func, 0)
  def sig_float64_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__float64_arg_void_float64 (self, None, connection_id)
  def sig_string_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__string_arg_void_String (self, func, 0)
  def sig_string_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__string_arg_void_String (self, None, connection_id)
  def sig_enum_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum (self, func, 0)
  def sig_enum_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum (self, None, connection_id)
  def sig_record_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord (self, func, 0)
  def sig_record_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord (self, None, connection_id)
  def sig_sequence_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence (self, func, 0)
  def sig_sequence_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence (self, None, connection_id)
  def sig_interface_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild (self, func, 0)
  def sig_interface_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild (self, None, connection_id)
  def sig_any_arg_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__any_arg_void_Any (self, func, 0)
  def sig_any_arg_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__any_arg_void_Any (self, None, connection_id)
  def sig_self_args_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface (self, func, 0)
  def sig_self_args_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface (self, None, connection_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class ChildInheritingSignals (SignalTestInterface):
  def __init__ (self, _aida_id):
    super (ChildInheritingSignals, self).__init__ (_aida_id)
  def sig_child_signal_connect (self, func):
    return _CPY._AIDA_pymarshal__InterfaceTests__ChildInheritingSignals__child_signal_void_InterfaceTests__ChildInheritingSignals_InterfaceTests__SignalTestInterface_Any_int32_InterfaceTests__QuickRecord_InterfaceTests__QuickSequence (self, func, 0)
  def sig_child_signal_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__InterfaceTests__ChildInheritingSignals__child_signal_void_InterfaceTests__ChildInheritingSignals_InterfaceTests__SignalTestInterface_Any_int32_InterfaceTests__QuickRecord_InterfaceTests__QuickSequence (self, None, connection_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class AnotherChild (SignalTestInterface):
  def __init__ (self, _aida_id):
    super (AnotherChild, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class PropertyTester (_BaseClass_):
  def __init__ (self, _aida_id):
    super (PropertyTester, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    if name == "bool_prop":
      return _CPY._AIDA_pygetter__14469c03fdfc61e43bb8a3b5d9832788 (self) # PropertyTester.bool_prop
    if name == "int32_prop":
      return _CPY._AIDA_pygetter__8a2f1538f2b852fb7d3e8ea6f069a1c0 (self) # PropertyTester.int32_prop
    if name == "int64_prop":
      return _CPY._AIDA_pygetter__c9bb6114fc5c90de400dff0f59e66f63 (self) # PropertyTester.int64_prop
    if name == "float64_prop":
      return _CPY._AIDA_pygetter__b3d53f6a66ba171ec9e2fe1ad9d2d2ab (self) # PropertyTester.float64_prop
    if name == "string_prop":
      return _CPY._AIDA_pygetter__d11acce29fa83acfb251b5fc0f737558 (self) # PropertyTester.string_prop
    if name == "enum_prop":
      return _CPY._AIDA_pygetter__42f93106aeb5af11dc4094dc01da9f81 (self) # PropertyTester.enum_prop
    if name == "record_prop":
      return _CPY._AIDA_pygetter__b6ab96740d7834eee7873bec722bb0c8 (self) # PropertyTester.record_prop
    if name == "sequence_prop":
      return _CPY._AIDA_pygetter__7f96e6ff442ecdd5db054c03831fd75b (self) # PropertyTester.sequence_prop
    if name == "interface_prop":
      return _CPY._AIDA_pygetter__f3cef8a00677d9318733ca529b58ea4a (self) # PropertyTester.interface_prop
    if name == "self_prop":
      return _CPY._AIDA_pygetter__dd2a04f6c2fc300568868b01ea78948f (self) # PropertyTester.self_prop
    if name == "any_prop":
      return _CPY._AIDA_pygetter__b54c6ac2d1c8f9321c8ea2813f2c268e (self) # PropertyTester.any_prop
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    if name == "bool_prop":
      return _CPY._AIDA_pysetter__a88d7a16adc7ad4333e7a32598f08880 (self, value) # PropertyTester.bool_prop
    if name == "int32_prop":
      return _CPY._AIDA_pysetter__7b7b3182160469e4bd3c44c3a57484eb (self, value) # PropertyTester.int32_prop
    if name == "int64_prop":
      return _CPY._AIDA_pysetter__b33bf89d2259a1db0154420aebe9a16c (self, value) # PropertyTester.int64_prop
    if name == "float64_prop":
      return _CPY._AIDA_pysetter__f1df5bd296ac78e2bb263cff89927093 (self, value) # PropertyTester.float64_prop
    if name == "string_prop":
      return _CPY._AIDA_pysetter__fadb1eed1d8d358a17cd2ca684080698 (self, value) # PropertyTester.string_prop
    if name == "enum_prop":
      return _CPY._AIDA_pysetter__99206fff699c82d61dcbc77498569411 (self, value) # PropertyTester.enum_prop
    if name == "record_prop":
      return _CPY._AIDA_pysetter__55aaf8cee9dd7a4683d8416416740bf0 (self, value) # PropertyTester.record_prop
    if name == "sequence_prop":
      return _CPY._AIDA_pysetter__f86952a034b8bc843be169a3f0a9a07d (self, value) # PropertyTester.sequence_prop
    if name == "interface_prop":
      return _CPY._AIDA_pysetter__bf62779e2a11aebb95547f4e29ca3814 (self, value) # PropertyTester.interface_prop
    if name == "self_prop":
      return _CPY._AIDA_pysetter__1a1ee3ab20ab3c2feeaf17826dba2891 (self, value) # PropertyTester.self_prop
    if name == "any_prop":
      return _CPY._AIDA_pysetter__e0c7d397e652f3f7bbdf7826e88f4f42 (self, value) # PropertyTester.any_prop
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class ButtonArea (_BaseClass_):
  def __init__ (self, _aida_id):
    super (ButtonArea, self).__init__ (_aida_id)
  def sig_check_activate_connect (self, func):
    return _CPY._AIDA_pymarshal__RapicornAidaTest__ButtonArea__check_activate_bool (self, func, 0)
  def sig_check_activate_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__RapicornAidaTest__ButtonArea__check_activate_bool (self, None, connection_id)
  def sig_activate_connect (self, func):
    return _CPY._AIDA_pymarshal__RapicornAidaTest__ButtonArea__activate_void (self, func, 0)
  def sig_activate_disconnect (self, connection_id):
    return _CPY._AIDA_pymarshal__RapicornAidaTest__ButtonArea__activate_void (self, None, connection_id)
  def __getattr__ (self, name):
    if name == "on_click":
      return _CPY._AIDA_pygetter__199859aecc756e97a744332174ed27f4 (self) # ButtonArea.on_click
    if name == "on_click2":
      return _CPY._AIDA_pygetter__1b448d91990181da9751c08ae956c729 (self) # ButtonArea.on_click2
    if name == "on_click3":
      return _CPY._AIDA_pygetter__5176fbf25dcf50f44d7ae8b51fb816b5 (self) # ButtonArea.on_click3
    if name == "click_type":
      return _CPY._AIDA_pygetter__b6ab79b43e1f0df9aa0f1ec5c39b704a (self) # ButtonArea.click_type
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    if name == "on_click":
      return _CPY._AIDA_pysetter__db3a24116c6539852a0576faff45b4b2 (self, value) # ButtonArea.on_click
    if name == "on_click2":
      return _CPY._AIDA_pysetter__fc93898ba4104662c918694fe5c2bfef (self, value) # ButtonArea.on_click2
    if name == "on_click3":
      return _CPY._AIDA_pysetter__1c1990dca0fde97c6cc2c7cc49d811f8 (self, value) # ButtonArea.on_click3
    if name == "click_type":
      return _CPY._AIDA_pysetter__1f5a6d031cb7e1042d4a207f0842bec8 (self, value) # ButtonArea.click_type
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class PureMethods (_BaseClass_):
  def __init__ (self, _aida_id):
    super (PureMethods, self).__init__ (_aida_id)
  def pure_method (self, f): # int32
    ___ret = _CPY._AIDA_pycall__RapicornAidaTest__PureMethods__pure_method_int32_float64 (self, f)
    return ___ret
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class NameTests (_BaseClass_):
  def __init__ (self, _aida_id):
    super (NameTests, self).__init__ (_aida_id)
  def args_from_other_namespace (self, qr, qe, sr): # one way
    ___ret = _CPY._AIDA_pycall__Other__NameTests__args_from_other_namespace_void_InterfaceTests__QuickRecord_RapicornAidaTest__ClickType_OtherNamespace__SomeRecord (self, qr, qe, sr)
    return ___ret
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class Compressor (_BaseClass_):
  def __init__ (self, _aida_id):
    super (Compressor, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    if name == "threshold":
      return _CPY._AIDA_pygetter__dea15f2de1c3d8e3e3fc9febf31cdc20 (self) # Compressor.threshold
    if name == "ratio":
      return _CPY._AIDA_pygetter__c61a8d739c7b963bca1ad4eeab1aa56e (self) # Compressor.ratio
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    if name == "threshold":
      return _CPY._AIDA_pysetter__f40a3fd3d07b3d0bbae97c41e3d6a92b (self, value) # Compressor.threshold
    if name == "ratio":
      return _CPY._AIDA_pysetter__302f0b5b99a2a6c8c8b771894ecd9315 (self, value) # Compressor.ratio
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

class RecordForGroups (_BaseRecord_):
  def __init__ (self, **entries):
    defaults = { 'i' : 0,  'ratio' : 0,  'ordinary_bool' : 0,  'threshold1' : 0,  'threshold2' : 0, }
    self.__dict__.update (defaults)
    _BaseRecord_.__init__ (self, **entries)
  @staticmethod
  def create (args):
    self = RecordForGroups()
    if hasattr (args, "__iter__") and len (args) == 5:
      self.i = args[0]
      #  self.i.vint64 = args[0]
      self.ratio = args[1]
      #  self.ratio.vdouble = args[1]
      self.ordinary_bool = args[2]
      #  self.ordinary_bool.vint64 = args[2]
      self.threshold1 = args[3]
      #  self.threshold1.vdouble = args[3]
      self.threshold2 = args[4]
      #  self.threshold2.vdouble = args[4]
    elif isinstance (args, dict):
      self.i = args["i"]
      self.ratio = args["ratio"]
      self.ordinary_bool = args["ordinary_bool"]
      self.threshold1 = args["threshold1"]
      self.threshold2 = args["threshold2"]
    else: raise RuntimeError ("invalid or missing record initializers")
    return self
  @staticmethod
  def to_proto (self, _aida_rec):
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.i
    _aida_field = _aida_rp.fields.add()
    _aida_field.vdouble = self.ratio
    _aida_field = _aida_rp.fields.add()
    _aida_field.vint64 = self.ordinary_bool
    _aida_field = _aida_rp.fields.add()
    _aida_field.vdouble = self.threshold1
    _aida_field = _aida_rp.fields.add()
    _aida_field.vdouble = self.threshold2

class SoundModule (_BaseClass_):
  def __init__ (self, _aida_id):
    super (SoundModule, self).__init__ (_aida_id)
  def __getattr__ (self, name):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))
  def __setattr__ (self, name, value):
    raise AttributeError ("class %s has no attribute '%s'" % (self.__class__.__name__, name))

del _CPY