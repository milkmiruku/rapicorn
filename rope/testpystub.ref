### --- Generated by Rapicorn-PyStub --- ###

class __BaseRecord__:
  def __init__ (self, **entries):
    self.__dict__.update (entries)
class __BaseClass__ (object):
  pass
class __Signal__:
  def __init__ (self, signame):
    self.name = signame

class XFooRecord (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'single_bool' : 0,  'single_num' : 0,  'single_float' : 0,  'single_string' : '',  'sibling1' : 0,  'sibling2' : 0,  'multi1' : 0,  'multi2' : 0,  'multi3' : 0,  'multi4' : 0,  'enum_field' : 0, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class NestedTypesRec (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'rec' : None,  'seq' : None, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class AliasRecord (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'single_bool' : 0,  'single_num' : 0,  'single_float' : 0,  'single_string' : '',  'sibling1' : 0,  'sibling2' : 0,  'multi1' : 0,  'multi2' : 0,  'multi3' : 0,  'multi4' : 0,  'enum_field' : 0, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class NewRecord (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'i' : 0,  'enum1' : 0,  'xfs' : None,  'ntr' : None, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class Refer2Inner (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'r' : None, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class InnerRecord (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'x' : 0,  'y' : 0,  'rec' : None, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class SomeRecord (__BaseRecord__):
  def __init__ (self, **entries):
    defaults = { 'r1' : None,  'r2' : None,  'r3' : None,  'r4' : None, }
    self.__dict__.update (defaults)
    __BaseRecord__.__init__ (self, **entries)

class UIWidgetArea (__BaseClass__):
  def __init__ (self):
    super (UIWidgetArea, self).__init__()
    self.sig_void_signal = __Signal__ ('void_signal')
    self.sig_sample_signal = __Signal__ ('sample_signal')
  def simple_method (self): # float
    pass
  def single_arg (self, n): # float
    pass
  def single_arg2 (self, n): # float
    pass
  def two_args (self, n, r): # float
    pass
  def two_args2 (self, n, r): # float
    pass
  def multi_args (self, n, r, i, s, y): # float
    pass
  def self_method (self, ba1, ba2): # float
    pass
  def void_method (self): # one way
    pass
  def on_click2out (self): # string
    pass
  def on_click2in (self, command): # one way
    pass
  def __sig_void_signal__ (self): pass # default handler
  def __sig_sample_signal__ (self): pass # default handler

class Parent (__BaseClass__):
  def __init__ (self):
    super (Parent, self).__init__()

class Child (Parent):
  def __init__ (self):
    super (Child, self).__init__()

class Descendant (Child):
  def __init__ (self):
    super (Descendant, self).__init__()

class GrandChild (Descendant):
  def __init__ (self):
    super (GrandChild, self).__init__()

class SomeInterface (__BaseClass__):
  def __init__ (self):
    super (SomeInterface, self).__init__()
  def use_record (self, rr): # one way
    pass

class ButtonArea (__BaseClass__):
  def __init__ (self):
    super (ButtonArea, self).__init__()
    self.sig_check_activate = __Signal__ ('check_activate')
    self.sig_activate = __Signal__ ('activate')
  def __sig_check_activate__ (self): pass # default handler
  def __sig_activate__ (self): pass # default handler

