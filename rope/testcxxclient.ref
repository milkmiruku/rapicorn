/* --- Generated by PLIC-CxxStub --- */

// --- ClientHH Boilerplate ---
#include <rcore/plicutils.hh>

// --- ClientCC/ServerCC Boilerplate ---
#include <string>
#include <vector>
#include <stdexcept>
#ifndef __PLIC_GENERIC_CC_BOILERPLATE__
#define __PLIC_GENERIC_CC_BOILERPLATE__

#define THROW_ERROR()   throw std::runtime_error ("PLIC: Marshalling failed")
#define PLIC_CHECK(cond,errmsg) do { if (cond) break; throw std::runtime_error (std::string ("PLIC-ERROR: ") + errmsg); } while (0)

namespace { // Anonymous
using Plic::uint64;
typedef Plic::Coupler Coupler;
typedef Plic::FieldBuffer FieldBuffer;
typedef Plic::FieldBuffer8 FieldBuffer8;
typedef Plic::FieldBufferReader FieldBufferReader;

#ifndef PLIC_COUPLER
#define PLIC_COUPLER()  _plic_coupler_static
static struct _DummyCoupler : public Coupler {
  virtual FieldBuffer* call_remote (FieldBuffer *fbcall)
  {
    bool hasresult = Plic::msgid_has_result (fbcall->first_id());
    if (push_call (fbcall)) // deletes fbcall
      ; // threaded dispatcher needs CPU
    // wakeup dispatcher
    while (check_dispatch())
      dispatch();
    return !hasresult ? NULL : pop_result();
  }
} _plic_coupler_static;
#endif

} // Anonymous
#endif // __PLIC_GENERIC_CC_BOILERPLATE__


// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};

class FirstInterface_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline FirstInterface_SmartHandle () {}
  inline FirstInterface_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  void            void_func ();
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  FirstInterface_SmartHandle iface1;
  FirstInterface_SmartHandle iface2;
  FirstInterface_SmartHandle iface3;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence : public std::vector<bool> {
  typedef std::vector<bool> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct IntSequence : public std::vector<int> {
  typedef std::vector<int> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct FloatSequence : public std::vector<double> {
  typedef std::vector<double> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct StringSequence : public std::vector<std::string> {
  typedef std::vector<std::string> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct ExtensiveEnumSequence : public std::vector<ExtensiveEnum> {
  typedef std::vector<ExtensiveEnum> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct RecordSequence : public std::vector<XFooRecord> {
  typedef std::vector<XFooRecord> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct SequenceSequence : public std::vector<IntSequence> {
  typedef std::vector<IntSequence> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct InterfaceSequence : public std::vector<FirstInterface_SmartHandle> {
  typedef std::vector<FirstInterface_SmartHandle> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq : public std::vector<NestedTypesRec> {
  typedef std::vector<NestedTypesRec> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};

namespace Inner {
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline InnerRecord () { x = 0; y = 0; }
};
} // Inner
struct Refer2Inner {
  Inner::InnerRecord r;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline Refer2Inner () { }
};
} // MandatoryNamespace

namespace OtherNamespace {
struct SomeRecord {
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline SomeRecord () { }
};
} // OtherNamespace

namespace Auxdata {
typedef int bar;
typedef double x;
typedef std::string s;

} // Auxdata

namespace InterfaceTests {
class UIWidgetArea_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline UIWidgetArea_SmartHandle () {}
  inline UIWidgetArea_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  double          dummy () const;
  void            dummy (double);
  std::string     on_click () const;
  void            on_click (const std::string&);
  double          simple_method ();
  double          single_arg    (int n);
  double          single_arg2   (int n = 5);
  double          two_args      (int n,
                                 double r);
  double          two_args2     (int n = 6,
                                 double r = 7.7);
  double          multi_args    (int n,
                                 double r,
                                 int i,
                                 const std::string &s = "String ding",
                                 double y = 5);
  double          self_method   (UIWidgetArea_SmartHandle &ba1,
                                 UIWidgetArea_SmartHandle &ba2);
  void            void_method   ();
  std::string     on_click2out  ();
  void            on_click2in   (const std::string &command);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class Parent_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline Parent_SmartHandle () {}
  inline Parent_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class Child_SmartHandle : public Parent_SmartHandle {
protected:
public:
  inline Child_SmartHandle () {}
  inline Child_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class Descendant_SmartHandle : public Child_SmartHandle {
protected:
public:
  inline Descendant_SmartHandle () {}
  inline Descendant_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class GrandChild_SmartHandle : public Descendant_SmartHandle {
protected:
public:
  inline GrandChild_SmartHandle () {}
  inline GrandChild_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord {
  int             int1;
  int             int2;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline QuickRecord () { int1 = 0; int2 = 0; }
};
struct QuickSequence : public std::vector<double> {
  typedef std::vector<double> Sequence;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};

class QuickIface_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline QuickIface_SmartHandle () {}
  inline QuickIface_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  void            simple_function (int i = 9);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class MethodTestInterface_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline MethodTestInterface_SmartHandle () {}
  inline MethodTestInterface_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  void            method_with_void       ();
  bool            method_with_bools      (bool input,
                                          bool optval = 0);
  int             method_with_ints       (int input,
                                          int optval = -2);
  double          method_with_floats     (double input,
                                          double optval = 309.9);
  std::string     method_with_string     (const std::string &input,
                                          const std::string &optval = "default");
  QuickEnum       method_with_enum       (QuickEnum input,
                                          QuickEnum optval = QuickEnum (0));
  QuickRecord     method_with_record     (const QuickRecord &input,
                                          const QuickRecord &optval = QuickRecord());
  QuickSequence   method_with_sequence   (const QuickSequence &input,
                                          const QuickSequence &optval = QuickSequence());
  GrandChild_SmartHandle method_with_interface  (GrandChild_SmartHandle &input,
                                                 GrandChild_SmartHandle &optval = *(GrandChild_SmartHandle*) NULL);
  QuickIface_SmartHandle method_with_quickiface (QuickIface_SmartHandle &input,
                                                 QuickIface_SmartHandle &iface0 = *(QuickIface_SmartHandle*) NULL);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class SignalTestInterface_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline SignalTestInterface_SmartHandle () {}
  inline SignalTestInterface_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class PropertyTester_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline PropertyTester_SmartHandle () {}
  inline PropertyTester_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  bool            bool_prop () const;
  void            bool_prop (bool);
  int             int_prop () const;
  void            int_prop (int);
  double          float_prop () const;
  void            float_prop (double);
  std::string     string_prop () const;
  void            string_prop (const std::string&);
  QuickEnum       enum_prop () const;
  void            enum_prop (QuickEnum);
  QuickRecord     record_prop () const;
  void            record_prop (const QuickRecord&);
  QuickSequence   sequence_prop () const;
  void            sequence_prop (const QuickSequence&);
  GrandChild_SmartHandle interface_prop () const;
  void            interface_prop (GrandChild_SmartHandle);
  PropertyTester_SmartHandle self_prop () const;
  void            self_prop (PropertyTester_SmartHandle);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

} // InterfaceTests

namespace RapicornPlicTest {
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class ButtonArea_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline ButtonArea_SmartHandle () {}
  inline ButtonArea_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  std::string     on_click () const;
  void            on_click (const std::string&);
  std::string     on_click2 () const;
  void            on_click2 (const std::string&);
  std::string     on_click3 () const;
  void            on_click3 (const std::string&);
  ClickType       click_type () const;
  void            click_type (ClickType);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};


class PureMethods_SmartHandle;


class PureMethods_SmartHandle : public Plic::SmartHandle {
protected:
public:
  inline PureMethods_SmartHandle () {}
  inline PureMethods_SmartHandle (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  int             pure_method (double f);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

} // RapicornPlicTest

// --- Implementations ---

namespace MandatoryNamespace {
void
FirstInterface_SmartHandle::void_func ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x200000001dfd7256ULL, 0xdec25cd632ee83caULL, 0x06b4549d6fedf832ULL, 0x9a1e54caedf1db9bULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
bool
XFooRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (14);
  fb.add_int64 (this->single_bool);
  fb.add_int64 (this->single_num);
  fb.add_double (this->single_float);
  fb.add_string (this->single_string);
  fb.add_int64 (this->sibling1);
  fb.add_int64 (this->sibling2);
  fb.add_int64 (this->multi1);
  fb.add_int64 (this->multi2);
  fb.add_int64 (this->multi3);
  fb.add_int64 (this->multi4);
  fb.add_evalue (this->enum_field);
  fb.add_object (this->iface1._rpc_id());
  fb.add_object (this->iface2._rpc_id());
  fb.add_object (this->iface3._rpc_id());
  return true;
}
bool
XFooRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 14) return false;
  this->single_bool = fbr.pop_int64();
  this->single_num = fbr.pop_int64();
  this->single_float = fbr.pop_double();
  this->single_string = fbr.pop_string();
  this->sibling1 = fbr.pop_int64();
  this->sibling2 = fbr.pop_int64();
  this->multi1 = fbr.pop_int64();
  this->multi2 = fbr.pop_int64();
  this->multi3 = fbr.pop_int64();
  this->multi4 = fbr.pop_int64();
  this->enum_field = ExtensiveEnum (fbr.pop_evalue());
  this->iface1 = FirstInterface_SmartHandle (cpl, fbr);
  this->iface2 = FirstInterface_SmartHandle (cpl, fbr);
  this->iface3 = FirstInterface_SmartHandle (cpl, fbr);
  return true;
}

bool
XFooSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 ((*this)[k]);
  }
  return true;
}
bool
XFooSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (fbr.pop_int64());
  }
  return true;
}

bool
IntSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 ((*this)[k]);
  }
  return true;
}
bool
IntSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (fbr.pop_int64());
  }
  return true;
}

bool
FloatSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double ((*this)[k]);
  }
  return true;
}
bool
FloatSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (fbr.pop_double());
  }
  return true;
}

bool
StringSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_string ((*this)[k]);
  }
  return true;
}
bool
StringSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (fbr.pop_string());
  }
  return true;
}

bool
ExtensiveEnumSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_evalue ((*this)[k]);
  }
  return true;
}
bool
ExtensiveEnumSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (ExtensiveEnum (fbr.pop_evalue()));
  }
  return true;
}

bool
RecordSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!(*this)[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
RecordSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!(*this)[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
SequenceSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!(*this)[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
SequenceSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!(*this)[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
InterfaceSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_object ((*this)[k]._rpc_id());
  }
  return true;
}
bool
InterfaceSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (FirstInterface_SmartHandle (cpl, fbr));
  }
  return true;
}

bool
NestedTypesRec::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  if (!this->rec.proto_add (cpl, fb)) return false;
  if (!this->seq.proto_add (cpl, fb)) return false;
  return true;
}
bool
NestedTypesRec::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  if (!this->rec.proto_pop (cpl, fbr)) return false;
  if (!this->seq.proto_pop (cpl, fbr)) return false;
  return true;
}

bool
NestedTypesSeq::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!(*this)[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
NestedTypesSeq::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!(*this)[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
NewRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  fb.add_int64 (this->i);
  fb.add_evalue (this->enum1);
  if (!this->xfs.proto_add (cpl, fb)) return false;
  if (!this->ntr.proto_add (cpl, fb)) return false;
  return true;
}
bool
NewRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  this->i = fbr.pop_int64();
  this->enum1 = Enum1 (fbr.pop_evalue());
  if (!this->xfs.proto_pop (cpl, fbr)) return false;
  if (!this->ntr.proto_pop (cpl, fbr)) return false;
  return true;
}


namespace Inner {
bool
InnerRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (3);
  fb.add_int64 (this->x);
  fb.add_int64 (this->y);
  if (!this->rec.proto_add (cpl, fb)) return false;
  return true;
}
bool
InnerRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) return false;
  this->x = fbr.pop_int64();
  this->y = fbr.pop_int64();
  if (!this->rec.proto_pop (cpl, fbr)) return false;
  return true;
}

} // Inner
bool
Refer2Inner::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (1);
  if (!this->r.proto_add (cpl, fb)) return false;
  return true;
}
bool
Refer2Inner::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) return false;
  if (!this->r.proto_pop (cpl, fbr)) return false;
  return true;
}

} // MandatoryNamespace

namespace OtherNamespace {
bool
SomeRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  if (!this->r1.proto_add (cpl, fb)) return false;
  if (!this->r2.proto_add (cpl, fb)) return false;
  if (!this->r3.proto_add (cpl, fb)) return false;
  if (!this->r4.proto_add (cpl, fb)) return false;
  return true;
}
bool
SomeRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  if (!this->r1.proto_pop (cpl, fbr)) return false;
  if (!this->r2.proto_pop (cpl, fbr)) return false;
  if (!this->r3.proto_pop (cpl, fbr)) return false;
  if (!this->r4.proto_pop (cpl, fbr)) return false;
  return true;
}

} // OtherNamespace

namespace InterfaceTests {
double
UIWidgetArea_SmartHandle::dummy () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x300000000f640b0bULL, 0xf898d6c052acbc0eULL, 0x3a37468e43084f56ULL, 0x95a4007bdf2e01f2ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
void
UIWidgetArea_SmartHandle::dummy (double value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000c31cebd0ULL, 0xe29449d8d5a3f3d7ULL, 0xcf867abd6680ac57ULL, 0x381384b98fd02eb0ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_double (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
UIWidgetArea_SmartHandle::on_click () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000770dc86aULL, 0x7df1dcbc4a6c4e83ULL, 0x2840e8030d9c3204ULL, 0x50000718b02d0721ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
void
UIWidgetArea_SmartHandle::on_click (const std::string &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000b37c8bffULL, 0x5f7d07992ee34f4eULL, 0x7cc7f29e4f917d38ULL, 0xd4714e6aa95f1e68ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
double
UIWidgetArea_SmartHandle::simple_method ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x30000000fd8072dfULL, 0x591f7cce6e74034aULL, 0x419df82c635c78d1ULL, 0x1e2fc6cf88d761faULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
double
UIWidgetArea_SmartHandle::single_arg (int arg_n)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x3000000075ce4c8bULL, 0x1a40a9c8bd145a39ULL, 0x37b83f96f1d3168bULL, 0x3f57c461185c3752ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
double
UIWidgetArea_SmartHandle::single_arg2 (int arg_n)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000179c202fULL, 0xa554850da029f547ULL, 0xe2591a43b7c79a61ULL, 0xe19a6853f11b1b99ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
double
UIWidgetArea_SmartHandle::two_args (int arg_n,
                                    double arg_r)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000006a210506ULL, 0xa76bb7cd90d84838ULL, 0x8000823cfb905b8cULL, 0x39826abcf9caba00ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
double
UIWidgetArea_SmartHandle::two_args2 (int arg_n,
                                     double arg_r)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000ac125ff1ULL, 0xac6be3d45e25ada6ULL, 0x040efc8ab508b1d3ULL, 0x15e48df9e26c0caaULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
double
UIWidgetArea_SmartHandle::multi_args (int arg_n,
                                      double arg_r,
                                      int arg_i,
                                      const std::string &arg_s,
                                      double arg_y)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 5), *fr = NULL;
  fb.add_type_hash (0x300000000361838dULL, 0xc298afde820561a5ULL, 0x8fe8c83788c4bb38ULL, 0xb3179ae3d510e7b2ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fb.add_int64 (arg_i);
  fb.add_string (arg_s);
  fb.add_double (arg_y);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
double
UIWidgetArea_SmartHandle::self_method (UIWidgetArea_SmartHandle &arg_ba1,
                                       UIWidgetArea_SmartHandle &arg_ba2)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000b9d64621ULL, 0x3a96692d3e1ef7dbULL, 0xdced671b586f7aa7ULL, 0x1d3870f7ed0285e5ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_object (arg_ba1._rpc_id());
  fb.add_object (arg_ba2._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
void
UIWidgetArea_SmartHandle::void_method ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x200000000ff38422ULL, 0x440e8e84942acf8eULL, 0x0c4945e5794d8356ULL, 0x2e2e61471f31bfbfULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
std::string
UIWidgetArea_SmartHandle::on_click2out ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x300000004b649644ULL, 0x8a9b2140ad7fc83dULL, 0x10b67ed382387b14ULL, 0xe7b6cc0714a17f30ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
void
UIWidgetArea_SmartHandle::on_click2in (const std::string &arg_command)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000f671167cULL, 0xdfc42ce42beb58f7ULL, 0x15afc969aae521d6ULL, 0xadbec8ab9522f6f8ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (arg_command);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
bool
QuickRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  fb.add_int64 (this->int1);
  fb.add_int64 (this->int2);
  return true;
}
bool
QuickRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  this->int1 = fbr.pop_int64();
  this->int2 = fbr.pop_int64();
  return true;
}

bool
QuickSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = this->size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double ((*this)[k]);
  }
  return true;
}
bool
QuickSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->push_back (fbr.pop_double());
  }
  return true;
}

void
QuickIface_SmartHandle::simple_function (int arg_i)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000be855008ULL, 0x6bf2269ff6939544ULL, 0x6a0846e9f5a62da8ULL, 0x59c8e2a4e4629e80ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_i);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
void
MethodTestInterface_SmartHandle::method_with_void ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x20000000a426153aULL, 0x0a2f5758267a2651ULL, 0xd9bff16cf6755833ULL, 0x8959ddaf9e5b8a44ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
bool
MethodTestInterface_SmartHandle::method_with_bools (bool arg_input,
                                                    bool arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000003917295eULL, 0x76cb59d18d695319ULL, 0x0fe6acdaa38d48dfULL, 0xa26ca0854c18e565ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_input);
  fb.add_int64 (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  bool retval = frr.pop_int64();
  delete fr;
  return retval;
}
int
MethodTestInterface_SmartHandle::method_with_ints (int arg_input,
                                                   int arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000015f688dcULL, 0x4db9c06f4357aa4eULL, 0x902ee7647790de7cULL, 0x18aa217be2c83cbaULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_input);
  fb.add_int64 (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  int retval = frr.pop_int64();
  delete fr;
  return retval;
}
double
MethodTestInterface_SmartHandle::method_with_floats (double arg_input,
                                                     double arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000bfc2d47bULL, 0x70b13d1cdf2c9488ULL, 0x77c2ea3ad44c2625ULL, 0xd6093e05e70ea643ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_double (arg_input);
  fb.add_double (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
std::string
MethodTestInterface_SmartHandle::method_with_string (const std::string &arg_input,
                                                     const std::string &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000002732b2feULL, 0x6dfd49db44b97641ULL, 0x010dcacac6eb8ed7ULL, 0xa79383e035fc64e1ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (arg_input);
  fb.add_string (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
QuickEnum
MethodTestInterface_SmartHandle::method_with_enum (QuickEnum arg_input,
                                                   QuickEnum arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000003f676d86ULL, 0x903cbdda7f9bf8e6ULL, 0xb56b87771cbd4b69ULL, 0x5723ee9d219ddda5ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_evalue (arg_input);
  fb.add_evalue (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickEnum retval = QuickEnum (frr.pop_evalue());
  delete fr;
  return retval;
}
QuickRecord
MethodTestInterface_SmartHandle::method_with_record (const QuickRecord &arg_input,
                                                     const QuickRecord &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000004a0b014ULL, 0x7eef09335a6cd6afULL, 0xd80237b6e1df12f6ULL, 0x70618be70ed6e858ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  if (!arg_input.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  if (!arg_optval.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickRecord retval;
  if (!retval.proto_pop (PLIC_COUPLER(), frr)) THROW_ERROR();
  delete fr;
  return retval;
}
QuickSequence
MethodTestInterface_SmartHandle::method_with_sequence (const QuickSequence &arg_input,
                                                       const QuickSequence &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000e92eb1f1ULL, 0xbc6d5e758278964aULL, 0xe88f958f88ca346cULL, 0xf29e446630c57f23ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  if (!arg_input.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  if (!arg_optval.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickSequence retval;
  if (!retval.proto_pop (PLIC_COUPLER(), frr)) THROW_ERROR();
  delete fr;
  return retval;
}
GrandChild_SmartHandle
MethodTestInterface_SmartHandle::method_with_interface (GrandChild_SmartHandle &arg_input,
                                                        GrandChild_SmartHandle &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000001640ae0ULL, 0xf5403244c684c076ULL, 0x208c721dda088467ULL, 0x425f3425b0dcfad4ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_object (arg_input._rpc_id());
  fb.add_object (arg_optval._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  GrandChild_SmartHandle retval = GrandChild_SmartHandle (PLIC_COUPLER(), frr);
  delete fr;
  return retval;
}
QuickIface_SmartHandle
MethodTestInterface_SmartHandle::method_with_quickiface (QuickIface_SmartHandle &arg_input,
                                                         QuickIface_SmartHandle &arg_iface0)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000082dc142eULL, 0x7d16cadebfca9b39ULL, 0x168d05eb3cf56adbULL, 0x31e28c41cf8bb4f9ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_object (arg_input._rpc_id());
  fb.add_object (arg_iface0._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickIface_SmartHandle retval = QuickIface_SmartHandle (PLIC_COUPLER(), frr);
  delete fr;
  return retval;
}
bool
PropertyTester_SmartHandle::bool_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000b0144864ULL, 0xc643901d97f360ddULL, 0x57a9071058ac07aaULL, 0xfc6b7a41bf635ad1ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  bool retval = frr.pop_int64();
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::bool_prop (bool value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000a18d314bULL, 0x26151171e3bb39dcULL, 0x1a443db8b1c01c6cULL, 0xfcb6e633dd2e9613ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
int
PropertyTester_SmartHandle::int_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000181e8779ULL, 0x0f77dae854e0b84fULL, 0x637dec96e0c074cbULL, 0x6ea8e58f8853d3c7ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  int retval = frr.pop_int64();
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::int_prop (int value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000eb780228ULL, 0xeee26b84cc028ea1ULL, 0x5208210fdb93be48ULL, 0xbc262f6d750d0de7ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
double
PropertyTester_SmartHandle::float_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x3000000063885e5eULL, 0x73736be8a1ddb81cULL, 0x0837119897127c62ULL, 0x254bfc525be1d520ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  double retval = frr.pop_double();
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::float_prop (double value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x200000000f38d4d9ULL, 0xe580a2e95eb8a99eULL, 0x2b253a5868c02d21ULL, 0xa41bb895557ed355ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_double (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
PropertyTester_SmartHandle::string_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000d158fbc9ULL, 0x05c7627c89588141ULL, 0x13e53815a987f9a7ULL, 0x87fca26102aca1b0ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::string_prop (const std::string &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000a6029496ULL, 0x5af74c144238b1b1ULL, 0x656a73acc800a8bbULL, 0x88efc321d6f74b0cULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
QuickEnum
PropertyTester_SmartHandle::enum_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x3000000069369270ULL, 0xb5f6ccbefcd8a46dULL, 0xaee75a418197773dULL, 0xf32203a882a1817eULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickEnum retval = QuickEnum (frr.pop_evalue());
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::enum_prop (QuickEnum value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x2000000005e65481ULL, 0xd9f07e1cdf167a17ULL, 0xceed8910f029e869ULL, 0xd4d0e67731680533ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_evalue (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
QuickRecord
PropertyTester_SmartHandle::record_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000ecbe5f0fULL, 0x49863133875c84dbULL, 0x6ab95eefcc9ecc34ULL, 0xc2138d9daee43a04ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickRecord retval;
  if (!retval.proto_pop (PLIC_COUPLER(), frr)) THROW_ERROR();
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::record_prop (const QuickRecord &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x200000008acccdfcULL, 0x0c89ae0a721e3ff1ULL, 0x478c936633c08d26ULL, 0x6fb14f7161390c2cULL); // msgid
  fb.add_object ((*this)._rpc_id());
  if (!value.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
QuickSequence
PropertyTester_SmartHandle::sequence_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000b8af2543ULL, 0xb58f78e8919bee21ULL, 0x2d5000b118cd647fULL, 0x95fcfef75f8e8174ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  QuickSequence retval;
  if (!retval.proto_pop (PLIC_COUPLER(), frr)) THROW_ERROR();
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::sequence_prop (const QuickSequence &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x2000000016bc9f59ULL, 0x029c4a74204a0fe2ULL, 0x850c99c1f01af8b1ULL, 0xb190eb2442c7255aULL); // msgid
  fb.add_object ((*this)._rpc_id());
  if (!value.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
GrandChild_SmartHandle
PropertyTester_SmartHandle::interface_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000294a1e88ULL, 0xb69eb6f2b1545a61ULL, 0x05811c63352b9dceULL, 0x6d0cf06dbf6200e9ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  GrandChild_SmartHandle retval = GrandChild_SmartHandle (PLIC_COUPLER(), frr);
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::interface_prop (GrandChild_SmartHandle value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x200000006871f741ULL, 0x25fe233d750ca71dULL, 0x5a0570311b480850ULL, 0x12b776dab1102b61ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_object (value._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
PropertyTester_SmartHandle
PropertyTester_SmartHandle::self_prop () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000493b60d9ULL, 0xa9d1286fc302f3dbULL, 0xdfab7e8d1c2e0c08ULL, 0x91a4c03a3a37c6a1ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  PropertyTester_SmartHandle retval = PropertyTester_SmartHandle (PLIC_COUPLER(), frr);
  delete fr;
  return retval;
}
void
PropertyTester_SmartHandle::self_prop (PropertyTester_SmartHandle value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x2000000054baf216ULL, 0x8d311910e92e61b2ULL, 0x6abbb85e2edb7f36ULL, 0xbc35ff08d9903c42ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_object (value._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
} // InterfaceTests

namespace RapicornPlicTest {
std::string
ButtonArea_SmartHandle::on_click () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000491d784bULL, 0xb29d170c81c582faULL, 0xf38eb9a29bb01ea0ULL, 0xae5244cb9938a581ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
void
ButtonArea_SmartHandle::on_click (const std::string &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000af8c1a29ULL, 0x560ed695ce4df779ULL, 0x54767d09a29524ebULL, 0xa184187eacb770cfULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
ButtonArea_SmartHandle::on_click2 () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x300000000d3108d8ULL, 0x4f5ba9ee776a43d2ULL, 0xa831d7cea44cc5faULL, 0xcc2d97f07926cef0ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
void
ButtonArea_SmartHandle::on_click2 (const std::string &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x2000000068d757d8ULL, 0x6dde3c79e1c855a5ULL, 0x7383e3212d1dde0bULL, 0x16fee72f3c653aa2ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
std::string
ButtonArea_SmartHandle::on_click3 () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000f0c2da03ULL, 0x29fb66fef42c8334ULL, 0xabd9ab6b8df662eeULL, 0x3a7eb8700de84064ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  std::string retval = frr.pop_string();
  delete fr;
  return retval;
}
void
ButtonArea_SmartHandle::on_click3 (const std::string &value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x2000000094c7d2abULL, 0xea107cd9f9ec9512ULL, 0x262c4644988b3a63ULL, 0x76720081bc8f5f79ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_string (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
ClickType
ButtonArea_SmartHandle::click_type () const
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1), *fr = NULL;
  fb.add_type_hash (0x300000001c03071bULL, 0xf4a8efb57ac62e96ULL, 0x4f3d3a414afe1025ULL, 0x43a202534ab618a7ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  ClickType retval = ClickType (frr.pop_evalue());
  delete fr;
  return retval;
}
void
ButtonArea_SmartHandle::click_type (ClickType value)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000a83e3165ULL, 0xa181aec34685c438ULL, 0x0b56a49d59dbd00cULL, 0x3d758ee49bb0a338ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_evalue (value);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) delete fr;
}
int
PureMethods_SmartHandle::pure_method (double arg_f)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000e96382b8ULL, 0x8c16fe069c1d6b1eULL, 0x002e82b90c7db308ULL, 0x9c8a9e5a95b6ea99ULL); // msgid
  fb.add_object ((*this)._rpc_id());
  fb.add_double (arg_f);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // msgid
  int retval = frr.pop_int64();
  delete fr;
  return retval;
}
} // RapicornPlicTest

