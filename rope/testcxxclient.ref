/* --- Generated by PLIC-CxxCaller --- */

// --- ClientHH Boilerplate ---
#include <rcore/plicutils.hh>

// --- ClientCC/ServerCC Boilerplate ---
#include <string>
#include <vector>
#include <stdexcept>
#ifndef __PLIC_GENERIC_CC_BOILERPLATE__
#define __PLIC_GENERIC_CC_BOILERPLATE__

#define THROW_ERROR()   throw std::runtime_error ("PLIC: Marshalling failed")
#define PLIC_CHECK(cond,errmsg) do { if (cond) break; throw std::runtime_error (std::string ("PLIC-ERROR: ") + errmsg); } while (0)

namespace { // Anonymous
using Plic::uint64;
typedef Plic::Coupler Coupler;
typedef Plic::FieldBuffer FieldBuffer;
typedef Plic::FieldBuffer8 FieldBuffer8;
typedef Plic::FieldBufferReader FieldBufferReader;

#ifndef PLIC_COUPLER
#define PLIC_COUPLER()  _plic_coupler_static
static struct _DummyCoupler : public Coupler {
  virtual FieldBuffer* call_remote (FieldBuffer *fbcall)
  {
    bool hasresult = Plic::msgid_has_result (fbcall->first_id());
    if (push_call (fbcall)) // deletes fbcall
      ; // threaded dispatcher needs CPU
    // wakeup dispatcher
    while (check_dispatch())
      dispatch();
    return !hasresult ? NULL : pop_result();
  }
} _plic_coupler_static;
#endif

} // Anonymous
#endif // __PLIC_GENERIC_CC_BOILERPLATE__


// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};

class FirstInterface : public virtual Plic::SmartHandle {
protected:
public:
  inline FirstInterface () {}
  inline FirstInterface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  void            void_func ();
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  FirstInterface  iface1;
  FirstInterface  iface2;
  FirstInterface  iface3;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence {
  typedef std::vector<bool> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        single_bool;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct IntSequence {
  typedef std::vector<int> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        numx;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct FloatSequence {
  typedef std::vector<double> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        fractalvalue;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct StringSequence {
  typedef std::vector<std::string> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        blurb;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct ExtensiveEnumSequence {
  typedef std::vector<ExtensiveEnum> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        enum_elements;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct RecordSequence {
  typedef std::vector<XFooRecord> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        repeatedfield;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct SequenceSequence {
  typedef std::vector<IntSequence> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        moreints;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct InterfaceSequence {
  typedef std::vector<FirstInterface> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        iface1;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq {
  typedef std::vector<NestedTypesRec> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};

namespace Inner {
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline InnerRecord () { x = 0; y = 0; }
};
} // Inner
struct Refer2Inner {
  Inner::InnerRecord r;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline Refer2Inner () { }
};
} // MandatoryNamespace

namespace OtherNamespace {
struct SomeRecord {
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline SomeRecord () { }
};
} // OtherNamespace

namespace Auxdata {
typedef int bar;
typedef double x;
typedef std::string s;
} // Auxdata

namespace InterfaceTests {

class UIWidgetArea : public virtual Plic::SmartHandle {
protected:
public:
  inline UIWidgetArea () {}
  inline UIWidgetArea (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  double          simple_method ();
  double          single_arg    (int n);
  double          single_arg2   (int n = 5);
  double          two_args      (int n,
                                 double r);
  double          two_args2     (int n = 6,
                                 double r = 7.7);
  double          multi_args    (int n,
                                 double r,
                                 int i,
                                 const std::string &s = "String ding",
                                 double y = 5);
  double          self_method   (UIWidgetArea &ba1,
                                 UIWidgetArea &ba2);
  void            void_method   ();
  std::string     on_click2out  ();
  void            on_click2in   (const std::string &command);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class Parent : public virtual Plic::SmartHandle {
protected:
public:
  inline Parent () {}
  inline Parent (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class Child : public Parent {
protected:
public:
  inline Child () {}
  inline Child (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class Descendant : public Child {
protected:
public:
  inline Descendant () {}
  inline Descendant (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class GrandChild : public Descendant {
protected:
public:
  inline GrandChild () {}
  inline GrandChild (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord {
  int             int1;
  int             int2;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
  inline QuickRecord () { int1 = 0; int2 = 0; }
};
struct QuickSequence {
  typedef std::vector<double> Sequence;
  typedef Sequence::size_type              size_type;
  typedef Sequence::value_type             value_type;
  typedef Sequence::allocator_type         allocator_type;
  typedef Sequence::iterator               iterator;
  typedef Sequence::const_iterator         const_iterator;
  typedef Sequence::reverse_iterator       reverse_iterator;
  typedef Sequence::const_reverse_iterator const_reverse_iterator;
  Sequence        somefloat;
  bool proto_add  (Plic::Coupler&, Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::Coupler&, Plic::FieldBufferReader&);
};

class QuickIface : public virtual Plic::SmartHandle {
protected:
public:
  inline QuickIface () {}
  inline QuickIface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  void            simple_function (int i = 9);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class MethodTestInterface : public virtual Plic::SmartHandle {
protected:
public:
  inline MethodTestInterface () {}
  inline MethodTestInterface (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  void            method_with_void       ();
  bool            method_with_bools      (bool input,
                                          bool optval = 0);
  int             method_with_ints       (int input,
                                          int optval = -2);
  double          method_with_floats     (double input,
                                          double optval = 309.9);
  std::string     method_with_string     (const std::string &input,
                                          const std::string &optval = "default");
  QuickEnum       method_with_enum       (QuickEnum input,
                                          QuickEnum optval = QuickEnum (0));
  QuickRecord     method_with_record     (const QuickRecord &input,
                                          const QuickRecord &optval = QuickRecord());
  QuickSequence   method_with_sequence   (const QuickSequence &input,
                                          const QuickSequence &optval = QuickSequence());
  GrandChild      method_with_interface  (GrandChild &input,
                                          GrandChild &optval = *(GrandChild*) NULL);
  QuickIface      method_with_quickiface (QuickIface &input,
                                          QuickIface &iface0 = *(QuickIface*) NULL);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // InterfaceTests

namespace RapicornPlicTest {
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class ButtonArea : public virtual Plic::SmartHandle {
protected:
public:
  inline ButtonArea () {}
  inline ButtonArea (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class PureMethods : public virtual Plic::SmartHandle {
protected:
public:
  inline PureMethods () {}
  inline PureMethods (Plic::Coupler &cpl, Plic::FieldBufferReader &fbr) { _pop_rpc (cpl, fbr); }
  int             pure_method (double f);
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // RapicornPlicTest

// --- Implementations ---

namespace MandatoryNamespace {
void
FirstInterface::void_func ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x200000001dfd7256ULL, 0xdec25cd632ee83caULL, 0x06b4549d6fedf832ULL, 0x9a1e54caedf1db9bULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
bool
XFooRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (14);
  fb.add_int64 (this->single_bool);
  fb.add_int64 (this->single_num);
  fb.add_double (this->single_float);
  fb.add_string (this->single_string);
  fb.add_int64 (this->sibling1);
  fb.add_int64 (this->sibling2);
  fb.add_int64 (this->multi1);
  fb.add_int64 (this->multi2);
  fb.add_int64 (this->multi3);
  fb.add_int64 (this->multi4);
  fb.add_evalue (this->enum_field);
  fb.add_object (this->iface1._rpc_id());
  fb.add_object (this->iface2._rpc_id());
  fb.add_object (this->iface3._rpc_id());
  return true;
}
bool
XFooRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 14) return false;
  this->single_bool = fbr.pop_int64();
  this->single_num = fbr.pop_int64();
  this->single_float = fbr.pop_double();
  this->single_string = fbr.pop_string();
  this->sibling1 = fbr.pop_int64();
  this->sibling2 = fbr.pop_int64();
  this->multi1 = fbr.pop_int64();
  this->multi2 = fbr.pop_int64();
  this->multi3 = fbr.pop_int64();
  this->multi4 = fbr.pop_int64();
  this->enum_field = ExtensiveEnum (fbr.pop_evalue());
  this->iface1 = FirstInterface (cpl, fbr);
  this->iface2 = FirstInterface (cpl, fbr);
  this->iface3 = FirstInterface (cpl, fbr);
  return true;
}

bool
XFooSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = single_bool.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 (this->single_bool[k]);
  }
  return true;
}
bool
XFooSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->single_bool.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->single_bool.push_back (fbr.pop_int64());
  }
  return true;
}

bool
IntSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = numx.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 (this->numx[k]);
  }
  return true;
}
bool
IntSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->numx.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->numx.push_back (fbr.pop_int64());
  }
  return true;
}

bool
FloatSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = fractalvalue.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double (this->fractalvalue[k]);
  }
  return true;
}
bool
FloatSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->fractalvalue.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->fractalvalue.push_back (fbr.pop_double());
  }
  return true;
}

bool
StringSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = blurb.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_string (this->blurb[k]);
  }
  return true;
}
bool
StringSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->blurb.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->blurb.push_back (fbr.pop_string());
  }
  return true;
}

bool
ExtensiveEnumSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = enum_elements.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_evalue (this->enum_elements[k]);
  }
  return true;
}
bool
ExtensiveEnumSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->enum_elements.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->enum_elements.push_back (ExtensiveEnum (fbr.pop_evalue()));
  }
  return true;
}

bool
RecordSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = repeatedfield.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->repeatedfield[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
RecordSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->repeatedfield.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->repeatedfield[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
SequenceSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = moreints.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->moreints[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
SequenceSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->moreints.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->moreints[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
InterfaceSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = iface1.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_object (this->iface1[k]._rpc_id());
  }
  return true;
}
bool
InterfaceSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->iface1.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->iface1.push_back (FirstInterface (cpl, fbr));
  }
  return true;
}

bool
NestedTypesRec::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  if (!this->rec.proto_add (cpl, fb)) return false;
  if (!this->seq.proto_add (cpl, fb)) return false;
  return true;
}
bool
NestedTypesRec::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  if (!this->rec.proto_pop (cpl, fbr)) return false;
  if (!this->seq.proto_pop (cpl, fbr)) return false;
  return true;
}

bool
NestedTypesSeq::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = ntr.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->ntr[k].proto_add (cpl, fb)) return false;
  }
  return true;
}
bool
NestedTypesSeq::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->ntr.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->ntr[k].proto_pop (cpl, fbr)) return false;
  }
  return true;
}

bool
NewRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  fb.add_int64 (this->i);
  fb.add_evalue (this->enum1);
  if (!this->xfs.proto_add (cpl, fb)) return false;
  if (!this->ntr.proto_add (cpl, fb)) return false;
  return true;
}
bool
NewRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  this->i = fbr.pop_int64();
  this->enum1 = Enum1 (fbr.pop_evalue());
  if (!this->xfs.proto_pop (cpl, fbr)) return false;
  if (!this->ntr.proto_pop (cpl, fbr)) return false;
  return true;
}


namespace Inner {
bool
InnerRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (3);
  fb.add_int64 (this->x);
  fb.add_int64 (this->y);
  if (!this->rec.proto_add (cpl, fb)) return false;
  return true;
}
bool
InnerRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) return false;
  this->x = fbr.pop_int64();
  this->y = fbr.pop_int64();
  if (!this->rec.proto_pop (cpl, fbr)) return false;
  return true;
}

} // Inner
bool
Refer2Inner::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (1);
  if (!this->r.proto_add (cpl, fb)) return false;
  return true;
}
bool
Refer2Inner::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) return false;
  if (!this->r.proto_pop (cpl, fbr)) return false;
  return true;
}

} // MandatoryNamespace

namespace OtherNamespace {
bool
SomeRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  if (!this->r1.proto_add (cpl, fb)) return false;
  if (!this->r2.proto_add (cpl, fb)) return false;
  if (!this->r3.proto_add (cpl, fb)) return false;
  if (!this->r4.proto_add (cpl, fb)) return false;
  return true;
}
bool
SomeRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  if (!this->r1.proto_pop (cpl, fbr)) return false;
  if (!this->r2.proto_pop (cpl, fbr)) return false;
  if (!this->r3.proto_pop (cpl, fbr)) return false;
  if (!this->r4.proto_pop (cpl, fbr)) return false;
  return true;
}

} // OtherNamespace

namespace InterfaceTests {
double
UIWidgetArea::simple_method ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x30000000fd8072dfULL, 0x591f7cce6e74034aULL, 0x419df82c635c78d1ULL, 0x1e2fc6cf88d761faULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::single_arg (int arg_n)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x3000000075ce4c8bULL, 0x1a40a9c8bd145a39ULL, 0x37b83f96f1d3168bULL, 0x3f57c461185c3752ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::single_arg2 (int arg_n)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000179c202fULL, 0xa554850da029f547ULL, 0xe2591a43b7c79a61ULL, 0xe19a6853f11b1b99ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::two_args (int arg_n,
                        double arg_r)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000006a210506ULL, 0xa76bb7cd90d84838ULL, 0x8000823cfb905b8cULL, 0x39826abcf9caba00ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::two_args2 (int arg_n,
                         double arg_r)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000ac125ff1ULL, 0xac6be3d45e25ada6ULL, 0x040efc8ab508b1d3ULL, 0x15e48df9e26c0caaULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::multi_args (int arg_n,
                          double arg_r,
                          int arg_i,
                          const std::string &arg_s,
                          double arg_y)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 5), *fr = NULL;
  fb.add_type_hash (0x300000000361838dULL, 0xc298afde820561a5ULL, 0x8fe8c83788c4bb38ULL, 0xb3179ae3d510e7b2ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fb.add_int64 (arg_i);
  fb.add_string (arg_s);
  fb.add_double (arg_y);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::self_method (UIWidgetArea &arg_ba1,
                           UIWidgetArea &arg_ba2)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000b9d64621ULL, 0x3a96692d3e1ef7dbULL, 0xdced671b586f7aa7ULL, 0x1d3870f7ed0285e5ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_object (arg_ba1._rpc_id());
  fb.add_object (arg_ba2._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
void
UIWidgetArea::void_method ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x200000000ff38422ULL, 0x440e8e84942acf8eULL, 0x0c4945e5794d8356ULL, 0x2e2e61471f31bfbfULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
std::string
UIWidgetArea::on_click2out ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x300000004b649644ULL, 0x8a9b2140ad7fc83dULL, 0x10b67ed382387b14ULL, 0xe7b6cc0714a17f30ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  std::string retval = frr.pop_string();
  return retval;
}
void
UIWidgetArea::on_click2in (const std::string &arg_command)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000f671167cULL, 0xdfc42ce42beb58f7ULL, 0x15afc969aae521d6ULL, 0xadbec8ab9522f6f8ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_string (arg_command);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
bool
QuickRecord::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  fb.add_int64 (this->int1);
  fb.add_int64 (this->int2);
  return true;
}
bool
QuickRecord::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  this->int1 = fbr.pop_int64();
  this->int2 = fbr.pop_int64();
  return true;
}

bool
QuickSequence::proto_add (Plic::Coupler &cpl, Plic::FieldBuffer &dst) const
{
  const size_t len = somefloat.size();
  Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double (this->somefloat[k]);
  }
  return true;
}
bool
QuickSequence::proto_pop (Plic::Coupler &cpl, Plic::FieldBufferReader &src)
{
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->somefloat.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->somefloat.push_back (fbr.pop_double());
  }
  return true;
}

void
QuickIface::simple_function (int arg_i)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x20000000be855008ULL, 0x6bf2269ff6939544ULL, 0x6a0846e9f5a62da8ULL, 0x59c8e2a4e4629e80ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_i);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
void
MethodTestInterface::method_with_void ()
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x20000000a426153aULL, 0x0a2f5758267a2651ULL, 0xd9bff16cf6755833ULL, 0x8959ddaf9e5b8a44ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
}
bool
MethodTestInterface::method_with_bools (bool arg_input,
                                        bool arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000003917295eULL, 0x76cb59d18d695319ULL, 0x0fe6acdaa38d48dfULL, 0xa26ca0854c18e565ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_input);
  fb.add_int64 (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  bool retval = frr.pop_int64();
  return retval;
}
int
MethodTestInterface::method_with_ints (int arg_input,
                                       int arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000015f688dcULL, 0x4db9c06f4357aa4eULL, 0x902ee7647790de7cULL, 0x18aa217be2c83cbaULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_int64 (arg_input);
  fb.add_int64 (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  int retval = frr.pop_int64();
  return retval;
}
double
MethodTestInterface::method_with_floats (double arg_input,
                                         double arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000bfc2d47bULL, 0x70b13d1cdf2c9488ULL, 0x77c2ea3ad44c2625ULL, 0xd6093e05e70ea643ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_double (arg_input);
  fb.add_double (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
std::string
MethodTestInterface::method_with_string (const std::string &arg_input,
                                         const std::string &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000002732b2feULL, 0x6dfd49db44b97641ULL, 0x010dcacac6eb8ed7ULL, 0xa79383e035fc64e1ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_string (arg_input);
  fb.add_string (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  std::string retval = frr.pop_string();
  return retval;
}
QuickEnum
MethodTestInterface::method_with_enum (QuickEnum arg_input,
                                       QuickEnum arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x300000003f676d86ULL, 0x903cbdda7f9bf8e6ULL, 0xb56b87771cbd4b69ULL, 0x5723ee9d219ddda5ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_evalue (arg_input);
  fb.add_evalue (arg_optval);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickEnum retval = QuickEnum (frr.pop_evalue());
  return retval;
}
QuickRecord
MethodTestInterface::method_with_record (const QuickRecord &arg_input,
                                         const QuickRecord &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000004a0b014ULL, 0x7eef09335a6cd6afULL, 0xd80237b6e1df12f6ULL, 0x70618be70ed6e858ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  if (!arg_input.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  if (!arg_optval.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickRecord retval;
  if (!retval.proto_pop (PLIC_COUPLER(), frr)) THROW_ERROR();
  return retval;
}
QuickSequence
MethodTestInterface::method_with_sequence (const QuickSequence &arg_input,
                                           const QuickSequence &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x30000000e92eb1f1ULL, 0xbc6d5e758278964aULL, 0xe88f958f88ca346cULL, 0xf29e446630c57f23ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  if (!arg_input.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  if (!arg_optval.proto_add (PLIC_COUPLER(), fb)) THROW_ERROR();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickSequence retval;
  if (!retval.proto_pop (PLIC_COUPLER(), frr)) THROW_ERROR();
  return retval;
}
GrandChild
MethodTestInterface::method_with_interface (GrandChild &arg_input,
                                            GrandChild &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000001640ae0ULL, 0xf5403244c684c076ULL, 0x208c721dda088467ULL, 0x425f3425b0dcfad4ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_object (arg_input._rpc_id());
  fb.add_object (arg_optval._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  GrandChild retval = GrandChild (PLIC_COUPLER(), frr);
  return retval;
}
QuickIface
MethodTestInterface::method_with_quickiface (QuickIface &arg_input,
                                             QuickIface &arg_iface0)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x3000000082dc142eULL, 0x7d16cadebfca9b39ULL, 0x168d05eb3cf56adbULL, 0x31e28c41cf8bb4f9ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_object (arg_input._rpc_id());
  fb.add_object (arg_iface0._rpc_id());
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickIface retval = QuickIface (PLIC_COUPLER(), frr);
  return retval;
}
} // InterfaceTests

namespace RapicornPlicTest {
int
PureMethods::pure_method (double arg_f)
{
  FieldBuffer &fb = *FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x30000000e96382b8ULL, 0x8c16fe069c1d6b1eULL, 0x002e82b90c7db308ULL, 0x9c8a9e5a95b6ea99ULL); // proc_id
  fb.add_object ((*this)._rpc_id());
  fb.add_double (arg_f);
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  int retval = frr.pop_int64();
  return retval;
}
} // RapicornPlicTest

