/* --- Generated by PLIC-CxxCaller --- */

// #include <rcore/rapicornsignal.hh>
// #include <ui/interface.hh>
#include <rapicorn.hh>
#include <rcore/plicutils.hh>

#include <string>
#include <vector>
#include <stdexcept>

#if     __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3)
#define __UNUSED__      __attribute__ ((__unused__))
#else
#define __UNUSED__
#endif

namespace { // Anonymous

class PlicProxyBase {
  std::string m_object_url;
protected:
  static inline const std::string& url (const PlicProxyBase &obj) { return obj.m_object_url; }
public:
  explicit PlicProxyBase (const std::string &object_url) : m_object_url (object_url) {}
  virtual ~PlicProxyBase() {}
};

// FIXME:
typedef Rapicorn::Plic::FieldBuffer FieldBuffer;
typedef Rapicorn::Plic::FieldBuffer8 FieldBuffer8;
typedef Rapicorn::Plic::FieldBufferReader FieldBufferReader;
typedef Rapicorn::ProtoRecord ProtoRecord;
typedef Rapicorn::ProtoSequence ProtoSequence;
typedef Rapicorn::ProtoArg ProtoArg;
typedef Rapicorn::ProtoMessage ProtoMessage;
template<class CLASS> static inline const std::string&
Instance2Url (CLASS *obj)
{
  struct Wrapper : protected CLASS {
  static inline const std::string& url (const CLASS &obj) { return PlicProxyBase::url (obj); }
  };
  static std::string nullurl ("NULL");
  return obj ? Wrapper::url (*obj) : nullurl;
}
template<class CLASS> static inline const std::string&
Instance2Url (CLASS &obj)
{
  struct Wrapper : protected CLASS {
  static inline const std::string& url (const CLASS &obj) { return PlicProxyBase::url (obj); }
  };
  static std::string nullurl ("NULL");
  return &obj ? Wrapper::url (obj) : nullurl;
}
template<class CLASS> static inline std::string
Instance2StringCast (CLASS *obj)
{
  return dynamic_cast<const Rapicorn::Deletable*> (obj)->object_url();
}
template<class CLASS> static inline std::string
Instance2StringCast (const CLASS &obj)
{
  return dynamic_cast<const Rapicorn::Deletable*> (&obj)->object_url();
}
template<class CLASS> static inline CLASS*
Instance4StringCast (const std::string &objstring)
{
  struct _DeletableWrapper : public Rapicorn::Deletable {
    static Deletable* _from_object_url (const std::string &ou) { return from_object_url (ou); }
  };
  Rapicorn::Deletable *dobj = _DeletableWrapper::_from_object_url (objstring);
  CLASS *target = dobj ? dynamic_cast<CLASS*> (dobj) : NULL;
  if (!target)
    printerr ("NULL-CAST: %s -> %p -> %p\n", objstring.c_str(), dobj, target); // FIXME
  return target;
}
#define die()      (void) 0 // FIXME
#define THROW_ERROR()   throw std::runtime_error ("PLIC: Marshalling failed")
#define rope_check(cond,errmsg) do { if (!(cond)) { Rapicorn::printerr ("ROPE:error: %s\n", errmsg); return false; } } while (0)

static FieldBuffer* plic_call_remote (FieldBuffer*);
#ifndef HAVE_PLIC_CALL_REMOTE
static FieldBuffer* plic_call_remote (FieldBuffer *fb)
{ delete fb; return NULL; } // testing stub
#define HAVE_PLIC_CALL_REMOTE
#endif

} // Anonymous


// --- Interfaces ---

namespace MandatoryNamespace {
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence {
  std::vector<bool> single_bool;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct IntSequence {
  std::vector<int> numx;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct FloatSequence {
  std::vector<double> fractalvalue;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct StringSequence {
  std::vector<std::string> blurb;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct ExtensiveEnumSequence {
  std::vector<ExtensiveEnum> enum_elements;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct RecordSequence {
  std::vector<XFooRecord> repeatedfield;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct SequenceSequence {
  std::vector<IntSequence> moreints;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq {
  std::vector<NestedTypesRec> ntr;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};

namespace Inner {
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline InnerRecord () { x = 0; y = 0; }
};
} // Inner
struct Refer2Inner {
  Inner::InnerRecord r;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline Refer2Inner () { }
};
} // MandatoryNamespace

namespace OtherNamespace {
struct SomeRecord {
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline SomeRecord () { }
};
} // OtherNamespace

namespace Auxdata {
typedef int bar;
typedef double x;
typedef std::string s;
} // Auxdata

namespace InterfaceTests {

class UIWidgetArea : protected virtual PlicProxyBase {
protected:
  virtual /*Des*/         ~UIWidgetArea () = 0;
public:
  typedef Rapicorn::Signals::Signal<UIWidgetArea, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::Signal<UIWidgetArea, double (UIWidgetArea &ba1, int someint)> Signal_sample_signal;
  // Signal_void_signal sig_void_signal;
  // Signal_sample_signal sig_sample_signal;
  virtual double          simple_method ();
  virtual double          single_arg    (int n);
  virtual double          single_arg2   (int n = 5);
  virtual double          two_args      (int n,
                                         double r);
  virtual double          two_args2     (int n = 6,
                                         double r = 7.7);
  virtual double          multi_args    (int n,
                                         double r,
                                         int i,
                                         const std::string &s = "String ding",
                                         double y = 5);
  virtual double          self_method   (UIWidgetArea &ba1,
                                         UIWidgetArea &ba2);
  virtual void            void_method   ();
  virtual std::string     on_click2out  ();
  virtual void            on_click2in   (const std::string &command);
};

class Parent : protected virtual PlicProxyBase {
protected:
  virtual /*Des*/         ~Parent () = 0;
public:
};

class Child : protected virtual PlicProxyBase, public virtual Parent {
protected:
  virtual /*Des*/         ~Child () = 0;
public:
};

class Descendant : protected virtual PlicProxyBase, public virtual Child {
protected:
  virtual /*Des*/         ~Descendant () = 0;
public:
};

class GrandChild : protected virtual PlicProxyBase, public virtual Descendant {
protected:
  virtual /*Des*/         ~GrandChild () = 0;
public:
};
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord {
  int             int1;
  int             int2;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
  inline QuickRecord () { int1 = 0; int2 = 0; }
};
struct QuickSequence {
  std::vector<double> somefloat;
  bool proto_add  (Rapicorn::Plic::FieldBuffer&) const;
  bool proto_pop  (Rapicorn::Plic::FieldBufferReader&);
};

class MethodTestInterface : protected virtual PlicProxyBase {
protected:
  virtual /*Des*/         ~MethodTestInterface () = 0;
public:
  virtual void            method_with_void      ();
  virtual bool            method_with_bools     (bool input,
                                                 bool optval = 0);
  virtual int             method_with_ints      (int input,
                                                 int optval = -2);
  virtual double          method_with_floats    (double input,
                                                 double optval = 309.9);
  virtual std::string     method_with_string    (const std::string &input,
                                                 const std::string &optval = "default");
  virtual QuickEnum       method_with_enum      (QuickEnum input,
                                                 QuickEnum optval = QuickEnum (0));
  virtual QuickRecord     method_with_record    (const QuickRecord &input,
                                                 const QuickRecord &optval = QuickRecord());
  virtual QuickSequence   method_with_sequence  (const QuickSequence &input,
                                                 const QuickSequence &optval = QuickSequence());
  virtual GrandChild*     method_with_interface (GrandChild &input,
                                                 GrandChild &optval = *(GrandChild*) NULL);
};
} // InterfaceTests

namespace RapicornPlicTest {
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class ButtonArea : protected virtual PlicProxyBase {
protected:
  virtual /*Des*/         ~ButtonArea () = 0;
public:
  typedef Rapicorn::Signals::Signal<ButtonArea, bool (), Rapicorn::Signals::CollectorUntil0<bool> > Signal_check_activate;
  typedef Rapicorn::Signals::Signal<ButtonArea, void ()> Signal_activate;
  // Signal_check_activate sig_check_activate;
  // Signal_activate sig_activate;
};

class PureMethods : protected virtual PlicProxyBase {
protected:
  virtual /*Des*/         ~PureMethods () = 0;
public:
  virtual int             pure_method (double f) = 0;
};
} // RapicornPlicTest

// --- Client Stubs ---

namespace MandatoryNamespace {
bool
XFooRecord::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (11);
  fb.add_int64 (this->single_bool);
  fb.add_int64 (this->single_num);
  fb.add_double (this->single_float);
  fb.add_string (this->single_string);
  fb.add_int64 (this->sibling1);
  fb.add_int64 (this->sibling2);
  fb.add_int64 (this->multi1);
  fb.add_int64 (this->multi2);
  fb.add_int64 (this->multi3);
  fb.add_int64 (this->multi4);
  fb.add_evalue (this->enum_field);
  return true;
}
bool
XFooRecord::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 11) return false;
  this->single_bool = fbr.pop_int64();
  this->single_num = fbr.pop_int64();
  this->single_float = fbr.pop_double();
  this->single_string = fbr.pop_string();
  this->sibling1 = fbr.pop_int64();
  this->sibling2 = fbr.pop_int64();
  this->multi1 = fbr.pop_int64();
  this->multi2 = fbr.pop_int64();
  this->multi3 = fbr.pop_int64();
  this->multi4 = fbr.pop_int64();
  this->enum_field = ExtensiveEnum (fbr.pop_evalue());
  return true;
}

bool
XFooSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = single_bool.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 (this->single_bool[k]);
  }
  return true;
}
bool
XFooSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->single_bool.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->single_bool.push_back (fbr.pop_int64());
  }
  return true;
}

bool
IntSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = numx.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_int64 (this->numx[k]);
  }
  return true;
}
bool
IntSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->numx.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->numx.push_back (fbr.pop_int64());
  }
  return true;
}

bool
FloatSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = fractalvalue.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double (this->fractalvalue[k]);
  }
  return true;
}
bool
FloatSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->fractalvalue.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->fractalvalue.push_back (fbr.pop_double());
  }
  return true;
}

bool
StringSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = blurb.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_string (this->blurb[k]);
  }
  return true;
}
bool
StringSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->blurb.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->blurb.push_back (fbr.pop_string());
  }
  return true;
}

bool
ExtensiveEnumSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = enum_elements.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_evalue (this->enum_elements[k]);
  }
  return true;
}
bool
ExtensiveEnumSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->enum_elements.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->enum_elements.push_back (ExtensiveEnum (fbr.pop_evalue()));
  }
  return true;
}

bool
RecordSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = repeatedfield.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->repeatedfield[k].proto_add (fb)) return false;
  }
  return true;
}
bool
RecordSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->repeatedfield.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->repeatedfield[k].proto_pop (fbr)) return false;
  }
  return true;
}

bool
SequenceSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = moreints.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->moreints[k].proto_add (fb)) return false;
  }
  return true;
}
bool
SequenceSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->moreints.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->moreints[k].proto_pop (fbr)) return false;
  }
  return true;
}

bool
NestedTypesRec::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (2);
  if (!this->rec.proto_add (fb)) return false;
  if (!this->seq.proto_add (fb)) return false;
  return true;
}
bool
NestedTypesRec::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  if (!this->rec.proto_pop (fbr)) return false;
  if (!this->seq.proto_pop (fbr)) return false;
  return true;
}

bool
NestedTypesSeq::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = ntr.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->ntr[k].proto_add (fb)) return false;
  }
  return true;
}
bool
NestedTypesSeq::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->ntr.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!this->ntr[k].proto_pop (fbr)) return false;
  }
  return true;
}

bool
NewRecord::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (4);
  fb.add_int64 (this->i);
  fb.add_evalue (this->enum1);
  if (!this->xfs.proto_add (fb)) return false;
  if (!this->ntr.proto_add (fb)) return false;
  return true;
}
bool
NewRecord::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  this->i = fbr.pop_int64();
  this->enum1 = Enum1 (fbr.pop_evalue());
  if (!this->xfs.proto_pop (fbr)) return false;
  if (!this->ntr.proto_pop (fbr)) return false;
  return true;
}


namespace Inner {
bool
InnerRecord::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (3);
  fb.add_int64 (this->x);
  fb.add_int64 (this->y);
  if (!this->rec.proto_add (fb)) return false;
  return true;
}
bool
InnerRecord::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) return false;
  this->x = fbr.pop_int64();
  this->y = fbr.pop_int64();
  if (!this->rec.proto_pop (fbr)) return false;
  return true;
}

} // Inner
bool
Refer2Inner::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (1);
  if (!this->r.proto_add (fb)) return false;
  return true;
}
bool
Refer2Inner::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) return false;
  if (!this->r.proto_pop (fbr)) return false;
  return true;
}

} // MandatoryNamespace

namespace OtherNamespace {
bool
SomeRecord::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (4);
  if (!this->r1.proto_add (fb)) return false;
  if (!this->r2.proto_add (fb)) return false;
  if (!this->r3.proto_add (fb)) return false;
  if (!this->r4.proto_add (fb)) return false;
  return true;
}
bool
SomeRecord::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) return false;
  if (!this->r1.proto_pop (fbr)) return false;
  if (!this->r2.proto_pop (fbr)) return false;
  if (!this->r3.proto_pop (fbr)) return false;
  if (!this->r4.proto_pop (fbr)) return false;
  return true;
}

} // OtherNamespace

namespace InterfaceTests {
double
UIWidgetArea::simple_method ()
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 0), *fr = NULL;
  fb.add_int64 (0x02000001); // proc_id
  fb.add_object (Instance2Url (this));
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::single_arg (int arg_n)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 1), *fr = NULL;
  fb.add_int64 (0x02000002); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_n);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::single_arg2 (int arg_n)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 1), *fr = NULL;
  fb.add_int64 (0x02000003); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_n);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::two_args (int arg_n,
                        double arg_r)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000004); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::two_args2 (int arg_n,
                         double arg_r)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000005); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::multi_args (int arg_n,
                          double arg_r,
                          int arg_i,
                          const std::string &arg_s,
                          double arg_y)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 5), *fr = NULL;
  fb.add_int64 (0x02000006); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_n);
  fb.add_double (arg_r);
  fb.add_int64 (arg_i);
  fb.add_string (arg_s);
  fb.add_double (arg_y);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
double
UIWidgetArea::self_method (UIWidgetArea &arg_ba1,
                           UIWidgetArea &arg_ba2)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000007); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_object (Instance2Url (arg_ba1));
  fb.add_object (Instance2Url (arg_ba2));
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
void
UIWidgetArea::void_method ()
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 0);
  fb.add_int64 (0x01000008); // proc_id
  fb.add_object (Instance2Url (this));
  plic_call_remote (&fb); // deletes fb
}
std::string
UIWidgetArea::on_click2out ()
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 0), *fr = NULL;
  fb.add_int64 (0x02000009); // proc_id
  fb.add_object (Instance2Url (this));
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  std::string retval = frr.pop_string();
  return retval;
}
void
UIWidgetArea::on_click2in (const std::string &arg_command)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 1);
  fb.add_int64 (0x0100000a); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_string (arg_command);
  plic_call_remote (&fb); // deletes fb
}
bool
QuickRecord::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  Rapicorn::Plic::FieldBuffer &fb = dst.add_rec (2);
  fb.add_int64 (this->int1);
  fb.add_int64 (this->int2);
  return true;
}
bool
QuickRecord::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) return false;
  this->int1 = fbr.pop_int64();
  this->int2 = fbr.pop_int64();
  return true;
}

bool
QuickSequence::proto_add (Rapicorn::Plic::FieldBuffer &dst) const
{
  const size_t len = somefloat.size();
  Rapicorn::Plic::FieldBuffer &fb = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    fb.add_double (this->somefloat[k]);
  }
  return true;
}
bool
QuickSequence::proto_pop (Rapicorn::Plic::FieldBufferReader &src)
{
  Rapicorn::Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  this->somefloat.reserve (len);
  for (size_t k = 0; k < len; k++) {
    this->somefloat.push_back (fbr.pop_double());
  }
  return true;
}

void
MethodTestInterface::method_with_void ()
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 0);
  fb.add_int64 (0x0100000b); // proc_id
  fb.add_object (Instance2Url (this));
  plic_call_remote (&fb); // deletes fb
}
bool
MethodTestInterface::method_with_bools (bool arg_input,
                                        bool arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x0200000c); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_input);
  fb.add_int64 (arg_optval);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  bool retval = frr.pop_int64();
  return retval;
}
int
MethodTestInterface::method_with_ints (int arg_input,
                                       int arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x0200000d); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_int64 (arg_input);
  fb.add_int64 (arg_optval);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  int retval = frr.pop_int64();
  return retval;
}
double
MethodTestInterface::method_with_floats (double arg_input,
                                         double arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x0200000e); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_double (arg_input);
  fb.add_double (arg_optval);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  double retval = frr.pop_double();
  return retval;
}
std::string
MethodTestInterface::method_with_string (const std::string &arg_input,
                                         const std::string &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x0200000f); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_string (arg_input);
  fb.add_string (arg_optval);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  std::string retval = frr.pop_string();
  return retval;
}
QuickEnum
MethodTestInterface::method_with_enum (QuickEnum arg_input,
                                       QuickEnum arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000010); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_evalue (arg_input);
  fb.add_evalue (arg_optval);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickEnum retval = QuickEnum (frr.pop_evalue());
  return retval;
}
QuickRecord
MethodTestInterface::method_with_record (const QuickRecord &arg_input,
                                         const QuickRecord &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000011); // proc_id
  fb.add_object (Instance2Url (this));
  if (!arg_input.proto_add (fb)) THROW_ERROR();
  if (!arg_optval.proto_add (fb)) THROW_ERROR();
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickRecord retval;
  if (!retval.proto_pop (frr)) THROW_ERROR();
  return retval;
}
QuickSequence
MethodTestInterface::method_with_sequence (const QuickSequence &arg_input,
                                           const QuickSequence &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000012); // proc_id
  fb.add_object (Instance2Url (this));
  if (!arg_input.proto_add (fb)) THROW_ERROR();
  if (!arg_optval.proto_add (fb)) THROW_ERROR();
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  QuickSequence retval;
  if (!retval.proto_pop (frr)) THROW_ERROR();
  return retval;
}
GrandChild*
MethodTestInterface::method_with_interface (GrandChild &arg_input,
                                            GrandChild &arg_optval)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 2), *fr = NULL;
  fb.add_int64 (0x02000013); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_object (Instance2Url (arg_input));
  fb.add_object (Instance2Url (arg_optval));
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  GrandChild *retval = Instance4StringCast<GrandChild> (frr.pop_object());
  return retval;
}
} // InterfaceTests

namespace RapicornPlicTest {
int
PureMethods::pure_method (double arg_f)
{
  FieldBuffer &fb = *FieldBuffer::_new (1 + 1 + 1), *fr = NULL;
  fb.add_int64 (0x02000014); // proc_id
  fb.add_object (Instance2Url (this));
  fb.add_double (arg_f);
  fr = plic_call_remote (&fb); // deletes fb
  FieldBufferReader frr (*fr);
  frr.skip(); // proc_id
  int retval = frr.pop_int64();
  return retval;
}

// --- Server Stubs ---
} // RapicornPlicTest

namespace MandatoryNamespace {

namespace Inner {
} // Inner
} // MandatoryNamespace

namespace OtherNamespace {
} // OtherNamespace

namespace InterfaceTests {
static bool
call_UIWidgetArea_simple_method (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 0) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  double rval = self->simple_method ();
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_single_arg (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 1) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double rval = self->single_arg (arg_n);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_single_arg2 (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 1) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double rval = self->single_arg2 (arg_n);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_two_args (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double arg_r = fbr.pop_double();
  double rval = self->two_args (arg_n, arg_r);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_two_args2 (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double arg_r = fbr.pop_double();
  double rval = self->two_args2 (arg_n, arg_r);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_multi_args (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 5) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  int arg_n = fbr.pop_int64();
  double arg_r = fbr.pop_double();
  int arg_i = fbr.pop_int64();
  std::string arg_s = fbr.pop_string();
  double arg_y = fbr.pop_double();
  double rval = self->multi_args (arg_n, arg_r, arg_i, arg_s, arg_y);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_self_method (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  UIWidgetArea *arg_ba1 = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  UIWidgetArea *arg_ba2 = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  double rval = self->self_method (*arg_ba1, *arg_ba2);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_UIWidgetArea_void_method (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 0) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  self->void_method ();
  return true;
}
static bool
call_UIWidgetArea_on_click2out (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 0) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  std::string rval = self->on_click2out ();
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_string (rval);
  return true;
}
static bool
call_UIWidgetArea_on_click2in (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 1) return false;
  UIWidgetArea *self;
  self = Instance4StringCast<UIWidgetArea> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  std::string arg_command = fbr.pop_string();
  self->on_click2in (arg_command);
  return true;
}





static bool
call_MethodTestInterface_method_with_void (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 0) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  self->method_with_void ();
  return true;
}
static bool
call_MethodTestInterface_method_with_bools (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  bool arg_input = fbr.pop_int64();
  bool arg_optval = fbr.pop_int64();
  bool rval = self->method_with_bools (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_int64 (rval);
  return true;
}
static bool
call_MethodTestInterface_method_with_ints (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  int arg_input = fbr.pop_int64();
  int arg_optval = fbr.pop_int64();
  int rval = self->method_with_ints (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_int64 (rval);
  return true;
}
static bool
call_MethodTestInterface_method_with_floats (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  double arg_input = fbr.pop_double();
  double arg_optval = fbr.pop_double();
  double rval = self->method_with_floats (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_double (rval);
  return true;
}
static bool
call_MethodTestInterface_method_with_string (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  std::string arg_input = fbr.pop_string();
  std::string arg_optval = fbr.pop_string();
  std::string rval = self->method_with_string (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_string (rval);
  return true;
}
static bool
call_MethodTestInterface_method_with_enum (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  QuickEnum arg_input = QuickEnum (fbr.pop_evalue());
  QuickEnum arg_optval = QuickEnum (fbr.pop_evalue());
  QuickEnum rval = self->method_with_enum (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_evalue (rval);
  return true;
}
static bool
call_MethodTestInterface_method_with_record (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  QuickRecord arg_input;
  if (!arg_input.proto_pop (fbr)) return false;
  QuickRecord arg_optval;
  if (!arg_optval.proto_pop (fbr)) return false;
  QuickRecord rval = self->method_with_record (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  if (!rval.proto_add (rb)) return false;
  return true;
}
static bool
call_MethodTestInterface_method_with_sequence (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  QuickSequence arg_input;
  if (!arg_input.proto_pop (fbr)) return false;
  QuickSequence arg_optval;
  if (!arg_optval.proto_pop (fbr)) return false;
  QuickSequence rval = self->method_with_sequence (arg_input, arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  if (!rval.proto_add (rb)) return false;
  return true;
}
static bool
call_MethodTestInterface_method_with_interface (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 2) return false;
  MethodTestInterface *self;
  self = Instance4StringCast<MethodTestInterface> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  GrandChild *arg_input = Instance4StringCast<GrandChild> (fbr.pop_object());
  GrandChild *arg_optval = Instance4StringCast<GrandChild> (fbr.pop_object());
  GrandChild *rval = self->method_with_interface (*arg_input, *arg_optval);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_object (Instance2Url (rval));
  return true;
}

} // InterfaceTests

namespace RapicornPlicTest {

static bool
call_PureMethods_pure_method (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  Rapicorn::Plic::FieldBufferReader fbr (fb);
  fbr.skip(); // proc_id
  if (fbr.remaining() != 1 + 1) return false;
  PureMethods *self;
  self = Instance4StringCast<PureMethods> (fbr.pop_object());
  rope_check (self, "self must be non-NULL");
  double arg_f = fbr.pop_double();
  int rval = self->pure_method (arg_f);
  rb.add_int64 (0x02000000); // proc_id for return value
  rb.add_int64 (rval);
  return true;
}

} // RapicornPlicTest

static bool __UNUSED__
plic_call_wrapper_switch (const Rapicorn::Plic::FieldBuffer &fb, Rapicorn::Plic::FieldBuffer &rb)
{
  switch (fb.first_id()) {
  case 0x02000001: // UIWidgetArea::simple_method
    return InterfaceTests::call_UIWidgetArea_simple_method (fb, rb);
  case 0x02000002: // UIWidgetArea::single_arg
    return InterfaceTests::call_UIWidgetArea_single_arg (fb, rb);
  case 0x02000003: // UIWidgetArea::single_arg2
    return InterfaceTests::call_UIWidgetArea_single_arg2 (fb, rb);
  case 0x02000004: // UIWidgetArea::two_args
    return InterfaceTests::call_UIWidgetArea_two_args (fb, rb);
  case 0x02000005: // UIWidgetArea::two_args2
    return InterfaceTests::call_UIWidgetArea_two_args2 (fb, rb);
  case 0x02000006: // UIWidgetArea::multi_args
    return InterfaceTests::call_UIWidgetArea_multi_args (fb, rb);
  case 0x02000007: // UIWidgetArea::self_method
    return InterfaceTests::call_UIWidgetArea_self_method (fb, rb);
  case 0x01000008: // UIWidgetArea::void_method
    return InterfaceTests::call_UIWidgetArea_void_method (fb, rb);
  case 0x02000009: // UIWidgetArea::on_click2out
    return InterfaceTests::call_UIWidgetArea_on_click2out (fb, rb);
  case 0x0100000a: // UIWidgetArea::on_click2in
    return InterfaceTests::call_UIWidgetArea_on_click2in (fb, rb);
  case 0x0100000b: // MethodTestInterface::method_with_void
    return InterfaceTests::call_MethodTestInterface_method_with_void (fb, rb);
  case 0x0200000c: // MethodTestInterface::method_with_bools
    return InterfaceTests::call_MethodTestInterface_method_with_bools (fb, rb);
  case 0x0200000d: // MethodTestInterface::method_with_ints
    return InterfaceTests::call_MethodTestInterface_method_with_ints (fb, rb);
  case 0x0200000e: // MethodTestInterface::method_with_floats
    return InterfaceTests::call_MethodTestInterface_method_with_floats (fb, rb);
  case 0x0200000f: // MethodTestInterface::method_with_string
    return InterfaceTests::call_MethodTestInterface_method_with_string (fb, rb);
  case 0x02000010: // MethodTestInterface::method_with_enum
    return InterfaceTests::call_MethodTestInterface_method_with_enum (fb, rb);
  case 0x02000011: // MethodTestInterface::method_with_record
    return InterfaceTests::call_MethodTestInterface_method_with_record (fb, rb);
  case 0x02000012: // MethodTestInterface::method_with_sequence
    return InterfaceTests::call_MethodTestInterface_method_with_sequence (fb, rb);
  case 0x02000013: // MethodTestInterface::method_with_interface
    return InterfaceTests::call_MethodTestInterface_method_with_interface (fb, rb);
  case 0x02000014: // PureMethods::pure_method
    return RapicornPlicTest::call_PureMethods_pure_method (fb, rb);
  default:
    die();
  }
  return false;
}


// --- Interface Implementation Helpers ---

namespace InterfaceTests {
UIWidgetArea::~UIWidgetArea () {}

Parent::~Parent () {}

Child::~Child () {}

Descendant::~Descendant () {}

GrandChild::~GrandChild () {}

MethodTestInterface::~MethodTestInterface () {}

} // InterfaceTests

namespace RapicornPlicTest {
ButtonArea::~ButtonArea () {}

PureMethods::~PureMethods () {}

} // RapicornPlicTest
