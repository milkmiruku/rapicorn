/* --- Generated by Rapicorn-CppStub --- */

#include <core/rapicornsignal.hh>
#include <string>
#include <vector>

class ProtoRecord;
class ProtoSequence;
class ProtoArg;
class ProtoMessage;

// FIXME:
#include "protocol-pb2.hh"
typedef Rapicorn::Rope::RemoteProcedure RemoteProcedure;
typedef Rapicorn::Rope::RemoteProcedure_Sequence RemoteProcedure_Sequence;
typedef Rapicorn::Rope::RemoteProcedure_Record RemoteProcedure_Record;
typedef Rapicorn::Rope::RemoteProcedure_Argument RemoteProcedure_Argument;
static inline RemoteProcedure_Record& RPRecordCast (ProtoRecord &r) {
  return *(RemoteProcedure_Record*) &r;
}
static inline const RemoteProcedure_Record& RPRecordCast (const ProtoRecord &r) {
  return *(const RemoteProcedure_Record*) &r;
}
static inline ProtoRecord& ProtoRecordCast (RemoteProcedure_Record &r) {
  return *(ProtoRecord*) &r;
}
static inline const ProtoRecord& ProtoRecordCast (const RemoteProcedure_Record &r) {
  return *(const ProtoRecord*) &r;
}
static inline RemoteProcedure_Sequence& RPSequenceCast (ProtoSequence &r) {
  return *(RemoteProcedure_Sequence*) &r;
}
static inline const RemoteProcedure_Sequence& RPSequenceCast (const ProtoSequence &r) {
  return *(const RemoteProcedure_Sequence*) &r;
}
static inline ProtoSequence& ProtoSequenceCast (RemoteProcedure_Sequence &r) {
  return *(ProtoSequence*) &r;
}
static inline const ProtoSequence& ProtoSequenceCast (const RemoteProcedure_Sequence &r) {
  return *(const ProtoSequence*) &r;
}
template<class CLASS> static inline std::string Instance2StringCast (const CLASS &obj) {
  return ""; // FIXME
}
#define die()      (void) 0 // FIXME

// Base classes...


// --- Skeletons ---
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  bool to_proto   (ProtoRecord &) const;
  bool from_proto (const ProtoRecord &);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence {
  std::vector<bool> single_bool;
  bool to_proto   (ProtoSequence &) const;
  bool from_proto (const ProtoSequence &);
};
struct ExtensiveEnumSequence {
  std::vector<ExtensiveEnum> enum_elements;
  bool to_proto   (ProtoSequence &) const;
  bool from_proto (const ProtoSequence &);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool to_proto   (ProtoRecord &) const;
  bool from_proto (const ProtoRecord &);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq {
  std::vector<NestedTypesRec> ntr;
  bool to_proto   (ProtoSequence &) const;
  bool from_proto (const ProtoSequence &);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool to_proto   (ProtoRecord &) const;
  bool from_proto (const ProtoRecord &);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool to_proto   (ProtoRecord &) const;
  bool from_proto (const ProtoRecord &);
  inline InnerRecord () { x = 0; y = 0; }
};
struct Refer2Inner {
  InnerRecord     r;
  bool to_proto   (ProtoRecord &) const;
  bool from_proto (const ProtoRecord &);
  inline Refer2Inner () { }
};
struct SomeRecord {
  NewRecord       r1;
  NewRecord       r2;
  InnerRecord     r3;
  InnerRecord     r4;
  bool to_proto   (ProtoRecord &) const;
  bool from_proto (const ProtoRecord &);
  inline SomeRecord () { }
};
typedef int bar;
typedef double x;
typedef std::string s;

class UIWidgetArea {
public:
  typedef Rapicorn::Signals::Signal<UIWidgetArea, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::Signal<UIWidgetArea, double (UIWidgetArea &ba1, int someint)> Signal_sample_signal;
  Signal_void_signal sig_void_signal;
  Signal_sample_signal sig_sample_signal;
  double          simple_method ();
  double          single_arg (int n);
  double          single_arg2 (int n);
  double          two_args (int n,
                            double r);
  double          two_args2 (int n,
                             double r);
  double          multi_args (int n,
                              double r,
                              int i,
                              std::string s,
                              double y);
  double          self_method (UIWidgetArea &ba1,
                               UIWidgetArea &ba2);
  void            void_method ();
  std::string     on_click2out ();
  void            on_click2in (std::string command);
};

class Parent {
public:
};

class Child : public Parent {
public:
};

class Descendant : public Child {
public:
};

class GrandChild : public Descendant {
public:
};

class SomeInterface {
public:
  void            use_record (SomeRecord rr);
};
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class ButtonArea {
public:
  typedef Rapicorn::Signals::Signal<ButtonArea, bool (), Rapicorn::Signals::CollectorUntil0<bool> > Signal_check_activate;
  typedef Rapicorn::Signals::Signal<ButtonArea, void ()> Signal_activate;
  Signal_check_activate sig_check_activate;
  Signal_activate sig_activate;
};

// --- Stubs ---
bool XFooRecord::to_proto (ProtoRecord &dst) const {
  RemoteProcedure_Record &rpr = RPRecordCast (dst);
  RemoteProcedure_Argument *field; int field_counter = 0;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (single_bool);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (single_num);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::FLOAT);
  field->set_vdouble (single_float);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::STRING);
  field->set_vstring (single_string);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (sibling1);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (sibling2);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (multi1);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (multi2);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (multi3);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (multi4);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::ENUM);
  field->set_vint64 (enum_field);
  return true;
}
bool XFooRecord::from_proto (const ProtoRecord &src) {
  const RemoteProcedure_Record &rpr = RPRecordCast (src);
  if (rpr.fields_size() < 11) return false;
  const RemoteProcedure_Argument *field;
  field = &rpr.fields (0);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  single_bool = field->vint64();
  field = &rpr.fields (1);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  single_num = field->vint64();
  field = &rpr.fields (2);
  if (field->type() != RemoteProcedure::FLOAT) return false;
  if (!field->has_vdouble()) return false;  single_float = field->vdouble();
  field = &rpr.fields (3);
  if (field->type() != RemoteProcedure::STRING) return false;
  if (!field->has_vstring()) return false;  single_string = field->vstring();
  field = &rpr.fields (4);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  sibling1 = field->vint64();
  field = &rpr.fields (5);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  sibling2 = field->vint64();
  field = &rpr.fields (6);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  multi1 = field->vint64();
  field = &rpr.fields (7);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  multi2 = field->vint64();
  field = &rpr.fields (8);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  multi3 = field->vint64();
  field = &rpr.fields (9);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  multi4 = field->vint64();
  field = &rpr.fields (10);
  if (field->type() != RemoteProcedure::ENUM) return false;
  if (!field->has_vint64()) return false;  enum_field = ExtensiveEnum (field->vint64());
  return true;
}

bool XFooSequence::to_proto (ProtoSequence &dst) const {
  RemoteProcedure_Sequence &rps = RPSequenceCast (dst);
  const size_t len = single_bool.size();
  for (size_t k = 0; k < len; k++) {
    rps.add_vint64 (single_bool[k]);
  }
  return true;
}
bool XFooSequence::from_proto (const ProtoSequence &src) {
  const RemoteProcedure_Sequence &rps = RPSequenceCast (src);
  const size_t len = rps.vint64_size();
  for (size_t k = 0; k < len; k++) {
    single_bool.push_back (rps.vint64 (k));
  }
  return true;
}

bool ExtensiveEnumSequence::to_proto (ProtoSequence &dst) const {
  RemoteProcedure_Sequence &rps = RPSequenceCast (dst);
  const size_t len = enum_elements.size();
  for (size_t k = 0; k < len; k++) {
    rps.add_vint64 (enum_elements[k]);
  }
  return true;
}
bool ExtensiveEnumSequence::from_proto (const ProtoSequence &src) {
  const RemoteProcedure_Sequence &rps = RPSequenceCast (src);
  const size_t len = rps.vint64_size();
  for (size_t k = 0; k < len; k++) {
    enum_elements.push_back (ExtensiveEnum (rps.vint64 (k)));
  }
  return true;
}

bool NestedTypesRec::to_proto (ProtoRecord &dst) const {
  RemoteProcedure_Record &rpr = RPRecordCast (dst);
  RemoteProcedure_Argument *field; int field_counter = 0;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!rec.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::SEQUENCE);
  if (!seq.to_proto (ProtoSequenceCast (*field->mutable_vseq()))) return false;
  return true;
}
bool NestedTypesRec::from_proto (const ProtoRecord &src) {
  const RemoteProcedure_Record &rpr = RPRecordCast (src);
  if (rpr.fields_size() < 2) return false;
  const RemoteProcedure_Argument *field;
  field = &rpr.fields (0);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !rec.from_proto (ProtoRecordCast (field->vrec()))) return false;
  field = &rpr.fields (1);
  if (field->type() != RemoteProcedure::SEQUENCE) return false;
  if (!field->has_vseq() || !seq.from_proto (ProtoSequenceCast (field->vseq()))) return false;
  return true;
}

bool NestedTypesSeq::to_proto (ProtoSequence &dst) const {
  RemoteProcedure_Sequence &rps = RPSequenceCast (dst);
  const size_t len = ntr.size();
  for (size_t k = 0; k < len; k++) {
    rps.add_vrec();    if (!ntr[k].to_proto (ProtoRecordCast (*rps.mutable_vrec (k)))) return false;
  }
  return true;
}
bool NestedTypesSeq::from_proto (const ProtoSequence &src) {
  const RemoteProcedure_Sequence &rps = RPSequenceCast (src);
  const size_t len = rps.vrec_size();
  ntr.resize (len);
  for (size_t k = 0; k < len; k++) {
    if (!ntr[k].from_proto (ProtoRecordCast (rps.vrec (k)))) return false;
  }
  return true;
}

bool NewRecord::to_proto (ProtoRecord &dst) const {
  RemoteProcedure_Record &rpr = RPRecordCast (dst);
  RemoteProcedure_Argument *field; int field_counter = 0;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (i);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::ENUM);
  field->set_vint64 (enum1);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::SEQUENCE);
  if (!xfs.to_proto (ProtoSequenceCast (*field->mutable_vseq()))) return false;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!ntr.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  return true;
}
bool NewRecord::from_proto (const ProtoRecord &src) {
  const RemoteProcedure_Record &rpr = RPRecordCast (src);
  if (rpr.fields_size() < 4) return false;
  const RemoteProcedure_Argument *field;
  field = &rpr.fields (0);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  i = field->vint64();
  field = &rpr.fields (1);
  if (field->type() != RemoteProcedure::ENUM) return false;
  if (!field->has_vint64()) return false;  enum1 = Enum1 (field->vint64());
  field = &rpr.fields (2);
  if (field->type() != RemoteProcedure::SEQUENCE) return false;
  if (!field->has_vseq() || !xfs.from_proto (ProtoSequenceCast (field->vseq()))) return false;
  field = &rpr.fields (3);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !ntr.from_proto (ProtoRecordCast (field->vrec()))) return false;
  return true;
}

bool InnerRecord::to_proto (ProtoRecord &dst) const {
  RemoteProcedure_Record &rpr = RPRecordCast (dst);
  RemoteProcedure_Argument *field; int field_counter = 0;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (x);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::INT);
  field->set_vint64 (y);
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!rec.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  return true;
}
bool InnerRecord::from_proto (const ProtoRecord &src) {
  const RemoteProcedure_Record &rpr = RPRecordCast (src);
  if (rpr.fields_size() < 3) return false;
  const RemoteProcedure_Argument *field;
  field = &rpr.fields (0);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  x = field->vint64();
  field = &rpr.fields (1);
  if (field->type() != RemoteProcedure::INT) return false;
  if (!field->has_vint64()) return false;  y = field->vint64();
  field = &rpr.fields (2);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !rec.from_proto (ProtoRecordCast (field->vrec()))) return false;
  return true;
}

bool Refer2Inner::to_proto (ProtoRecord &dst) const {
  RemoteProcedure_Record &rpr = RPRecordCast (dst);
  RemoteProcedure_Argument *field; int field_counter = 0;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!r.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  return true;
}
bool Refer2Inner::from_proto (const ProtoRecord &src) {
  const RemoteProcedure_Record &rpr = RPRecordCast (src);
  if (rpr.fields_size() < 1) return false;
  const RemoteProcedure_Argument *field;
  field = &rpr.fields (0);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !r.from_proto (ProtoRecordCast (field->vrec()))) return false;
  return true;
}

bool SomeRecord::to_proto (ProtoRecord &dst) const {
  RemoteProcedure_Record &rpr = RPRecordCast (dst);
  RemoteProcedure_Argument *field; int field_counter = 0;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!r1.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!r2.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!r3.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  rpr.add_fields(); field = rpr.mutable_fields (field_counter++);
  field->set_type (RemoteProcedure::RECORD);
  if (!r4.to_proto (ProtoRecordCast (*field->mutable_vrec()))) return false;
  return true;
}
bool SomeRecord::from_proto (const ProtoRecord &src) {
  const RemoteProcedure_Record &rpr = RPRecordCast (src);
  if (rpr.fields_size() < 4) return false;
  const RemoteProcedure_Argument *field;
  field = &rpr.fields (0);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !r1.from_proto (ProtoRecordCast (field->vrec()))) return false;
  field = &rpr.fields (1);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !r2.from_proto (ProtoRecordCast (field->vrec()))) return false;
  field = &rpr.fields (2);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !r3.from_proto (ProtoRecordCast (field->vrec()))) return false;
  field = &rpr.fields (3);
  if (field->type() != RemoteProcedure::RECORD) return false;
  if (!field->has_vrec() || !r4.from_proto (ProtoRecordCast (field->vrec()))) return false;
  return true;
}

double UIWidgetArea::simple_method () {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0001);
  rp.set_needs_return (1);
  return 0; // FIXME
}
double UIWidgetArea::single_arg (int n) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0002);
  rp.set_needs_return (1);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INT);
  arg->set_vint64 (n);
  return 0; // FIXME
}
double UIWidgetArea::single_arg2 (int n) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0003);
  rp.set_needs_return (1);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INT);
  arg->set_vint64 (n);
  return 0; // FIXME
}
double UIWidgetArea::two_args (int n,
                               double r) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0004);
  rp.set_needs_return (1);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INT);
  arg->set_vint64 (n);
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::FLOAT);
  arg->set_vdouble (r);
  return 0; // FIXME
}
double UIWidgetArea::two_args2 (int n,
                                double r) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0005);
  rp.set_needs_return (1);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INT);
  arg->set_vint64 (n);
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::FLOAT);
  arg->set_vdouble (r);
  return 0; // FIXME
}
double UIWidgetArea::multi_args (int n,
                                 double r,
                                 int i,
                                 std::string s,
                                 double y) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0006);
  rp.set_needs_return (1);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INT);
  arg->set_vint64 (n);
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::FLOAT);
  arg->set_vdouble (r);
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INT);
  arg->set_vint64 (i);
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::STRING);
  arg->set_vstring (s);
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::FLOAT);
  arg->set_vdouble (y);
  return 0; // FIXME
}
double UIWidgetArea::self_method (UIWidgetArea &ba1,
                                  UIWidgetArea &ba2) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0007);
  rp.set_needs_return (1);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INTERFACE);
  arg->set_vstring (Instance2StringCast (ba1));
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::INTERFACE);
  arg->set_vstring (Instance2StringCast (ba2));
  return 0; // FIXME
}
void UIWidgetArea::void_method () {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0008);
  rp.set_needs_return (0);
}
std::string UIWidgetArea::on_click2out () {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def0009);
  rp.set_needs_return (1);
  return 0; // FIXME
}
void UIWidgetArea::on_click2in (std::string command) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def000a);
  rp.set_needs_return (0);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::STRING);
  arg->set_vstring (command);
}





void SomeInterface::use_record (SomeRecord rr) {
  RemoteProcedure rp;
  rp.set_proc_id (0x0def000b);
  rp.set_needs_return (0);
  RemoteProcedure_Argument *arg; int arg_counter = 0;
  rp.add_args(); arg = rp.mutable_args (arg_counter++);
  arg->set_type (RemoteProcedure::RECORD);
  if (!rr.to_proto (ProtoRecordCast (*arg->mutable_vrec()))) die();
}


