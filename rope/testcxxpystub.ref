/* --- Generated by Rapicorn-CxxPyStub --- */

#include <Python.h> // must be included first to configure std headers
#include <string>

#include <rapicorn-core.hh>

#define None_INCREF()   ({ Py_INCREF (Py_None); Py_None; })
#define GOTO_ERROR()    goto error
#define ERRORif(cond)   if (cond) goto error
#define ERRORifpy()     if (PyErr_Occurred()) goto error
#define ERRORpy(msg)    do { PyErr_Format (PyExc_RuntimeError, msg); goto error; } while (0)
#define ERRORifnotret(fr) do { if (PLIC_UNLIKELY (!fr) || \
                                   PLIC_UNLIKELY (!Plic::msgid_is_result (Plic::MessageId (fr->first_id())))) { \
                                 PyErr_Format_from_PLIC_error (fr); \
                                 goto error; } } while (0)

using Plic::uint64;
using Plic::FieldBuffer;
using Plic::FieldReader;

static PyObject*
PyErr_Format_from_PLIC_error (const FieldBuffer *fr)
{
  if (!fr)
    return PyErr_Format (PyExc_RuntimeError, "PLIC: missing return value");
  FieldReader frr (*fr);
  const uint64 msgid = frr.pop_int64();
  frr.pop_int64(); // hashl
  if (Plic::msgid_is_error (Plic::MessageId (msgid)))
    {
      std::string msg = frr.pop_string(), domain = frr.pop_string();
      if (domain.size()) domain += ": ";
      msg = domain + msg;
      return PyErr_Format (PyExc_RuntimeError, "%s", msg.c_str());
    }
  return PyErr_Format (PyExc_RuntimeError, "PLIC: garbage return: 0x%s", fr->first_id_str().c_str());
}

static inline PY_LONG_LONG
PyIntLong_AsLongLong (PyObject *intlong)
{
  if (PyInt_Check (intlong))
    return PyInt_AS_LONG (intlong);
  else
    return PyLong_AsLongLong (intlong);
}

static inline std::string
PyString_As_std_string (PyObject *pystr)
{
  char *s = NULL;
  Py_ssize_t len = 0;
  PyString_AsStringAndSize (pystr, &s, &len);
  return std::string (s, len);
}

static inline Plic::uint64
PyAttr_As_uint64 (PyObject *pyobj, const char *attr_name)
{
  PyObject *o = PyObject_GetAttrString (pyobj, attr_name);
  if (o)
     return PyLong_AsUnsignedLongLong (o);
  return 0;
}

static inline PyObject*
PyString_From_std_string (const std::string &s)
{
  return PyString_FromStringAndSize (s.data(), s.size());
}

static inline int
PyDict_Take_Item (PyObject *pydict, const char *key, PyObject **pyitemp)
{
  int r = PyDict_SetItemString (pydict, key, *pyitemp);
  if (r >= 0)
    {
      Py_DECREF (*pyitemp);
      *pyitemp = NULL;
    }
  return r;
}

static PyObject *_plic_object_factory_callable = NULL;

static PyObject*
_plic___register_object_factory_callable (PyObject *pyself, PyObject *pyargs)
{
  if (_plic_object_factory_callable)
    return PyErr_Format (PyExc_RuntimeError, "object_factory_callable already registered");
  if (PyTuple_Size (pyargs) != 1)
    return PyErr_Format (PyExc_RuntimeError, "wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);
  if (!PyCallable_Check (item))
    return PyErr_Format (PyExc_RuntimeError, "argument must be callable");
  Py_INCREF (item);
  _plic_object_factory_callable = item;
  return None_INCREF();
}

static inline PyObject*
plic_PyObject_4uint64 (const char *type_name, uint64 rpc_id)
{
  if (!_plic_object_factory_callable)
    return PyErr_Format (PyExc_RuntimeError, "object_factory_callable not registered");
  PyObject *result = NULL, *pyid = PyLong_FromUnsignedLongLong (rpc_id);
  if (pyid) {
    PyObject *tuple = PyTuple_New (2);
    if (tuple) {
      PyTuple_SET_ITEM (tuple, 0, PyString_FromString (type_name));
      PyTuple_SET_ITEM (tuple, 1, pyid), pyid = NULL;
      result = PyObject_Call (_plic_object_factory_callable, tuple, NULL);
      Py_DECREF (tuple);
    }
    Py_XDECREF (pyid);
  }
  return result;
}

#ifndef PLIC_CONNECTION
#define PLIC_CONNECTION()       (*(Plic::Connection*)NULL)
#endif

enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord;
struct NestedTypesRec;
struct NewRecord;
struct InnerRecord;
struct Refer2Inner;
struct SomeRecord;
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord;
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
static RAPICORN_UNUSED bool
plic_pyXFooRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (14);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "single_bool"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_num"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_float"); ERRORif (!item);
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_string"); ERRORif (!item);
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "sibling1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "sibling2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi3"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi4"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "enum_field"); ERRORif (!item);
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface1"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface2"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface3"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyXFooRecord_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 14) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "single_bool", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "single_num", &pyfoR) < 0) goto error;
  pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "single_float", &pyfoR) < 0) goto error;
  pyfoR = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "single_string", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "sibling1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "sibling2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi3", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi4", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "enum_field", &pyfoR) < 0) goto error;
  pyfoR = plic_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface1", &pyfoR) < 0) goto error;
  pyfoR = plic_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface2", &pyfoR) < 0) goto error;
  pyfoR = plic_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface3", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyXFooSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyXFooSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyIntSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyIntSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyFloatSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyFloatSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyStringSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyStringSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyExtensiveEnumSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyExtensiveEnumSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyRecordSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!plic_pyXFooRecord_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyRecordSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_pyXFooRecord_proto_pop (fbr); ERRORif (!pyfoR);
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pySequenceSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!plic_pyIntSequence_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pySequenceSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_pyIntSequence_proto_pop (fbr); ERRORif (!pyfoR);
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyInterfaceSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyInterfaceSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyNestedTypesRec_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "rec"); ERRORif (!item);
  if (!plic_pyXFooRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "seq"); ERRORif (!item);
  if (!plic_pyXFooSequence_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyNestedTypesRec_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = plic_pyXFooRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "rec", &pyfoR) < 0) goto error;
  pyfoR = plic_pyXFooSequence_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "seq", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyNestedTypesSeq_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!plic_pyNestedTypesRec_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyNestedTypesSeq_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_pyNestedTypesRec_proto_pop (fbr); ERRORif (!pyfoR);
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyNewRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "i"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "enum1"); ERRORif (!item);
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "xfs"); ERRORif (!item);
  if (!plic_pyXFooSequence_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "ntr"); ERRORif (!item);
  if (!plic_pyNestedTypesRec_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyNewRecord_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "i", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "enum1", &pyfoR) < 0) goto error;
  pyfoR = plic_pyXFooSequence_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "xfs", &pyfoR) < 0) goto error;
  pyfoR = plic_pyNestedTypesRec_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "ntr", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyInnerRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (3);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "x"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "y"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "rec"); ERRORif (!item);
  if (!plic_pyNewRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyInnerRecord_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "x", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "y", &pyfoR) < 0) goto error;
  pyfoR = plic_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "rec", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyRefer2Inner_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (1);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "r"); ERRORif (!item);
  if (!plic_pyInnerRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyRefer2Inner_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = plic_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pySomeRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "r1"); ERRORif (!item);
  if (!plic_pyNewRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r2"); ERRORif (!item);
  if (!plic_pyNewRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r3"); ERRORif (!item);
  if (!plic_pyInnerRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r4"); ERRORif (!item);
  if (!plic_pyInnerRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pySomeRecord_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = plic_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r1", &pyfoR) < 0) goto error;
  pyfoR = plic_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r2", &pyfoR) < 0) goto error;
  pyfoR = plic_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r3", &pyfoR) < 0) goto error;
  pyfoR = plic_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r4", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyQuickRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "int1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "int2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyQuickRecord_proto_pop (Plic::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "int1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "int2", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyQuickSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyQuickSequence_proto_pop (Plic::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static PyObject*
_plic_rpc_MandatoryNamespace__FirstInterface__void_func_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x209463c55becedadULL, 0x39ddfcb9aadc3c74ULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__simple_method_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x39a122b559d15903ULL, 0x0a95fe35b7a1de33ULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__single_arg_float_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3910395d202c93c2ULL, 0x9206a89acaaf2086ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__single_arg2_float_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3b5ae84b86dfa59cULL, 0x5d2ef3880b1fa360ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__two_args_float_int_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x359c33f1677a63ebULL, 0x3a05748016992575ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__two_args2_float_int_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3291a584ff9121b3ULL, 0xbd14f4bbc47fb2ccULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__multi_args_float_int_float_int_string_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 5), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3501ef84b7c1d9ffULL, 0x564566ab8a5e1b8bULL);
  if (PyTuple_Size (pyargs) != 1 + 5) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 3); // i
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 4); // s
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 5); // y
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__self_method_float_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x316521a2bcc037d0ULL, 0x43987053dab0c3c0ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // ba1
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // ba2
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__void_method_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x2e02c52c84773703ULL, 0x00027e452edb615cULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__on_click2out_string (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3e4f2ff4e1424783ULL, 0x439ed3d602e3946eULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyString_From_std_string (frr.pop_string()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__UIWidgetArea__on_click2in_void_string (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x2294f15cd15e9458ULL, 0x5e0ac9b493bb4f17ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // command
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
class _EventHandler_InterfaceTests__UIWidgetArea__void_signal_void : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__UIWidgetArea__void_signal_void() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__UIWidgetArea__void_signal_void (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__UIWidgetArea__void_signal_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x52ef738c2571d0f2ULL, 0x05b653adf0a80acfULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__UIWidgetArea__void_signal_void (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 2;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = plic_PyObject_4uint64 ("UIWidgetArea", fbr.pop_object()); ERRORifpy();
    PyTuple_SET_ITEM (tuple, 0, item);
    item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    PyTuple_SET_ITEM (tuple, 1, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x511bbb2e2b129d5bULL, 0xe7152819ec289550ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
static PyObject*
_plic_rpc_InterfaceTests__QuickIface__simple_function_void_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x2446078b004b9aabULL, 0x37d6c73a34ac7070ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // i
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_void_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x281392e54343bee9ULL, 0x0dbeb788728dbff4ULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3b68546991e25342ULL, 0xa71399caec9ccfc7ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_ints_int_int_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x39555e79a31047bfULL, 0x0f06b4f122a81e1dULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_floats_float_float_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x391dd7c671dada38ULL, 0x32ca18bc1bd39689ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_string_string_string_string (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3ad5eafe588b965aULL, 0x38c04145925d2963ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyString_From_std_string (frr.pop_string()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x387f08a5c150e6a7ULL, 0x83c133fcd2be3200ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_evalue()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3b59b493f287edf0ULL, 0x4771d353c78389d1ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  if (!plic_pyQuickRecord_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  if (!plic_pyQuickRecord_proto_add (item, fb)) goto error;
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = plic_pyQuickRecord_proto_pop (frr); ERRORif (!pyfoR);
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x34c9e8a686a7f261ULL, 0x9af099b173ac979cULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  if (!plic_pyQuickSequence_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  if (!plic_pyQuickSequence_proto_add (item, fb)) goto error;
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = plic_pyQuickSequence_proto_pop (frr); ERRORif (!pyfoR);
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x34619983babcee5bULL, 0x9875f78f28f381b7ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = plic_PyObject_4uint64 ("GrandChild", frr.pop_object()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_plic_rpc_InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3a2ab33a8358edcbULL, 0x7c028db9464052a0ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // iface0
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = plic_PyObject_4uint64 ("QuickIface", frr.pop_object()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
class _EventHandler_InterfaceTests__SignalTestInterface__void_result_void : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__void_result_void() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__void_result_void (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__void_result_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x535d5e95471873b6ULL, 0x7a9f5692ce00e007ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__void_result_void (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__bool_result_bool : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__bool_result_bool() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__bool_result_bool (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__bool_result_bool (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x51ffffa2f8db1b1bULL, 0x3e01434baf49eceeULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__bool_result_bool (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__int_result_int : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__int_result_int() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__int_result_int (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__int_result_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x51ac083cdc878affULL, 0x72ad7414773447a2ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__int_result_int (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__float_result_float : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__float_result_float() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__float_result_float (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__float_result_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5cc54429499b42b6ULL, 0x35e1fb7707130bcaULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__float_result_float (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__string_result_string : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__string_result_string() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__string_result_string (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__string_result_string (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5790f575b6cac788ULL, 0x27db8e3c014993a7ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__string_result_string (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x56fc6f3f4946e7b2ULL, 0x0fe0cc5f83d2ab84ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x50b723665ed298a5ULL, 0x32aa063680a4e3c0ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5ef00325dfcf4552ULL, 0x991130ecddd21730ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x58e8587c542d85ceULL, 0xe2b572e902c69f7cULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x59bb2da621bab28fULL, 0x32bc82e7eb9bc512ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__void_arg_void : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__void_arg_void() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__void_arg_void (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__void_arg_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x583dc36c7785c7f3ULL, 0xb330cefa4e8247a9ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__void_arg_void (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__bool_arg_void_bool : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__bool_arg_void_bool() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__bool_arg_void_bool (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__bool_arg_void_bool (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5f7ba898d12986bfULL, 0x8a1143a5f6dc85b8ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__bool_arg_void_bool (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__int_arg_void_int : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__int_arg_void_int() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__int_arg_void_int (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__int_arg_void_int (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5f91dc79c2bee013ULL, 0x809b90b2fad4ea0aULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__int_arg_void_int (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__float_arg_void_float : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__float_arg_void_float() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__float_arg_void_float (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__float_arg_void_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5d5c43cd47b258caULL, 0xb0d5fde097d6d12cULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__float_arg_void_float (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__string_arg_void_string : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__string_arg_void_string() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__string_arg_void_string (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__string_arg_void_string (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x53de7a105b57bf62ULL, 0x9d8ffe4942a0934fULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__string_arg_void_string (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x586138796f133c4dULL, 0x1c7573f2d30ac907ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = plic_pyQuickRecord_proto_pop (fbr); ERRORif (!item);
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x59cb77461ddeac82ULL, 0xfeaa98721bd8ecd3ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = plic_pyQuickSequence_proto_pop (fbr); ERRORif (!item);
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x547b4dd41606b568ULL, 0x1d763791a33d2bc9ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = plic_PyObject_4uint64 ("GrandChild", fbr.pop_object()); ERRORifpy();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x57a5dbfbeb5a4ef9ULL, 0xb5df0c3b3bba4b22ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface() { Py_DECREF (m_callable); }
  _EventHandler_InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    FieldReader fbr (fb);
    fbr.skip_msgid(); // FIXME: check msgid
    fbr.pop_int64();  // FIXME: check handler_id
    const uint length = 1;
    PyObject *result, *tuple = PyTuple_New (length), *item;
    item = plic_PyObject_4uint64 ("SignalTestInterface", fbr.pop_object()); ERRORifpy();
    PyTuple_SET_ITEM (tuple, 0, item);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5c515ee37b78a970ULL, 0xe89c2af2f29359a0ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_RapicornPlicTest__ButtonArea__check_activate_bool : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_RapicornPlicTest__ButtonArea__check_activate_bool() { Py_DECREF (m_callable); }
  _EventHandler_RapicornPlicTest__ButtonArea__check_activate_bool (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__RapicornPlicTest__ButtonArea__check_activate_bool (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x5aa49f58f83f54b7ULL, 0xff357b59e593e480ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_RapicornPlicTest__ButtonArea__check_activate_bool (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
class _EventHandler_RapicornPlicTest__ButtonArea__activate_void : public Plic::Connection::EventHandler {
  PyObject *m_callable;
public:
  ~_EventHandler_RapicornPlicTest__ButtonArea__activate_void() { Py_DECREF (m_callable); }
  _EventHandler_RapicornPlicTest__ButtonArea__activate_void (PyObject *callable) : m_callable ((Py_INCREF (callable), callable)) {}
  virtual FieldBuffer*
  handle_event (Plic::FieldBuffer &fb)
  {
    const uint length = 0;
    PyObject *result, *tuple = PyTuple_New (length);
    if (PyErr_Occurred()) goto error;
    result = PyObject_Call (m_callable, tuple, NULL);
    Py_XDECREF (result);
   error:
    Py_XDECREF (tuple);
    return NULL;
  }
};
static PyObject*
_plic_marshal__RapicornPlicTest__ButtonArea__activate_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x567351a83995c46eULL, 0xcd153a5a755401f6ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  if (item == Py_None) fb.add_int64 (0);
  else {
    if (!PyCallable_Check (item)) ERRORpy ("arg2 must be callable");
    Plic::Connection::EventHandler *evh = new _EventHandler_RapicornPlicTest__ButtonArea__activate_void (item);
    uint64 handler_id = PLIC_CONNECTION().register_event_handler (evh);
    fb.add_int64 (handler_id); }
  item = PyTuple_GET_ITEM (pyargs, 2);  // ConId for disconnect
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
      pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
  }
 error:
  if (fm) delete fm;
  if (fr) delete fr;
  return pyfoR;
}
static PyObject*
_plic_rpc_RapicornPlicTest__PureMethods__pure_method_int_float (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3c452a34192441bfULL, 0xcb1002037bf028e2ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // f
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = PLIC_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
#define PLIC_PYSTUB_METHOD_DEFS() \
  { "_PLIC___register_object_factory_callable", _plic___register_object_factory_callable, METH_VARARGS, "Register Python object factory callable" },\
  { "_PLIC_MandatoryNamespace__FirstInterface__void_func_void", _plic_rpc_MandatoryNamespace__FirstInterface__void_func_void, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__simple_method_float", _plic_rpc_InterfaceTests__UIWidgetArea__simple_method_float, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__single_arg_float_int", _plic_rpc_InterfaceTests__UIWidgetArea__single_arg_float_int, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__single_arg2_float_int", _plic_rpc_InterfaceTests__UIWidgetArea__single_arg2_float_int, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__two_args_float_int_float", _plic_rpc_InterfaceTests__UIWidgetArea__two_args_float_int_float, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__two_args2_float_int_float", _plic_rpc_InterfaceTests__UIWidgetArea__two_args2_float_int_float, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__multi_args_float_int_float_int_string_float", _plic_rpc_InterfaceTests__UIWidgetArea__multi_args_float_int_float_int_string_float, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__self_method_float_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea", _plic_rpc_InterfaceTests__UIWidgetArea__self_method_float_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__void_method_void", _plic_rpc_InterfaceTests__UIWidgetArea__void_method_void, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__on_click2out_string", _plic_rpc_InterfaceTests__UIWidgetArea__on_click2out_string, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__on_click2in_void_string", _plic_rpc_InterfaceTests__UIWidgetArea__on_click2in_void_string, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__void_signal_void", _plic_marshal__InterfaceTests__UIWidgetArea__void_signal_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int", _plic_marshal__InterfaceTests__UIWidgetArea__sample_signal_float_InterfaceTests__UIWidgetArea_int, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__QuickIface__simple_function_void_int", _plic_rpc_InterfaceTests__QuickIface__simple_function_void_int, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_void_void", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_void_void, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_ints_int_int_int", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_ints_int_int_int, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_floats_float_float_float", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_floats_float_float_float, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_string_string_string_string", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_string_string_string_string, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface", _plic_rpc_InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__void_result_void", _plic_marshal__InterfaceTests__SignalTestInterface__void_result_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__bool_result_bool", _plic_marshal__InterfaceTests__SignalTestInterface__bool_result_bool, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__int_result_int", _plic_marshal__InterfaceTests__SignalTestInterface__int_result_int, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__float_result_float", _plic_marshal__InterfaceTests__SignalTestInterface__float_result_float, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__string_result_string", _plic_marshal__InterfaceTests__SignalTestInterface__string_result_string, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum", _plic_marshal__InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord", _plic_marshal__InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence", _plic_marshal__InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild", _plic_marshal__InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface", _plic_marshal__InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__void_arg_void", _plic_marshal__InterfaceTests__SignalTestInterface__void_arg_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__bool_arg_void_bool", _plic_marshal__InterfaceTests__SignalTestInterface__bool_arg_void_bool, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__int_arg_void_int", _plic_marshal__InterfaceTests__SignalTestInterface__int_arg_void_int, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__float_arg_void_float", _plic_marshal__InterfaceTests__SignalTestInterface__float_arg_void_float, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__string_arg_void_string", _plic_marshal__InterfaceTests__SignalTestInterface__string_arg_void_string, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum", _plic_marshal__InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord", _plic_marshal__InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence", _plic_marshal__InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild", _plic_marshal__InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface", _plic_marshal__InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_RapicornPlicTest__ButtonArea__check_activate_bool", _plic_marshal__RapicornPlicTest__ButtonArea__check_activate_bool, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_RapicornPlicTest__ButtonArea__activate_void", _plic_marshal__RapicornPlicTest__ButtonArea__activate_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_PLIC_RapicornPlicTest__PureMethods__pure_method_int_float", _plic_rpc_RapicornPlicTest__PureMethods__pure_method_int_float, METH_VARARGS, "pyRapicorn rpc call" }
static PLIC_UNUSED PyMethodDef dummy[] = { PLIC_PYSTUB_METHOD_DEFS(), { 0 } };
