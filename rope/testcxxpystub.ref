/* --- Generated by Rapicorn-CxxPyStub --- */

#include <Python.h> // must be included first to configure std headers
#include <string>

#include <rapicorn.hh>

#define None_INCREF()   ({ Py_INCREF (Py_None); Py_None; })
#define GOTO_ERROR()    goto error
#define ERRORif(cond)   if (cond) goto error
#define ERRORifpy()     if (PyErr_Occurred()) goto error
#define ERRORpy(msg)    do { PyErr_Format (PyExc_RuntimeError, msg); goto error; } while (0)
#define ERRORifnotret(fr) do { if (AIDA_UNLIKELY (!fr) || \
                                   AIDA_UNLIKELY (!Rapicorn::Aida::msgid_is_result (Rapicorn::Aida::MessageId (fr->first_id())))) { \
                                 PyErr_Format_from_AIDA_error (fr); \
                                 goto error; } } while (0)

// using Rapicorn::Aida::uint64_t;
using ::uint64_t;
using Rapicorn::Aida::FieldBuffer;
using Rapicorn::Aida::FieldReader;

static PyObject*
PyErr_Format_from_AIDA_error (const FieldBuffer *fr)
{
  if (!fr)
    return PyErr_Format (PyExc_RuntimeError, "Aida: missing return value");
  FieldReader frr (*fr);
  const uint64_t msgid = frr.pop_int64();
  frr.pop_int64(); // hashl
  if (Rapicorn::Aida::msgid_is_error (Rapicorn::Aida::MessageId (msgid)))
    {
      std::string msg = frr.pop_string(), domain = frr.pop_string();
      if (domain.size()) domain += ": ";
      msg = domain + msg;
      return PyErr_Format (PyExc_RuntimeError, "%s", msg.c_str());
    }
  return PyErr_Format (PyExc_RuntimeError, "Aida: garbage return: 0x%s", fr->first_id_str().c_str());
}

static inline PY_LONG_LONG
PyIntLong_AsLongLong (PyObject *intlong)
{
  if (PyInt_Check (intlong))
    return PyInt_AS_LONG (intlong);
  else
    return PyLong_AsLongLong (intlong);
}

static inline std::string
PyString_As_std_string (PyObject *pystr)
{
  char *s = NULL;
  Py_ssize_t len = 0;
  PyString_AsStringAndSize (pystr, &s, &len);
  return std::string (s, len);
}

static inline Rapicorn::Aida::uint64_t
PyAttr_As_uint64 (PyObject *pyobj, const char *attr_name)
{
  PyObject *o = PyObject_GetAttrString (pyobj, attr_name);
  if (o)
     return PyLong_AsUnsignedLongLong (o);
  return 0;
}

static inline PyObject*
PyString_From_std_string (const std::string &s)
{
  return PyString_FromStringAndSize (s.data(), s.size());
}

static inline int
PyDict_Take_Item (PyObject *pydict, const char *key, PyObject **pyitemp)
{
  int r = PyDict_SetItemString (pydict, key, *pyitemp);
  if (r >= 0)
    {
      Py_DECREF (*pyitemp);
      *pyitemp = NULL;
    }
  return r;
}

static inline Rapicorn::Aida::Any
__aida_pyany_to_any (PyObject *pyany)
{
  return Rapicorn::Aida::Any(); // FIXME: pyany to Any
}

static inline PyObject*
__aida_pyany_from_any (const Rapicorn::Aida::Any &any)
{
  return None_INCREF(); // FIXME: Any to pyany
}

static PyObject *_aida_object_factory_callable = NULL;

static PyObject*
_aida___register_object_factory_callable (PyObject *pyself, PyObject *pyargs)
{
  if (_aida_object_factory_callable)
    return PyErr_Format (PyExc_RuntimeError, "object_factory_callable already registered");
  if (PyTuple_Size (pyargs) != 1)
    return PyErr_Format (PyExc_RuntimeError, "wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);
  if (!PyCallable_Check (item))
    return PyErr_Format (PyExc_RuntimeError, "argument must be callable");
  Py_INCREF (item);
  _aida_object_factory_callable = item;
  return None_INCREF();
}

static inline PyObject*
aida_PyObject_4uint64 (const char *type_name, uint64_t orbid)
{
  if (!_aida_object_factory_callable)
    return PyErr_Format (PyExc_RuntimeError, "object_factory_callable not registered");
  PyObject *result = NULL, *pyid = PyLong_FromUnsignedLongLong (orbid);
  if (pyid) {
    PyObject *tuple = PyTuple_New (2);
    if (tuple) {
      PyTuple_SET_ITEM (tuple, 0, PyString_FromString (type_name));
      PyTuple_SET_ITEM (tuple, 1, pyid), pyid = NULL;
      result = PyObject_Call (_aida_object_factory_callable, tuple, NULL);
      Py_DECREF (tuple);
    }
    Py_XDECREF (pyid);
  }
  return result;
}

#ifndef AIDA_CONNECTION
#define AIDA_CONNECTION() (*(Rapicorn::Aida::ClientConnection*)NULL)
#endif

enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord;
struct NestedTypesRec;
struct NewRecord;
struct InnerRecord;
struct Refer2Inner;
struct SomeRecord;
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord;
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
enum MathExpressions {
  RESULT_2 = 2,
  RESULT_5 = 5,
  RESULT_8 = 8,
  RESULT_6 = 6,
  RESULT_7 = 7,
  RESULT_16 = 16,
  RESULT_3 = 3,
  RESULT_24 = 24,
  RESULT_13 = 13,
  RESULT_m2 = -2,
  RESULT_77 = 77,
  RESULT_511 = 511,
};
struct RecordForGroups;
static RAPICORN_UNUSED bool
aida_pyXFooRecord_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (18);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "single_bool"); ERRORif (!item);
  fb.add_bool (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_num"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "num64"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_float"); ERRORif (!item);
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_string"); ERRORif (!item);
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "sibling1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "sibling2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi3"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi4"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "enum_field"); ERRORif (!item);
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface1"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface2"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface3"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "any1"); ERRORif (!item);
  fb.add_any (__aida_pyany_to_any (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "any2"); ERRORif (!item);
  fb.add_any (__aida_pyany_to_any (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "any3"); ERRORif (!item);
  fb.add_any (__aida_pyany_to_any (item)); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyXFooRecord_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 18) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_bool()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "single_bool", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "single_num", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "num64", &pyfoR) < 0) goto error;
  pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "single_float", &pyfoR) < 0) goto error;
  pyfoR = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "single_string", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "sibling1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "sibling2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi3", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi4", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "enum_field", &pyfoR) < 0) goto error;
  pyfoR = aida_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface1", &pyfoR) < 0) goto error;
  pyfoR = aida_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface2", &pyfoR) < 0) goto error;
  pyfoR = aida_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface3", &pyfoR) < 0) goto error;
  pyfoR = __aida_pyany_from_any (fbr.pop_any()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "any1", &pyfoR) < 0) goto error;
  pyfoR = __aida_pyany_from_any (fbr.pop_any()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "any2", &pyfoR) < 0) goto error;
  pyfoR = __aida_pyany_from_any (fbr.pop_any()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "any3", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyXFooSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_bool (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyXFooSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_bool()); ERRORifpy ();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyIntSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyIntSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyFloatSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyFloatSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyStringSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyStringSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyExtensiveEnumSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyExtensiveEnumSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyRecordSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!aida_pyXFooRecord_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyRecordSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = aida_pyXFooRecord_proto_pop (fbr); ERRORif (!pyfoR);
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pySequenceSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!aida_pyIntSequence_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pySequenceSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = aida_pyIntSequence_proto_pop (fbr); ERRORif (!pyfoR);
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyInterfaceSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyInterfaceSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = aida_PyObject_4uint64 ("FirstInterface", fbr.pop_object()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyAnySequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_any (__aida_pyany_to_any (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyAnySequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = __aida_pyany_from_any (fbr.pop_any()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyNestedTypesRec_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (2);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "rec"); ERRORif (!item);
  if (!aida_pyXFooRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "seq"); ERRORif (!item);
  if (!aida_pyXFooSequence_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyNestedTypesRec_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = aida_pyXFooRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "rec", &pyfoR) < 0) goto error;
  pyfoR = aida_pyXFooSequence_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "seq", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyNestedTypesSeq_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!aida_pyNestedTypesRec_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyNestedTypesSeq_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = aida_pyNestedTypesRec_proto_pop (fbr); ERRORif (!pyfoR);
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyNewRecord_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (4);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "i"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "enum1"); ERRORif (!item);
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "xfs"); ERRORif (!item);
  if (!aida_pyXFooSequence_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "ntr"); ERRORif (!item);
  if (!aida_pyNestedTypesRec_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyNewRecord_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "i", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "enum1", &pyfoR) < 0) goto error;
  pyfoR = aida_pyXFooSequence_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "xfs", &pyfoR) < 0) goto error;
  pyfoR = aida_pyNestedTypesRec_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "ntr", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyInnerRecord_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (3);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "x"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "y"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "rec"); ERRORif (!item);
  if (!aida_pyNewRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyInnerRecord_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "x", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "y", &pyfoR) < 0) goto error;
  pyfoR = aida_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "rec", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyRefer2Inner_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (1);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "r"); ERRORif (!item);
  if (!aida_pyInnerRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyRefer2Inner_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = aida_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pySomeRecord_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (4);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "r1"); ERRORif (!item);
  if (!aida_pyNewRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r2"); ERRORif (!item);
  if (!aida_pyNewRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r3"); ERRORif (!item);
  if (!aida_pyInnerRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r4"); ERRORif (!item);
  if (!aida_pyInnerRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pySomeRecord_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = aida_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r1", &pyfoR) < 0) goto error;
  pyfoR = aida_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r2", &pyfoR) < 0) goto error;
  pyfoR = aida_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r3", &pyfoR) < 0) goto error;
  pyfoR = aida_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r4", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyQuickRecord_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (2);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "int1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "int2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyQuickRecord_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "int1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "int2", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyQuickSequence_proto_add (PyObject *pyinput, Rapicorn::Aida::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Rapicorn::Aida::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyQuickSequence_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    PyList_SET_ITEM (listR, k, pyfoR), pyfoR = NULL;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
aida_pyRecordForGroups_proto_add (PyObject *pyrec, Rapicorn::Aida::FieldBuffer &dst)
{
  Rapicorn::Aida::FieldBuffer &fb = dst.add_rec (5);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "i"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "ratio"); ERRORif (!item);
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "ordinary_bool"); ERRORif (!item);
  fb.add_bool (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "threshold1"); ERRORif (!item);
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "threshold2"); ERRORif (!item);
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
aida_pyRecordForGroups_proto_pop (Rapicorn::Aida::FieldReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Rapicorn::Aida::FieldReader fbr (src.pop_rec());
  if (fbr.remaining() != 5) ERRORpy ("Aida: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "i", &pyfoR) < 0) goto error;
  pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "ratio", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_bool()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "ordinary_bool", &pyfoR) < 0) goto error;
  pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "threshold1", &pyfoR) < 0) goto error;
  pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "threshold2", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static PyObject*
_aida_rpc_MandatoryNamespace__FirstInterface__void_func_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x209463c55becedadULL, 0x39ddfcb9aadc3c74ULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__simple_method_float64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3a2f8d1c42ac1785ULL, 0x58b20fa269c0bd5eULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__single_arg_float64_int32 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3ea3da9f2d46a894ULL, 0xa37baf774b855c65ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__single_arg2_float64_int32 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x323870aec608428aULL, 0x3e4eb826e4565354ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__two_args_float64_int32_float64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x372d3445333b29d9ULL, 0x2a1b6a54e409ca63ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__two_args2_float64_int32_float64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3a5296dee6dca6f6ULL, 0xbe00f1270b1a7a1cULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__multi_args_float64_bool_int64_float64_int32_String_float64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 6), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3da25289fcf7fe26ULL, 0xf2dfa2d031dd302cULL);
  if (PyTuple_Size (pyargs) != 1 + 6) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // b
  fb.add_bool (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 3); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 4); // i
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 5); // s
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 6); // y
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__self_method_float64_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3b4bb0d6b3f38abdULL, 0x80e1a7b9347c576aULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // ba1
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // ba2
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__void_method_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x2e02c52c84773703ULL, 0x00027e452edb615cULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__on_click2out_String (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3550e7348466c129ULL, 0x1ea5baf75297246fULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyString_From_std_string (frr.pop_string()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__UIWidgetArea__on_click2in_void_String (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x24ee88e59b05bae4ULL, 0x879ebaad31e6d20eULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // command
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__UIWidgetArea__void_signal (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__UIWidgetArea__void_signal_void (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x52ef738c2571d0f2ULL, 0x05b653adf0a80acfULL, oid, __AIDA_pyemit__UIWidgetArea__void_signal, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__UIWidgetArea__sample_signal (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 2;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = aida_PyObject_4uint64 ("UIWidgetArea", fbr.pop_object()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  PyTuple_SET_ITEM (tuple, 1, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__UIWidgetArea__sample_signal_float64_InterfaceTests__UIWidgetArea_int32 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x506409a3044ac65eULL, 0xda804abb85f8c1e8ULL, oid, __AIDA_pyemit__UIWidgetArea__sample_signal, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static PyObject*
_aida_rpc_InterfaceTests__QuickIface__simple_function_void_int32 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x2b860359fa7e3dceULL, 0x198d5fe242474308ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // i
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_void_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 0), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x281392e54343bee9ULL, 0x0dbeb788728dbff4ULL);
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3b68546991e25342ULL, 0xa71399caec9ccfc7ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_bool (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_bool (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_bool()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_ints32_int32_int32_int32 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3c7dd838073a8a92ULL, 0xddd57eef6f36ab11ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_ints64_int64_int64_int64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x394bb1c2a7be91fbULL, 0x3f077bb42a25d6e4ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_floats_float64_float64_float64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x368776130b055120ULL, 0x64281c55fbfe5bb9ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_string_String_String_String (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x378c9594060f2266ULL, 0x5331c53659132c99ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyString_From_std_string (frr.pop_string()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x387f08a5c150e6a7ULL, 0x83c133fcd2be3200ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_evalue()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3b59b493f287edf0ULL, 0x4771d353c78389d1ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  if (!aida_pyQuickRecord_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  if (!aida_pyQuickRecord_proto_add (item, fb)) goto error;
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = aida_pyQuickRecord_proto_pop (frr); ERRORif (!pyfoR);
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x34c9e8a686a7f261ULL, 0x9af099b173ac979cULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  if (!aida_pyQuickSequence_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  if (!aida_pyQuickSequence_proto_add (item, fb)) goto error;
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = aida_pyQuickSequence_proto_pop (frr); ERRORif (!pyfoR);
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x34619983babcee5bULL, 0x9875f78f28f381b7ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = aida_PyObject_4uint64 ("GrandChild", frr.pop_object()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_anys_Any_Any_Any (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x362c672843766d85ULL, 0x6ed30851db440471ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_any (__aida_pyany_to_any (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_any (__aida_pyany_to_any (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = __aida_pyany_from_any (frr.pop_any()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 2), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3a2ab33a8358edcbULL, 0x7c028db9464052a0ULL);
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // iface0
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = aida_PyObject_4uint64 ("QuickIface", frr.pop_object()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__void_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__void_result_void (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x535d5e95471873b6ULL, 0x7a9f5692ce00e007ULL, oid, __AIDA_pyemit__SignalTestInterface__void_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__bool_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__bool_result_bool (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x51ffffa2f8db1b1bULL, 0x3e01434baf49eceeULL, oid, __AIDA_pyemit__SignalTestInterface__bool_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__int32_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__int32_result_int32 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x503a5722f565a9faULL, 0x0c5aed4d39b9ca12ULL, oid, __AIDA_pyemit__SignalTestInterface__int32_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__int64_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__int64_result_int64 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5670d5594a24b2d9ULL, 0x8ad93cc1a1e9bb50ULL, oid, __AIDA_pyemit__SignalTestInterface__int64_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__float64_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__float64_result_float64 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x51aee1ad06b0e2ffULL, 0x0a7f816f9bdaf008ULL, oid, __AIDA_pyemit__SignalTestInterface__float64_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__string_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__string_result_String (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5daa2a4439deab5fULL, 0xc0580f71a4d7d1d6ULL, oid, __AIDA_pyemit__SignalTestInterface__string_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__enum_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x56fc6f3f4946e7b2ULL, 0x0fe0cc5f83d2ab84ULL, oid, __AIDA_pyemit__SignalTestInterface__enum_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__record_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x50b723665ed298a5ULL, 0x32aa063680a4e3c0ULL, oid, __AIDA_pyemit__SignalTestInterface__record_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__sequence_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5ef00325dfcf4552ULL, 0x991130ecddd21730ULL, oid, __AIDA_pyemit__SignalTestInterface__sequence_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__interface_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x58e8587c542d85ceULL, 0xe2b572e902c69f7cULL, oid, __AIDA_pyemit__SignalTestInterface__interface_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__any_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__any_result_Any (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5ae2293e0b4f9854ULL, 0xbb549e7d52c43e50ULL, oid, __AIDA_pyemit__SignalTestInterface__any_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__self_result (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x59bb2da621bab28fULL, 0x32bc82e7eb9bc512ULL, oid, __AIDA_pyemit__SignalTestInterface__self_result, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__void_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__void_arg_void (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x583dc36c7785c7f3ULL, 0xb330cefa4e8247a9ULL, oid, __AIDA_pyemit__SignalTestInterface__void_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__bool_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = PyLong_FromLongLong (fbr.pop_bool()); ERRORifpy ();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__bool_arg_void_bool (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5f7ba898d12986bfULL, 0x8a1143a5f6dc85b8ULL, oid, __AIDA_pyemit__SignalTestInterface__bool_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__int32_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__int32_arg_void_int32 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x583ed84bd4d820efULL, 0x87214001f1934890ULL, oid, __AIDA_pyemit__SignalTestInterface__int32_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__int64_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__int64_arg_void_int64 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5d6ed628b051e336ULL, 0x442670f1eba34b7bULL, oid, __AIDA_pyemit__SignalTestInterface__int64_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__float64_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__float64_arg_void_float64 (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5d937b3a9a059ff0ULL, 0x641851b425c3f91cULL, oid, __AIDA_pyemit__SignalTestInterface__float64_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__string_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__string_arg_void_String (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x524e550794aaa1e8ULL, 0x093b71ccace2863bULL, oid, __AIDA_pyemit__SignalTestInterface__string_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__enum_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x586138796f133c4dULL, 0x1c7573f2d30ac907ULL, oid, __AIDA_pyemit__SignalTestInterface__enum_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__record_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = aida_pyQuickRecord_proto_pop (fbr); ERRORif (!item);
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x59cb77461ddeac82ULL, 0xfeaa98721bd8ecd3ULL, oid, __AIDA_pyemit__SignalTestInterface__record_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__sequence_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = aida_pyQuickSequence_proto_pop (fbr); ERRORif (!item);
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x547b4dd41606b568ULL, 0x1d763791a33d2bc9ULL, oid, __AIDA_pyemit__SignalTestInterface__sequence_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__interface_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = aida_PyObject_4uint64 ("GrandChild", fbr.pop_object()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x57a5dbfbeb5a4ef9ULL, 0xb5df0c3b3bba4b22ULL, oid, __AIDA_pyemit__SignalTestInterface__interface_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__any_arg (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = __aida_pyany_from_any (fbr.pop_any()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__any_arg_void_Any (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x51355ac177cc776eULL, 0x8b062ce8d8442de0ULL, oid, __AIDA_pyemit__SignalTestInterface__any_arg, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__SignalTestInterface__self_args (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 1;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = aida_PyObject_4uint64 ("SignalTestInterface", fbr.pop_object()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5c515ee37b78a970ULL, 0xe89c2af2f29359a0ULL, oid, __AIDA_pyemit__SignalTestInterface__self_args, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__ChildInheritingSignals__child_signal (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  FieldReader fbr (*sfb);
  fbr.skip_msgid(); // FIXME: check msgid
  fbr.pop_int64();  // skip handler_id
  const uint length = 6;
  PyObject *result = NULL, *tuple = PyTuple_New (length), *item;
  item = aida_PyObject_4uint64 ("ChildInheritingSignals", fbr.pop_object()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 0, item);
  item = aida_PyObject_4uint64 ("SignalTestInterface", fbr.pop_object()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 1, item);
  item = __aida_pyany_from_any (fbr.pop_any()); ERRORifpy();
  PyTuple_SET_ITEM (tuple, 2, item);
  item = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  PyTuple_SET_ITEM (tuple, 3, item);
  item = aida_pyQuickRecord_proto_pop (fbr); ERRORif (!item);
  PyTuple_SET_ITEM (tuple, 4, item);
  item = aida_pyQuickSequence_proto_pop (fbr); ERRORif (!item);
  PyTuple_SET_ITEM (tuple, 5, item);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__InterfaceTests__ChildInheritingSignals__child_signal_void_InterfaceTests__ChildInheritingSignals_InterfaceTests__SignalTestInterface_Any_int32_InterfaceTests__QuickRecord_InterfaceTests__QuickSequence (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5ffad83b68b79139ULL, 0x7175e65d7705749fULL, oid, __AIDA_pyemit__ChildInheritingSignals__child_signal, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__ButtonArea__check_activate (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__RapicornAidaTest__ButtonArea__check_activate_bool (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x5ed315978fdefdcaULL, 0x9efe9e4845d8907eULL, oid, __AIDA_pyemit__ButtonArea__check_activate, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static Rapicorn::Aida::FieldBuffer*
__AIDA_pyemit__ButtonArea__activate (Rapicorn::Aida::ClientConnection &aida_con, const Rapicorn::Aida::FieldBuffer *sfb, void *data)
{
  PyObject *callable = (PyObject*) data;
  if (AIDA_UNLIKELY (!sfb)) { Py_DECREF (callable); return NULL; }
  const uint length = 0;
  PyObject *result = NULL, *tuple = PyTuple_New (length);
  if (PyErr_Occurred()) goto error;
  result = PyObject_Call (callable, tuple, NULL);
  Py_XDECREF (result);
 error:
  Py_XDECREF (tuple);
  return NULL;
}
static PyObject*
_aida_marshal__RapicornAidaTest__ButtonArea__activate_void (PyObject *pyself, PyObject *pyargs)
{
  while (0) { error: return NULL; }
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("wrong number of arguments");
  PyObject *item = PyTuple_GET_ITEM (pyargs, 0);  // self
  Rapicorn::Aida::uint64_t oid = PyAttr_As_uint64 (item, "__aida__object__"); ERRORifpy();
  PyObject *callable = PyTuple_GET_ITEM (pyargs, 1);  // Closure
  Rapicorn::Aida::uint64_t result = 0;
  if (callable == Py_None) {
    PyObject *pyo = PyTuple_GET_ITEM (pyargs, 2);
    Rapicorn::Aida::uint64_t dc_id = PyIntLong_AsLongLong (pyo); ERRORifpy();
    result = AIDA_CONNECTION().signal_disconnect (dc_id);
  } else {
    if (!PyCallable_Check (callable)) ERRORpy ("arg2 must be callable");
    Py_INCREF (callable);
    result = AIDA_CONNECTION().signal_connect (0x57905c3b089b970eULL, 0x3774e2d97c70a48fULL, oid, __AIDA_pyemit__ButtonArea__activate, callable);
  }
  PyObject *pyres = PyLong_FromLongLong (result); ERRORifpy ();
  return pyres;
}
static PyObject*
_aida_rpc_RapicornAidaTest__PureMethods__pure_method_int32_float64 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 1), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x3e0c1c388c4a51a1ULL, 0x5f146e2e050f17e1ULL);
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // f
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Rapicorn::Aida::FieldReader frr (*fr);
    frr.skip_msgid(); // FIXME: msgid for return?
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
static PyObject*
_aida_rpc_Other__NameTests__args_from_other_namespace_void_InterfaceTests__QuickRecord_RapicornAidaTest__ClickType_OtherNamespace__SomeRecord (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  FieldBuffer *fm = FieldBuffer::_new (2 + 1 + 3), &fb = *fm, *fr = NULL;
  fb.add_msgid (0x211a5debfd86209cULL, 0x3ff87e4a8201e492ULL);
  if (PyTuple_Size (pyargs) != 1 + 3) ERRORpy ("Aida: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__aida__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // qr
  if (!aida_pyQuickRecord_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // qe
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 3); // sr
  if (!aida_pySomeRecord_proto_add (item, fb)) goto error;
  fm = NULL; fr = AIDA_CONNECTION().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  if (fm) delete fm;
  return NULL;
}
#define AIDA_PYSTUB_METHOD_DEFS() \
  { "_AIDA___register_object_factory_callable", _aida___register_object_factory_callable, METH_VARARGS, "Register Python object factory callable" },\
  { "_AIDA_MandatoryNamespace__FirstInterface__void_func_void", _aida_rpc_MandatoryNamespace__FirstInterface__void_func_void, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__simple_method_float64", _aida_rpc_InterfaceTests__UIWidgetArea__simple_method_float64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__single_arg_float64_int32", _aida_rpc_InterfaceTests__UIWidgetArea__single_arg_float64_int32, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__single_arg2_float64_int32", _aida_rpc_InterfaceTests__UIWidgetArea__single_arg2_float64_int32, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__two_args_float64_int32_float64", _aida_rpc_InterfaceTests__UIWidgetArea__two_args_float64_int32_float64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__two_args2_float64_int32_float64", _aida_rpc_InterfaceTests__UIWidgetArea__two_args2_float64_int32_float64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__multi_args_float64_bool_int64_float64_int32_String_float64", _aida_rpc_InterfaceTests__UIWidgetArea__multi_args_float64_bool_int64_float64_int32_String_float64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__self_method_float64_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea", _aida_rpc_InterfaceTests__UIWidgetArea__self_method_float64_InterfaceTests__UIWidgetArea_InterfaceTests__UIWidgetArea, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__void_method_void", _aida_rpc_InterfaceTests__UIWidgetArea__void_method_void, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__on_click2out_String", _aida_rpc_InterfaceTests__UIWidgetArea__on_click2out_String, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__on_click2in_void_String", _aida_rpc_InterfaceTests__UIWidgetArea__on_click2in_void_String, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__void_signal_void", _aida_marshal__InterfaceTests__UIWidgetArea__void_signal_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__UIWidgetArea__sample_signal_float64_InterfaceTests__UIWidgetArea_int32", _aida_marshal__InterfaceTests__UIWidgetArea__sample_signal_float64_InterfaceTests__UIWidgetArea_int32, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__QuickIface__simple_function_void_int32", _aida_rpc_InterfaceTests__QuickIface__simple_function_void_int32, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_void_void", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_void_void, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_bools_bool_bool_bool, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_ints32_int32_int32_int32", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_ints32_int32_int32_int32, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_ints64_int64_int64_int64", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_ints64_int64_int64_int64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_floats_float64_float64_float64", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_floats_float64_float64_float64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_string_String_String_String", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_string_String_String_String, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_enum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum_InterfaceTests__QuickEnum, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_record_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord_InterfaceTests__QuickRecord, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_sequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_interface_InterfaceTests__GrandChild_InterfaceTests__GrandChild_InterfaceTests__GrandChild, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_anys_Any_Any_Any", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_anys_Any_Any_Any, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface", _aida_rpc_InterfaceTests__MethodTestInterface__method_with_quickiface_InterfaceTests__QuickIface_InterfaceTests__QuickIface_InterfaceTests__QuickIface, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__void_result_void", _aida_marshal__InterfaceTests__SignalTestInterface__void_result_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__bool_result_bool", _aida_marshal__InterfaceTests__SignalTestInterface__bool_result_bool, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__int32_result_int32", _aida_marshal__InterfaceTests__SignalTestInterface__int32_result_int32, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__int64_result_int64", _aida_marshal__InterfaceTests__SignalTestInterface__int64_result_int64, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__float64_result_float64", _aida_marshal__InterfaceTests__SignalTestInterface__float64_result_float64, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__string_result_String", _aida_marshal__InterfaceTests__SignalTestInterface__string_result_String, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum", _aida_marshal__InterfaceTests__SignalTestInterface__enum_result_InterfaceTests__QuickEnum, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord", _aida_marshal__InterfaceTests__SignalTestInterface__record_result_InterfaceTests__QuickRecord, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence", _aida_marshal__InterfaceTests__SignalTestInterface__sequence_result_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild", _aida_marshal__InterfaceTests__SignalTestInterface__interface_result_InterfaceTests__GrandChild, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__any_result_Any", _aida_marshal__InterfaceTests__SignalTestInterface__any_result_Any, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface", _aida_marshal__InterfaceTests__SignalTestInterface__self_result_InterfaceTests__SignalTestInterface, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__void_arg_void", _aida_marshal__InterfaceTests__SignalTestInterface__void_arg_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__bool_arg_void_bool", _aida_marshal__InterfaceTests__SignalTestInterface__bool_arg_void_bool, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__int32_arg_void_int32", _aida_marshal__InterfaceTests__SignalTestInterface__int32_arg_void_int32, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__int64_arg_void_int64", _aida_marshal__InterfaceTests__SignalTestInterface__int64_arg_void_int64, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__float64_arg_void_float64", _aida_marshal__InterfaceTests__SignalTestInterface__float64_arg_void_float64, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__string_arg_void_String", _aida_marshal__InterfaceTests__SignalTestInterface__string_arg_void_String, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum", _aida_marshal__InterfaceTests__SignalTestInterface__enum_arg_void_InterfaceTests__QuickEnum, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord", _aida_marshal__InterfaceTests__SignalTestInterface__record_arg_void_InterfaceTests__QuickRecord, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence", _aida_marshal__InterfaceTests__SignalTestInterface__sequence_arg_void_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild", _aida_marshal__InterfaceTests__SignalTestInterface__interface_arg_void_InterfaceTests__GrandChild, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__any_arg_void_Any", _aida_marshal__InterfaceTests__SignalTestInterface__any_arg_void_Any, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface", _aida_marshal__InterfaceTests__SignalTestInterface__self_args_void_InterfaceTests__SignalTestInterface, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_InterfaceTests__ChildInheritingSignals__child_signal_void_InterfaceTests__ChildInheritingSignals_InterfaceTests__SignalTestInterface_Any_int32_InterfaceTests__QuickRecord_InterfaceTests__QuickSequence", _aida_marshal__InterfaceTests__ChildInheritingSignals__child_signal_void_InterfaceTests__ChildInheritingSignals_InterfaceTests__SignalTestInterface_Any_int32_InterfaceTests__QuickRecord_InterfaceTests__QuickSequence, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_RapicornAidaTest__ButtonArea__check_activate_bool", _aida_marshal__RapicornAidaTest__ButtonArea__check_activate_bool, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_RapicornAidaTest__ButtonArea__activate_void", _aida_marshal__RapicornAidaTest__ButtonArea__activate_void, METH_VARARGS, "pyRapicorn signal call" },\
  { "_AIDA_RapicornAidaTest__PureMethods__pure_method_int32_float64", _aida_rpc_RapicornAidaTest__PureMethods__pure_method_int32_float64, METH_VARARGS, "pyRapicorn rpc call" },\
  { "_AIDA_Other__NameTests__args_from_other_namespace_void_InterfaceTests__QuickRecord_RapicornAidaTest__ClickType_OtherNamespace__SomeRecord", _aida_rpc_Other__NameTests__args_from_other_namespace_void_InterfaceTests__QuickRecord_RapicornAidaTest__ClickType_OtherNamespace__SomeRecord, METH_VARARGS, "pyRapicorn rpc call" }
static AIDA_UNUSED PyMethodDef dummy[] = { AIDA_PYSTUB_METHOD_DEFS(), { 0 } };
