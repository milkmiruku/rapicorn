/* --- Generated by Rapicorn-CxxPyStub --- */

#include <Python.h> // must be included first to configure std headers
#include <string>

#include <rapicorn-core.hh>

#define None_INCREF()   ({ Py_INCREF (Py_None); Py_None; })
#define GOTO_ERROR()    goto error
#define ERRORif(cond)   if (cond) goto error
#define ERRORifpy()     if (PyErr_Occurred()) goto error
#define ERRORpy(msg)    do { PyErr_Format (PyExc_RuntimeError, msg); goto error; } while (0)
#define ERRORifnotret(fr) do { if (PLIC_UNLIKELY (!fr) || \
                                   PLIC_UNLIKELY (!Plic::is_callid_return (fr->first_id()))) { \
                                 PyErr_Format_from_PLIC_error (fr); \
                                 goto error; } } while (0)

static PyObject*
PyErr_Format_from_PLIC_error (const Plic::FieldBuffer *fr)
{
  if (!fr)
    return PyErr_Format (PyExc_RuntimeError, "PLIC: missing return value");
  if (Plic::is_callid_error (fr->first_id()))
    {
      Plic::FieldBufferReader frr (*fr);
      frr.skip(); // proc_id
      std::string msg = frr.pop_string(), domain = frr.pop_string();
      if (domain.size()) domain += ": ";
      msg = domain + msg;
      return PyErr_Format (PyExc_RuntimeError, "%s", msg.c_str());
    }

  return PyErr_Format (PyExc_RuntimeError, "PLIC: garbage return: 0x%s", fr->first_id_str().c_str());
}

static inline PY_LONG_LONG
PyIntLong_AsLongLong (PyObject *intlong)
{
  if (PyInt_Check (intlong))
    return PyInt_AS_LONG (intlong);
  else
    return PyLong_AsLongLong (intlong);
}

static inline std::string
PyString_As_std_string (PyObject *pystr)
{
  char *s = NULL;
  Py_ssize_t len = 0;
  PyString_AsStringAndSize (pystr, &s, &len);
  return std::string (s, len);
}

static inline Plic::uint64
PyAttr_As_uint64 (PyObject *pyobj, const char *attr_name)
{
  PyObject *o = PyObject_GetAttrString (pyobj, attr_name);
  if (o)
     return PyLong_AsUnsignedLongLong (o);
  return 0;
}

static inline PyObject*
PyString_From_std_string (const std::string &s)
{
  return PyString_FromStringAndSize (s.data(), s.size());
}

static inline int
PyDict_Take_Item (PyObject *pydict, const char *key, PyObject **pyitemp)
{
  int r = PyDict_SetItemString (pydict, key, *pyitemp);
  if (r >= 0)
    {
      Py_DECREF (*pyitemp);
      *pyitemp = NULL;
    }
  return r;
}

static inline int
PyList_Take_Item (PyObject *pylist, PyObject **pyitemp)
{
  int r = PyList_Append (pylist, *pyitemp);
  if (r >= 0)
    {
      Py_DECREF (*pyitemp);
      *pyitemp = NULL;
    }
  return r;
}

#ifndef PLIC_COUPLER
#define PLIC_COUPLER()  _plic_coupler_static
static struct _UnimplementedCoupler : public Plic::Coupler {
  virtual Plic::FieldBuffer* call_remote (Plic::FieldBuffer *fbcall) { return NULL; }
} _plic_coupler_static;
#endif

enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord;
struct NestedTypesRec;
struct NewRecord;
struct InnerRecord;
struct Refer2Inner;
struct SomeRecord;
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord;
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
static RAPICORN_UNUSED bool
plic_pyXFooRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (14);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "single_bool"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_num"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_float"); ERRORif (!item);
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "single_string"); ERRORif (!item);
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "sibling1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "sibling2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi3"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "multi4"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "enum_field"); ERRORif (!item);
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface1"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface2"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyDict_GetItemString (dictR, "iface3"); ERRORif (!item);
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyXFooRecord_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 14) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "single_bool", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "single_num", &pyfoR) < 0) goto error;
  pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "single_float", &pyfoR) < 0) goto error;
  pyfoR = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "single_string", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "sibling1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "sibling2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi3", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "multi4", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "enum_field", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromUnsignedLongLong (fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromUnsignedLongLong (fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface2", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromUnsignedLongLong (fbr.pop_object()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "iface3", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyXFooSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyXFooSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyIntSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyIntSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyFloatSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyFloatSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyStringSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyStringSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyString_From_std_string (fbr.pop_string()); ERRORifpy();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyExtensiveEnumSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyExtensiveEnumSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyRecordSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!plic_pyXFooRecord_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyRecordSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_pyXFooRecord_proto_pop (fbr); ERRORif (!pyfoR);
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pySequenceSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!plic_pyIntSequence_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pySequenceSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_pyIntSequence_proto_pop (fbr); ERRORif (!pyfoR);
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyInterfaceSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyInterfaceSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromUnsignedLongLong (fbr.pop_object()); ERRORifpy();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyNestedTypesRec_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "rec"); ERRORif (!item);
  if (!plic_pyXFooRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "seq"); ERRORif (!item);
  if (!plic_pyXFooSequence_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyNestedTypesRec_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = plic_pyXFooRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "rec", &pyfoR) < 0) goto error;
  pyfoR = plic_pyXFooSequence_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "seq", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyNestedTypesSeq_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    if (!plic_pyNestedTypesRec_proto_add (item, fb)) goto error;
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyNestedTypesSeq_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = plic_pyNestedTypesRec_proto_pop (fbr); ERRORif (!pyfoR);
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyNewRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "i"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "enum1"); ERRORif (!item);
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "xfs"); ERRORif (!item);
  if (!plic_pyXFooSequence_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "ntr"); ERRORif (!item);
  if (!plic_pyNestedTypesRec_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyNewRecord_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "i", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_evalue()); ERRORifpy();
  if (PyDict_Take_Item (dictR, "enum1", &pyfoR) < 0) goto error;
  pyfoR = plic_pyXFooSequence_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "xfs", &pyfoR) < 0) goto error;
  pyfoR = plic_pyNestedTypesRec_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "ntr", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyInnerRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (3);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "x"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "y"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "rec"); ERRORif (!item);
  if (!plic_pyNewRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyInnerRecord_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 3) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "x", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "y", &pyfoR) < 0) goto error;
  pyfoR = plic_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "rec", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyRefer2Inner_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (1);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "r"); ERRORif (!item);
  if (!plic_pyInnerRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyRefer2Inner_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 1) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = plic_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pySomeRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (4);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "r1"); ERRORif (!item);
  if (!plic_pyNewRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r2"); ERRORif (!item);
  if (!plic_pyNewRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r3"); ERRORif (!item);
  if (!plic_pyInnerRecord_proto_add (item, fb)) goto error;
  item = PyDict_GetItemString (dictR, "r4"); ERRORif (!item);
  if (!plic_pyInnerRecord_proto_add (item, fb)) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pySomeRecord_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 4) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = plic_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r1", &pyfoR) < 0) goto error;
  pyfoR = plic_pyNewRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r2", &pyfoR) < 0) goto error;
  pyfoR = plic_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r3", &pyfoR) < 0) goto error;
  pyfoR = plic_pyInnerRecord_proto_pop (fbr); ERRORif (!pyfoR);
  if (PyDict_Take_Item (dictR, "r4", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyQuickRecord_proto_add (PyObject *pyrec, Plic::FieldBuffer &dst)
{
  Plic::FieldBuffer &fb = dst.add_rec (2);
  bool success = false;
  PyObject *dictR = NULL, *item = NULL;
  dictR = PyObject_GetAttrString (pyrec, "__dict__"); ERRORif (!dictR);
  item = PyDict_GetItemString (dictR, "int1"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyDict_GetItemString (dictR, "int2"); ERRORif (!item);
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyQuickRecord_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_rec());
  if (fbr.remaining() != 2) ERRORpy ("PLIC: marshalling error: invalid record length");
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); ERRORif (!pyinstR);
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); ERRORif (!dictR);
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "int1", &pyfoR) < 0) goto error;
  pyfoR = PyLong_FromLongLong (fbr.pop_int64()); ERRORifpy ();
  if (PyDict_Take_Item (dictR, "int2", &pyfoR) < 0) goto error;
  pyret = pyinstR;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (dictR);
  if (pyret != pyinstR)
    Py_XDECREF (pyinstR);
  return pyret;
}

static RAPICORN_UNUSED bool
plic_pyQuickSequence_proto_add (PyObject *pyinput, Plic::FieldBuffer &dst)
{
  PyObject *pyseq = PySequence_Fast (pyinput, "expected a sequence"); if (!pyseq) return false;
  const ssize_t len = PySequence_Fast_GET_SIZE (pyseq); if (len < 0) return false;
  Plic::FieldBuffer &fb = dst.add_seq (len);
  bool success = false;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PySequence_Fast_GET_ITEM (pyseq, k);
    fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  }
  success = true;
 error:
  return success;
}
static RAPICORN_UNUSED PyObject*
plic_pyQuickSequence_proto_pop (Plic::FieldBufferReader &src)
{
  PyObject *listR = NULL, *pyfoR = NULL, *pyret = NULL;
  Plic::FieldBufferReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (fbr.pop_double()); ERRORifpy();
    if (PyList_Take_Item (listR, &pyfoR) < 0) goto error;
  }
  pyret = listR;
 error:
  Py_XDECREF (pyfoR);
  if (pyret != listR)
    Py_XDECREF (listR);
  return pyret;
}

static PyObject*
plic_pycall_FirstInterface_void_func (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x0ca10000511e8482ULL, 0xd7fca76824ef1339ULL, 0x9c10110ffb6e89b8ULL, 0x7aee6371c6eb9333ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_simple_method (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x0ca200003a5e02edULL, 0x169b0d3b86dc10cdULL, 0xc07a85a6dfe104adULL, 0xe8554a515ffc84b1ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_single_arg (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x0ca20000f96d1b2eULL, 0x54efdddfc11d9638ULL, 0xb5d0abcc8a0f16c8ULL, 0x957078d12b4b2fc0ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_single_arg2 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x0ca20000afefb8c4ULL, 0xb9d9952905d41bfdULL, 0xa2c44e813b1a8c4dULL, 0x8e440d5ecaeecec8ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_two_args (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000d1f5823fULL, 0x8538f2ffa1581dd0ULL, 0xc9e7d9d486336a46ULL, 0xc941f5292b4dcdfcULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_two_args2 (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000255fafa4ULL, 0x429116798ce5813eULL, 0x5eacea949f7cfe8eULL, 0x1f41fe0ca4311729ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_multi_args (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 5), *fr = NULL;
  fb.add_type_hash (0x0ca200005e6e8ea5ULL, 0x6f4fdd2d1d4b3bb3ULL, 0xbe7de84f81bcc353ULL, 0x91710698705b209aULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 5) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // n
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // r
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 3); // i
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 4); // s
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 5); // y
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_self_method (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000abd1f74aULL, 0x3f2d1aefb6d12a66ULL, 0x100e83849c144758ULL, 0x79488ee1596dab87ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // ba1
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // ba2
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_void_method (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x0ca1000027be4746ULL, 0xde7d9d84a2281ae4ULL, 0xdccb312da0062c83ULL, 0x62d76268f178e709ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_on_click2out (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x0ca20000a3ce0a03ULL, 0xaaaf9478a83b0f7cULL, 0x2664b179bda29105ULL, 0xb1f6ad88c5a0c98aULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyString_From_std_string (frr.pop_string()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_UIWidgetArea_on_click2in (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x0ca10000e511187cULL, 0x9ea59f646fca1b62ULL, 0x6180b0bf59637495ULL, 0xa99463469b646df9ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // command
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_QuickIface_simple_function (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x0ca100007178342eULL, 0x2c84375ab4c874afULL, 0xb5578ad147fe3033ULL, 0x392cdc1a7eebbb31ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // i
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_void (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 0), *fr = NULL;
  fb.add_type_hash (0x0ca10000f91c872eULL, 0xa90ceaec3b16df51ULL, 0x887b366247a3a612ULL, 0x6f4b7fab28f1ab12ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 0) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  if (fr) { delete fr; fr = NULL; }
  return None_INCREF();
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_bools (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca200008ffdba44ULL, 0xc998c0ffa6b486b1ULL, 0x9b4ea9f5a23d9c6dULL, 0xa7746e46026b843eULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_ints (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000cec55716ULL, 0x747c3602672780d1ULL, 0x1852bd2e467d1e91ULL, 0x61085ceb1b2bf816ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_int64 (PyIntLong_AsLongLong (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_floats (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca200006ede6737ULL, 0xc9ee1722db2fc583ULL, 0x4e5788c84a81be26ULL, 0x8c32f39e18ad9ab6ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyFloat_FromDouble (frr.pop_double()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_string (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000d07cd262ULL, 0xfc81ef2c220a8d45ULL, 0x59d0faae36ce56eaULL, 0x0990ad1d3c49827dULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_string (PyString_As_std_string (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyString_From_std_string (frr.pop_string()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_enum (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000d1a935c9ULL, 0xc1bdc5f48521c942ULL, 0xebcb3ede7a3fcbdcULL, 0xba634e15fbfde688ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_evalue (PyIntLong_AsLongLong (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_evalue()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_record (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca2000093f684d6ULL, 0x345260c4f912f67fULL, 0xa8f6c2af19dc877eULL, 0x176ffee81397fa2eULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  if (!plic_pyQuickRecord_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  if (!plic_pyQuickRecord_proto_add (item, fb)) goto error;
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = plic_pyQuickRecord_proto_pop (frr); ERRORif (!pyfoR);
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_sequence (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000f8d6703fULL, 0x9af82486dc8ce5aaULL, 0x3a6095e0829ba185ULL, 0x74e0fc82dbfa4b77ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  if (!plic_pyQuickSequence_proto_add (item, fb)) goto error;
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  if (!plic_pyQuickSequence_proto_add (item, fb)) goto error;
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = plic_pyQuickSequence_proto_pop (frr); ERRORif (!pyfoR);
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_interface (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca20000ed320c14ULL, 0x672f050fc4be01b7ULL, 0x239a6c63e8d3bb3eULL, 0x106046b369f7e804ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // optval
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromUnsignedLongLong (frr.pop_object()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_MethodTestInterface_method_with_quickiface (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 2), *fr = NULL;
  fb.add_type_hash (0x0ca200003fcf3b3dULL, 0x9eeea2d03769389cULL, 0xb168e0c6140b94e5ULL, 0x5b03b11a28cd7427ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 2) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // input
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 2); // iface0
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromUnsignedLongLong (frr.pop_object()); ERRORifpy();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
static PyObject*
plic_pycall_PureMethods_pure_method (PyObject *pyself, PyObject *pyargs)
{
  PyObject *item, *pyfoR = NULL;
  Plic::FieldBuffer &fb = *Plic::FieldBuffer::_new (4 + 1 + 1), *fr = NULL;
  fb.add_type_hash (0x0ca20000ac480384ULL, 0xd1df259f1d53b082ULL, 0x995d5e5b4bb2fcb4ULL, 0x83f6a92ee477fcd6ULL); // proc_id
  if (PyTuple_Size (pyargs) != 1 + 1) ERRORpy ("PLIC: wrong number of arguments");
  item = PyTuple_GET_ITEM (pyargs, 0);  // self
  fb.add_object (PyAttr_As_uint64 (item, "__plic__object__")); ERRORifpy();
  item = PyTuple_GET_ITEM (pyargs, 1); // f
  fb.add_double (PyFloat_AsDouble (item)); ERRORifpy();
  fr = PLIC_COUPLER().call_remote (&fb); // deletes fb
  ERRORifnotret (fr);
  if (fr) {
    Plic::FieldBufferReader frr (*fr);
    frr.skip(); // proc_id for return
    if (frr.remaining() == 1) {
        pyfoR = PyLong_FromLongLong (frr.pop_int64()); ERRORifpy ();
    }
    delete fr; fr = NULL;
  }
  return pyfoR;
 error:
  if (fr) delete fr;
  return NULL;
}
#define PLIC_PYSTUB_METHOD_DEFS() \
  { "_PLIC_0ca10000511e8482d7fca76824ef13399c10110ffb6e89b87aee6371c6eb9333", plic_pycall_FirstInterface_void_func, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca200003a5e02ed169b0d3b86dc10cdc07a85a6dfe104ade8554a515ffc84b1", plic_pycall_UIWidgetArea_simple_method, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000f96d1b2e54efdddfc11d9638b5d0abcc8a0f16c8957078d12b4b2fc0", plic_pycall_UIWidgetArea_single_arg, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000afefb8c4b9d9952905d41bfda2c44e813b1a8c4d8e440d5ecaeecec8", plic_pycall_UIWidgetArea_single_arg2, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000d1f5823f8538f2ffa1581dd0c9e7d9d486336a46c941f5292b4dcdfc", plic_pycall_UIWidgetArea_two_args, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000255fafa4429116798ce5813e5eacea949f7cfe8e1f41fe0ca4311729", plic_pycall_UIWidgetArea_two_args2, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca200005e6e8ea56f4fdd2d1d4b3bb3be7de84f81bcc35391710698705b209a", plic_pycall_UIWidgetArea_multi_args, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000abd1f74a3f2d1aefb6d12a66100e83849c14475879488ee1596dab87", plic_pycall_UIWidgetArea_self_method, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca1000027be4746de7d9d84a2281ae4dccb312da0062c8362d76268f178e709", plic_pycall_UIWidgetArea_void_method, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000a3ce0a03aaaf9478a83b0f7c2664b179bda29105b1f6ad88c5a0c98a", plic_pycall_UIWidgetArea_on_click2out, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca10000e511187c9ea59f646fca1b626180b0bf59637495a99463469b646df9", plic_pycall_UIWidgetArea_on_click2in, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca100007178342e2c84375ab4c874afb5578ad147fe3033392cdc1a7eebbb31", plic_pycall_QuickIface_simple_function, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca10000f91c872ea90ceaec3b16df51887b366247a3a6126f4b7fab28f1ab12", plic_pycall_MethodTestInterface_method_with_void, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca200008ffdba44c998c0ffa6b486b19b4ea9f5a23d9c6da7746e46026b843e", plic_pycall_MethodTestInterface_method_with_bools, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000cec55716747c3602672780d11852bd2e467d1e9161085ceb1b2bf816", plic_pycall_MethodTestInterface_method_with_ints, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca200006ede6737c9ee1722db2fc5834e5788c84a81be268c32f39e18ad9ab6", plic_pycall_MethodTestInterface_method_with_floats, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000d07cd262fc81ef2c220a8d4559d0faae36ce56ea0990ad1d3c49827d", plic_pycall_MethodTestInterface_method_with_string, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000d1a935c9c1bdc5f48521c942ebcb3ede7a3fcbdcba634e15fbfde688", plic_pycall_MethodTestInterface_method_with_enum, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca2000093f684d6345260c4f912f67fa8f6c2af19dc877e176ffee81397fa2e", plic_pycall_MethodTestInterface_method_with_record, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000f8d6703f9af82486dc8ce5aa3a6095e0829ba18574e0fc82dbfa4b77", plic_pycall_MethodTestInterface_method_with_sequence, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000ed320c14672f050fc4be01b7239a6c63e8d3bb3e106046b369f7e804", plic_pycall_MethodTestInterface_method_with_interface, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca200003fcf3b3d9eeea2d03769389cb168e0c6140b94e55b03b11a28cd7427", plic_pycall_MethodTestInterface_method_with_quickiface, METH_VARARGS, "pyRapicorn glue call" },\
  { "_PLIC_0ca20000ac480384d1df259f1d53b082995d5e5b4bb2fcb483f6a92ee477fcd6", plic_pycall_PureMethods_pure_method, METH_VARARGS, "pyRapicorn glue call" }
static PLIC_UNUSED PyMethodDef dummy[] = { PLIC_PYSTUB_METHOD_DEFS(), { 0 } };
