#include <rapicorn.hh>
 class ProtoRecord; class ProtoSequence; class ProtoArg; class ProtoMessage;
/* --- Generated by PLIC-CxxCaller --- */

// --- ServerHH Boilerplate ---
#include <rcore/plicutils.hh>
#include <rcore/rapicornsignal.hh>

// --- Interfaces (class declarations) ---

namespace MandatoryNamespace {
enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline XFooRecord () { single_bool = 0; single_num = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
};
struct XFooSequence {
  std::vector<bool> single_bool;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct IntSequence {
  std::vector<int> numx;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct FloatSequence {
  std::vector<double> fractalvalue;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct StringSequence {
  std::vector<std::string> blurb;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct ExtensiveEnumSequence {
  std::vector<ExtensiveEnum> enum_elements;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct RecordSequence {
  std::vector<XFooRecord> repeatedfield;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct SequenceSequence {
  std::vector<IntSequence> moreints;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
struct NestedTypesRec {
  XFooRecord      rec;
  XFooSequence    seq;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline NestedTypesRec () { }
};
struct NestedTypesSeq {
  std::vector<NestedTypesRec> ntr;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};
typedef int AliasInt;
typedef double AliasFloat;
typedef bool AliasBool;
typedef std::string AliasString;
typedef XFooRecord AliasRecord;
typedef XFooSequence AliasSequence;
typedef ExtensiveEnum AliasEnum;
struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    xfs;
  NestedTypesRec  ntr;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline NewRecord () { i = 0; enum1 = Enum1 (0); }
};

namespace Inner {
struct InnerRecord {
  int             x;
  int             y;
  NewRecord       rec;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline InnerRecord () { x = 0; y = 0; }
};
} // Inner
struct Refer2Inner {
  Inner::InnerRecord r;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline Refer2Inner () { }
};
} // MandatoryNamespace

namespace OtherNamespace {
struct SomeRecord {
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline SomeRecord () { }
};
} // OtherNamespace

namespace Auxdata {
typedef int bar;
typedef double x;
typedef std::string s;
} // Auxdata

namespace InterfaceTests {

class UIWidgetArea_Iface : public virtual Plic::SimpleServer {
protected:
  virtual /*Des*/         ~UIWidgetArea_Iface () = 0;
public:
  typedef Rapicorn::Signals::Signal<UIWidgetArea_Iface, void ()> Signal_void_signal;
  typedef Rapicorn::Signals::Signal<UIWidgetArea_Iface, double (UIWidgetArea_Iface &ba1, int someint)> Signal_sample_signal;
  // Signal_void_signal sig_void_signal;
  // Signal_sample_signal sig_sample_signal;
  virtual double          simple_method ();
  virtual double          single_arg    (int n);
  virtual double          single_arg2   (int n = 5);
  virtual double          two_args      (int n,
                                         double r);
  virtual double          two_args2     (int n = 6,
                                         double r = 7.7);
  virtual double          multi_args    (int n,
                                         double r,
                                         int i,
                                         const std::string &s = "String ding",
                                         double y = 5);
  virtual double          self_method   (UIWidgetArea_Iface &ba1,
                                         UIWidgetArea_Iface &ba2);
  virtual void            void_method   ();
  virtual std::string     on_click2out  ();
  virtual void            on_click2in   (const std::string &command);
};
class UIWidgetArea : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline UIWidgetArea () {}
public:
  inline UIWidgetArea (Plic::Coupler &c) { _pop_rpc (c); }
  // double          simple_method ();
  // double          single_arg    (int);
  // double          single_arg2   (int);
  // double          two_args      (int, double);
  // double          two_args2     (int, double);
  // double          multi_args    (int, double, int, const std::string&, double);
  // double          self_method   (UIWidgetArea&, UIWidgetArea&);
  // void            void_method   ();
  // std::string     on_click2out  ();
  // void            on_click2in   (const std::string&);
  inline UIWidgetArea_Iface& operator*  () const { return *dynamic_cast<UIWidgetArea_Iface*> (_iface()); }
  inline UIWidgetArea_Iface* operator-> () const { return dynamic_cast<UIWidgetArea_Iface*> (_iface()); }
  inline operator  UIWidgetArea_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class Parent_Iface : public virtual Plic::SimpleServer {
protected:
  virtual /*Des*/         ~Parent_Iface () = 0;
public:
};
class Parent : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline Parent () {}
public:
  inline Parent (Plic::Coupler &c) { _pop_rpc (c); }
  inline Parent_Iface& operator*  () const { return *dynamic_cast<Parent_Iface*> (_iface()); }
  inline Parent_Iface* operator-> () const { return dynamic_cast<Parent_Iface*> (_iface()); }
  inline operator  Parent_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class Child_Iface : public virtual Parent_Iface {
protected:
  virtual /*Des*/         ~Child_Iface () = 0;
public:
};
class Child : public Parent {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline Child () {}
public:
  inline Child (Plic::Coupler &c) { _pop_rpc (c); }
  inline Child_Iface& operator*  () const { return *dynamic_cast<Child_Iface*> (_iface()); }
  inline Child_Iface* operator-> () const { return dynamic_cast<Child_Iface*> (_iface()); }
  inline operator  Child_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class Descendant_Iface : public virtual Child_Iface {
protected:
  virtual /*Des*/         ~Descendant_Iface () = 0;
public:
};
class Descendant : public Child {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline Descendant () {}
public:
  inline Descendant (Plic::Coupler &c) { _pop_rpc (c); }
  inline Descendant_Iface& operator*  () const { return *dynamic_cast<Descendant_Iface*> (_iface()); }
  inline Descendant_Iface* operator-> () const { return dynamic_cast<Descendant_Iface*> (_iface()); }
  inline operator  Descendant_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class GrandChild_Iface : public virtual Descendant_Iface {
protected:
  virtual /*Des*/         ~GrandChild_Iface () = 0;
public:
};
class GrandChild : public Descendant {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline GrandChild () {}
public:
  inline GrandChild (Plic::Coupler &c) { _pop_rpc (c); }
  inline GrandChild_Iface& operator*  () const { return *dynamic_cast<GrandChild_Iface*> (_iface()); }
  inline GrandChild_Iface* operator-> () const { return dynamic_cast<GrandChild_Iface*> (_iface()); }
  inline operator  GrandChild_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord {
  int             int1;
  int             int2;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
  inline QuickRecord () { int1 = 0; int2 = 0; }
};
struct QuickSequence {
  std::vector<double> somefloat;
  bool proto_add  (Plic::FieldBuffer&) const;
  bool proto_pop  (Plic::FieldBufferReader&);
};

class MethodTestInterface_Iface : public virtual Plic::SimpleServer {
protected:
  virtual /*Des*/         ~MethodTestInterface_Iface () = 0;
public:
  virtual void            method_with_void      ();
  virtual bool            method_with_bools     (bool input,
                                                 bool optval = 0);
  virtual int             method_with_ints      (int input,
                                                 int optval = -2);
  virtual double          method_with_floats    (double input,
                                                 double optval = 309.9);
  virtual std::string     method_with_string    (const std::string &input,
                                                 const std::string &optval = "default");
  virtual QuickEnum       method_with_enum      (QuickEnum input,
                                                 QuickEnum optval = QuickEnum (0));
  virtual QuickRecord     method_with_record    (const QuickRecord &input,
                                                 const QuickRecord &optval = QuickRecord());
  virtual QuickSequence   method_with_sequence  (const QuickSequence &input,
                                                 const QuickSequence &optval = QuickSequence());
  virtual GrandChild_Iface* method_with_interface (GrandChild_Iface &input,
                                                   GrandChild_Iface &optval = *(GrandChild_Iface*) NULL);
};
class MethodTestInterface : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline MethodTestInterface () {}
public:
  inline MethodTestInterface (Plic::Coupler &c) { _pop_rpc (c); }
  // void            method_with_void      ();
  // bool            method_with_bools     (bool, bool);
  // int             method_with_ints      (int, int);
  // double          method_with_floats    (double, double);
  // std::string     method_with_string    (const std::string&, const std::string&);
  // QuickEnum       method_with_enum      (QuickEnum, QuickEnum);
  // QuickRecord     method_with_record    (const QuickRecord&, const QuickRecord&);
  // QuickSequence   method_with_sequence  (const QuickSequence&, const QuickSequence&);
  // GrandChild*     method_with_interface (GrandChild&, GrandChild&);
  inline MethodTestInterface_Iface& operator*  () const { return *dynamic_cast<MethodTestInterface_Iface*> (_iface()); }
  inline MethodTestInterface_Iface* operator-> () const { return dynamic_cast<MethodTestInterface_Iface*> (_iface()); }
  inline operator  MethodTestInterface_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // InterfaceTests

namespace RapicornPlicTest {
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};

class ButtonArea_Iface : public virtual Plic::SimpleServer {
protected:
  virtual /*Des*/         ~ButtonArea_Iface () = 0;
public:
  typedef Rapicorn::Signals::Signal<ButtonArea_Iface, bool (), Rapicorn::Signals::CollectorUntil0<bool> > Signal_check_activate;
  typedef Rapicorn::Signals::Signal<ButtonArea_Iface, void ()> Signal_activate;
  // Signal_check_activate sig_check_activate;
  // Signal_activate sig_activate;
};
class ButtonArea : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline ButtonArea () {}
public:
  inline ButtonArea (Plic::Coupler &c) { _pop_rpc (c); }
  inline ButtonArea_Iface& operator*  () const { return *dynamic_cast<ButtonArea_Iface*> (_iface()); }
  inline ButtonArea_Iface* operator-> () const { return dynamic_cast<ButtonArea_Iface*> (_iface()); }
  inline operator  ButtonArea_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};

class PureMethods_Iface : public virtual Plic::SimpleServer {
protected:
  virtual /*Des*/         ~PureMethods_Iface () = 0;
public:
  virtual int             pure_method (double f) = 0;
};
class PureMethods : public virtual Plic::SmartHandle {
protected:
  inline Plic::SimpleServer* _iface() const { return (Plic::SimpleServer*) _void_iface(); }
  inline PureMethods () {}
public:
  inline PureMethods (Plic::Coupler &c) { _pop_rpc (c); }
  // int             pure_method (double);
  inline PureMethods_Iface& operator*  () const { return *dynamic_cast<PureMethods_Iface*> (_iface()); }
  inline PureMethods_Iface* operator-> () const { return dynamic_cast<PureMethods_Iface*> (_iface()); }
  inline operator  PureMethods_Iface&  () const { return operator*(); }
  inline operator _unspecified_bool_type () const { return _is_null() ? NULL : _unspecified_bool_true(); }
};
} // RapicornPlicTest

/* --- Generated by PLIC-CxxCaller --- */

// --- Interface Skeletons ---

namespace InterfaceTests {

double
UIWidgetArea_Iface::simple_method ()
{
  return 0; // FIXME
}

double
UIWidgetArea_Iface::single_arg (int n)
{
  return 0; // FIXME
}

double
UIWidgetArea_Iface::single_arg2 (int n)
{
  return 0; // FIXME
}

double
UIWidgetArea_Iface::two_args (int n,
                              double r)
{
  return 0; // FIXME
}

double
UIWidgetArea_Iface::two_args2 (int n,
                               double r)
{
  return 0; // FIXME
}

double
UIWidgetArea_Iface::multi_args (int n,
                                double r,
                                int i,
                                const std::string &s,
                                double y)
{
  return 0; // FIXME
}

double
UIWidgetArea_Iface::self_method (UIWidgetArea_Iface &ba1,
                                 UIWidgetArea_Iface &ba2)
{
  return 0; // FIXME
}

void
UIWidgetArea_Iface::void_method ()
{
}

std::string
UIWidgetArea_Iface::on_click2out ()
{
  return 0; // FIXME
}

void
UIWidgetArea_Iface::on_click2in (const std::string &command)
{
}

void
MethodTestInterface_Iface::method_with_void ()
{
}

bool
MethodTestInterface_Iface::method_with_bools (bool input,
                                              bool optval)
{
  return 0; // FIXME
}

int
MethodTestInterface_Iface::method_with_ints (int input,
                                             int optval)
{
  return 0; // FIXME
}

double
MethodTestInterface_Iface::method_with_floats (double input,
                                               double optval)
{
  return 0; // FIXME
}

std::string
MethodTestInterface_Iface::method_with_string (const std::string &input,
                                               const std::string &optval)
{
  return 0; // FIXME
}

QuickEnum
MethodTestInterface_Iface::method_with_enum (QuickEnum input,
                                             QuickEnum optval)
{
  return QuickEnum (0); // FIXME
}

QuickRecord
MethodTestInterface_Iface::method_with_record (const QuickRecord &input,
                                               const QuickRecord &optval)
{
  return QuickRecord(); // FIXME
}

QuickSequence
MethodTestInterface_Iface::method_with_sequence (const QuickSequence &input,
                                                 const QuickSequence &optval)
{
  return QuickSequence(); // FIXME
}

GrandChild_Iface*
MethodTestInterface_Iface::method_with_interface (GrandChild_Iface &input,
                                                  GrandChild_Iface &optval)
{
  return (GrandChild_Iface*) NULL; // FIXME
}
} // InterfaceTests

