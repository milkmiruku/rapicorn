/* --- Generated by Rapicorn-PyCStub --- */

#include <Python.h> // must be included first to configure std headers
#include <string>

#include "protocol-pb2.hh"
typedef Rapicorn::Rope::RemoteProcedure RemoteProcedure;
typedef Rapicorn::Rope::RemoteProcedure_Sequence RemoteProcedure_Sequence;
typedef Rapicorn::Rope::RemoteProcedure_Record RemoteProcedure_Record;
typedef Rapicorn::Rope::RemoteProcedure_Argument RemoteProcedure_Argument;

#include <core/rapicorn-core.hh>

#define GOTO_ERROR()    goto error

static inline PY_LONG_LONG
PyIntLong_AsLongLong (PyObject *intlong)
{
  if (PyInt_Check (intlong))
    return PyInt_AS_LONG (intlong);
  else
    return PyLong_AsLongLong (intlong);
}

static bool pyrope_send_message (unsigned int, RemoteProcedure_Record&);
#ifndef HAVE_PYROPE_SEND_MESSAGE
static bool pyrope_send_message (unsigned int, RemoteProcedure_Record&)
{ return false; } // testing stub
#endif

enum Empty {
};
enum Enum1 {
  E1_A = 1,
};
enum Enum1c {
  E1C_A = 1,
};
enum Enum2 {
  E2_A = 1,
  E2_B = 2,
};
enum Enum2c {
  E2C_A = 1,
  E2C_B = 2,
};
enum Enum3 {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
enum Enum3c {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
enum Enum4a {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
enum Enum4b {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
enum Enum4c {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
enum Enum4d {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
enum ExtensiveEnum {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = -16,
  V26 = 16,
  V27 = -16,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 42,
  V36 = 42, // "foo""4"
};
struct XFooRecord;
struct NestedTypesRec;
struct NewRecord;
struct InnerRecord;
struct Refer2Inner;
struct SomeRecord;
enum QuickEnum {
  ZERO = 0,
};
struct QuickRecord;
enum ClickType {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
};
static bool rope_frompy_XFooRecord (PyObject*, RemoteProcedure_Record&);

struct XFooSequence {
  bool            single_bool;
};
static bool rope_frompy_XFooSequence (PyObject*, RemoteProcedure_Sequence&);

struct IntSequence {
  int             numx;
};
static bool rope_frompy_IntSequence (PyObject*, RemoteProcedure_Sequence&);

struct FloatSequence {
  double          fractalvalue;
};
static bool rope_frompy_FloatSequence (PyObject*, RemoteProcedure_Sequence&);

struct StringSequence {
  std::string     blurb;
};
static bool rope_frompy_StringSequence (PyObject*, RemoteProcedure_Sequence&);

struct ExtensiveEnumSequence {
  ExtensiveEnum   enum_elements;
};
static bool rope_frompy_ExtensiveEnumSequence (PyObject*, RemoteProcedure_Sequence&);

struct RecordSequence {
  XFooRecord      *repeatedfield;
};
static bool rope_frompy_RecordSequence (PyObject*, RemoteProcedure_Sequence&);

struct SequenceSequence {
  IntSequence     *moreints;
};
static bool rope_frompy_SequenceSequence (PyObject*, RemoteProcedure_Sequence&);

struct NestedTypesRec {
  XFooRecord      *rec;
  XFooSequence    *seq;
};
static bool rope_frompy_NestedTypesRec (PyObject*, RemoteProcedure_Record&);

struct NestedTypesSeq {
  NestedTypesRec  *ntr;
};
static bool rope_frompy_NestedTypesSeq (PyObject*, RemoteProcedure_Sequence&);

struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    *xfs;
  NestedTypesRec  *ntr;
};
static bool rope_frompy_NewRecord (PyObject*, RemoteProcedure_Record&);

struct InnerRecord {
  int             x;
  int             y;
  NewRecord       *rec;
};
static bool rope_frompy_InnerRecord (PyObject*, RemoteProcedure_Record&);

struct Refer2Inner {
  InnerRecord     *r;
};
static bool rope_frompy_Refer2Inner (PyObject*, RemoteProcedure_Record&);

struct SomeRecord {
  NewRecord       *r1;
  NewRecord       *r2;
  InnerRecord     *r3;
  InnerRecord     *r4;
};
static bool rope_frompy_SomeRecord (PyObject*, RemoteProcedure_Record&);

struct QuickRecord {
  int             int1;
  int             int2;
};
static bool rope_frompy_QuickRecord (PyObject*, RemoteProcedure_Record&);

struct QuickSequence {
  double          somefloat;
};
static bool rope_frompy_QuickSequence (PyObject*, RemoteProcedure_Sequence&);

static bool RAPICORN_UNUSED
rope_frompy_XFooRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "single_bool"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "single_num"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "single_float"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "single_string"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "sibling1"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "sibling2"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "multi1"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "multi2"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "multi3"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "multi4"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "enum_field"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_XFooRecord (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 11) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "single_bool", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (1);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "single_num", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (2);
  if (!field->has_vdouble()) GOTO_ERROR();
  pyfoR = PyFloat_FromDouble (field->vdouble()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "single_float", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (3);
  if (!field->has_vstring()) GOTO_ERROR();
  { const std::string &sp = field->vstring();
    pyfoR = PyString_FromStringAndSize (sp.data(), sp.size()); }
  if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "single_string", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (4);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "sibling1", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (5);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "sibling2", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (6);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "multi1", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (7);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "multi2", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (8);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "multi3", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (9);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "multi4", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (10);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "enum_field", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_XFooSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_XFooSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vint64_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (rps.vint64 (k)); if (!pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_IntSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_IntSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vint64_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (rps.vint64 (k)); if (!pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_FloatSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_FloatSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vdouble_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (rps.vdouble (k)); if (!pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_StringSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_StringSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vstring_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    { const std::string &sp = rps.vstring (k);
      pyfoR = PyString_FromStringAndSize (sp.data(), sp.size()); }
    if (!pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_ExtensiveEnumSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_ExtensiveEnumSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vint64_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyLong_FromLongLong (rps.vint64 (k)); if (!pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_RecordSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    if (!rope_frompy_XFooRecord (item, *rps.add_vrec())) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_RecordSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vrec_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    if (!rope_topy_XFooRecord (rps.vrec (k), &pyfoR) || !pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_SequenceSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    if (!rope_frompy_IntSequence (item, *rps.add_vseq())) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_SequenceSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vseq_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    if (!rope_topy_IntSequence (rps.vseq (k), &pyfoR) || !pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_NestedTypesRec (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "rec"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_XFooRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "seq"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_XFooSequence (item, *field->mutable_vseq())) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_NestedTypesRec (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 2) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_XFooRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "rec", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (1);
  if (!field->has_vseq()) GOTO_ERROR();
  if (!rope_topy_XFooSequence (field->vseq(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "seq", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_NestedTypesSeq (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    if (!rope_frompy_NestedTypesRec (item, *rps.add_vrec())) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_NestedTypesSeq (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vrec_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    if (!rope_topy_NestedTypesRec (rps.vrec (k), &pyfoR) || !pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_NewRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "i"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "enum1"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "xfs"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_XFooSequence (item, *field->mutable_vseq())) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "ntr"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_NestedTypesRec (item, *field->mutable_vrec())) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_NewRecord (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 4) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "i", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (1);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "enum1", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (2);
  if (!field->has_vseq()) GOTO_ERROR();
  if (!rope_topy_XFooSequence (field->vseq(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "xfs", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (3);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_NestedTypesRec (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "ntr", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_InnerRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "x"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "y"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "rec"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_NewRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_InnerRecord (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 3) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "x", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (1);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "y", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (2);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_NewRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "rec", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_Refer2Inner (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "r"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_InnerRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_Refer2Inner (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 1) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_InnerRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "r", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_SomeRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "r1"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_NewRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "r2"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_NewRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "r3"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_InnerRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "r4"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  if (!rope_frompy_InnerRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_SomeRecord (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 4) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_NewRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "r1", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (1);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_NewRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "r2", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (2);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_InnerRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "r3", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (3);
  if (!field->has_vrec()) GOTO_ERROR();
  if (!rope_topy_InnerRecord (field->vrec(), &pyfoR) || !pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "r4", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool
pyrope__UIWidgetArea_simple_method (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  bool success = false;
  if (PyTuple_Size (args) < 0) GOTO_ERROR();
  success = pyrope_send_message (0x0def0001, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_single_arg (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0002, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_single_arg2 (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0003, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_two_args (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 2) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 1);
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0004, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_two_args2 (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 2) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 1);
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0005, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_multi_args (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 5) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 1);
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 2);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 3);
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 4);
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0006, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_self_method (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 2) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 1);
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0007, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_void_method (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  bool success = false;
  if (PyTuple_Size (args) < 0) GOTO_ERROR();
  success = pyrope_send_message (0x0def0008, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_on_click2out (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  bool success = false;
  if (PyTuple_Size (args) < 0) GOTO_ERROR();
  success = pyrope_send_message (0x0def0009, rpr);
 error:
  return success;
}
static bool
pyrope__UIWidgetArea_on_click2in (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def000a, rpr);
 error:
  return success;
}





static bool RAPICORN_UNUSED
rope_frompy_QuickRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "int1"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  item = PyDict_GetItemString (dictR, "int2"); if (!dictR) GOTO_ERROR();
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_QuickRecord (const RemoteProcedure_Record &rpr, PyObject **pyop)
{
  PyObject *pyinstR = NULL, *dictR = NULL, *pyfoR = NULL;
  const RemoteProcedure_Argument *field;
  bool success = false;
  pyinstR = PyInstance_NewRaw ((PyObject*) &PyBaseObject_Type, NULL); if (!pyinstR) GOTO_ERROR();
  dictR = PyObject_GetAttrString (pyinstR, "__dict__"); if (!dictR) GOTO_ERROR();
  if (rpr.fields_size() < 2) GOTO_ERROR();
  field = &rpr.fields (0);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "int1", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  field = &rpr.fields (1);
  if (!field->has_vint64()) GOTO_ERROR();
  pyfoR = PyLong_FromLongLong (field->vint64()); if (!pyfoR) GOTO_ERROR();
  if (PyDict_SetItemString (dictR, "int2", pyfoR) < 0) GOTO_ERROR();
  else Py_DECREF (pyfoR);
  pyfoR = NULL;
  *pyop = (Py_INCREF (pyinstR), pyinstR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (pyinstR);
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_QuickSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) GOTO_ERROR();
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  }
  success = true;
 error:
  return success;
}
static bool RAPICORN_UNUSED
rope_topy_QuickSequence (const RemoteProcedure_Sequence &rps, PyObject **pyop)
{
  PyObject *listR = NULL, *pyfoR = NULL;
  bool success = false;
  const size_t len = rps.vdouble_size();
  listR = PyList_New (len); if (!listR) GOTO_ERROR();
  for (size_t k = 0; k < len; k++) {
    pyfoR = PyFloat_FromDouble (rps.vdouble (k)); if (!pyfoR) GOTO_ERROR();
    if (PyList_SetItem (listR, k, pyfoR) < 0) GOTO_ERROR();
    pyfoR = NULL;
  }
  *pyop = (Py_INCREF (listR), listR);
  success = true;
 error:
  Py_XDECREF (pyfoR);
  Py_XDECREF (listR);
  return success;
}

static bool
pyrope__MethodTestInterface_method_with_bools (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def000b, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_ints (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def000c, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_floats (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def000d, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_string (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def000e, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_enum (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def000f, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_record (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  if (!rope_frompy_QuickRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  success = pyrope_send_message (0x0def0010, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_sequence (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  if (!rope_frompy_QuickSequence (item, *field->mutable_vseq())) GOTO_ERROR();
  success = pyrope_send_message (0x0def0011, rpr);
 error:
  return success;
}
static bool
pyrope__MethodTestInterface_method_with_interface (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) GOTO_ERROR();
  success = pyrope_send_message (0x0def0012, rpr);
 error:
  return success;
}

static bool
pyrope__SomeInterface_use_record (PyObject *self, PyObject *args, PyObject **retp)
{
  RemoteProcedure_Record rpr;
  RemoteProcedure_Argument *field;
  PyObject *item;
  bool success = false;
  if (PyTuple_Size (args) < 1) GOTO_ERROR();
  item = PyTuple_GET_ITEM (args, 0);
  field = rpr.add_fields();
  if (!rope_frompy_SomeRecord (item, *field->mutable_vrec())) GOTO_ERROR();
  success = pyrope_send_message (0x0def0013, rpr);
 error:
  return success;
}


static bool RAPICORN_UNUSED
pyrope_trampoline_switch (unsigned int _py_id, PyObject *_py_self, PyObject *_py_args, PyObject **_py_retp)
{
  switch (_py_id) {
  case 0x0def0001: // UIWidgetArea::simple_method
    return pyrope__UIWidgetArea_simple_method (_py_self, _py_args, _py_retp);
  case 0x0def0002: // UIWidgetArea::single_arg
    return pyrope__UIWidgetArea_single_arg (_py_self, _py_args, _py_retp);
  case 0x0def0003: // UIWidgetArea::single_arg2
    return pyrope__UIWidgetArea_single_arg2 (_py_self, _py_args, _py_retp);
  case 0x0def0004: // UIWidgetArea::two_args
    return pyrope__UIWidgetArea_two_args (_py_self, _py_args, _py_retp);
  case 0x0def0005: // UIWidgetArea::two_args2
    return pyrope__UIWidgetArea_two_args2 (_py_self, _py_args, _py_retp);
  case 0x0def0006: // UIWidgetArea::multi_args
    return pyrope__UIWidgetArea_multi_args (_py_self, _py_args, _py_retp);
  case 0x0def0007: // UIWidgetArea::self_method
    return pyrope__UIWidgetArea_self_method (_py_self, _py_args, _py_retp);
  case 0x0def0008: // UIWidgetArea::void_method
    return pyrope__UIWidgetArea_void_method (_py_self, _py_args, _py_retp);
  case 0x0def0009: // UIWidgetArea::on_click2out
    return pyrope__UIWidgetArea_on_click2out (_py_self, _py_args, _py_retp);
  case 0x0def000a: // UIWidgetArea::on_click2in
    return pyrope__UIWidgetArea_on_click2in (_py_self, _py_args, _py_retp);
  case 0x0def000b: // MethodTestInterface::method_with_bools
    return pyrope__MethodTestInterface_method_with_bools (_py_self, _py_args, _py_retp);
  case 0x0def000c: // MethodTestInterface::method_with_ints
    return pyrope__MethodTestInterface_method_with_ints (_py_self, _py_args, _py_retp);
  case 0x0def000d: // MethodTestInterface::method_with_floats
    return pyrope__MethodTestInterface_method_with_floats (_py_self, _py_args, _py_retp);
  case 0x0def000e: // MethodTestInterface::method_with_string
    return pyrope__MethodTestInterface_method_with_string (_py_self, _py_args, _py_retp);
  case 0x0def000f: // MethodTestInterface::method_with_enum
    return pyrope__MethodTestInterface_method_with_enum (_py_self, _py_args, _py_retp);
  case 0x0def0010: // MethodTestInterface::method_with_record
    return pyrope__MethodTestInterface_method_with_record (_py_self, _py_args, _py_retp);
  case 0x0def0011: // MethodTestInterface::method_with_sequence
    return pyrope__MethodTestInterface_method_with_sequence (_py_self, _py_args, _py_retp);
  case 0x0def0012: // MethodTestInterface::method_with_interface
    return pyrope__MethodTestInterface_method_with_interface (_py_self, _py_args, _py_retp);
  case 0x0def0013: // SomeInterface::use_record
    return pyrope__SomeInterface_use_record (_py_self, _py_args, _py_retp);
  default:
    return false;
  }
}
