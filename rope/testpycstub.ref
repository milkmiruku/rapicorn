/* --- Generated by Rapicorn-PyCStub --- */

#include <Python.h> // must be included first to configure std headers
#include <string>

#include "protocol-pb2.hh"
typedef Rapicorn::Rope::RemoteProcedure RemoteProcedure;
typedef Rapicorn::Rope::RemoteProcedure_Sequence RemoteProcedure_Sequence;
typedef Rapicorn::Rope::RemoteProcedure_Record RemoteProcedure_Record;
typedef Rapicorn::Rope::RemoteProcedure_Argument RemoteProcedure_Argument;

#include <core/rapicornsignal.hh>

static inline PY_LONG_LONG
PyIntLong_AsLongLong (PyObject *intlong)
{
  if (PyInt_Check (intlong))
    return PyInt_AS_LONG (intlong);
  else
    return PyLong_AsLongLong (intlong);
}

enum Empty {
};
enum Enum1 {
  E1_A = 1,};
enum Enum1c {
  E1C_A = 1,};
enum Enum2 {
  E2_A = 1,  E2_B = 2,};
enum Enum2c {
  E2C_A = 1,  E2C_B = 2,};
enum Enum3 {
  E3_A = 1,  E3_B = 2,  E3_C = 3,};
enum Enum3c {
  E3C_A = 1,  E3C_B = 2,  E3C_C = 3,};
enum Enum4a {
  E4A_A = 1,  E4A_B = 2,  E4A_C = 3,  E4A_D = 4,};
enum Enum4b {
  E4B_A = 1,  E4B_B = 2,  E4B_C = 3,  E4B_D = 4,};
enum Enum4c {
  E4C_A = 1,  E4C_B = 2,  E4C_C = 3,  E4C_D = 4,};
enum Enum4d {
  E4D_A = 1,  E4D_B = 2,  E4D_C = 3,  E4D_D = 4,};
enum ExtensiveEnum {
  V1a = 1,  V1b = 1,  V2 = 2,  V3 = 3,  V4 = 4,  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,  V10 = 10,  V11 = 11,  V12 = 12,  V13 = 13,  V14 = 14,  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,  V21 = 21,  V22 = 22,  V23 = 23,  V24 = 24,  V25 = -16,  V26 = 16,  V27 = -16,  V28 = -28,  V30 = 42,  V31 = 43,  V32 = 42,  V33 = 43,  V34 = 44, // "foo"
  V35 = 42,  V36 = 42, // "foo""4"
};
struct XFooRecord;
struct NestedTypesRec;
struct NewRecord;
struct InnerRecord;
struct Refer2Inner;
struct SomeRecord;
enum ClickType {
  CLICK_ON_PRESS = 1,  CLICK_ON_RELEASE = 2,  CLICK_SLOW_REPEAT = 3,  CLICK_FAST_REPEAT = 4,  CLICK_KEY_REPEAT = 5,};
struct XFooRecord {
  bool            single_bool;
  int             single_num;
  double          single_float;
  std::string     single_string;
  int             sibling1;
  int             sibling2;
  int             multi1;
  int             multi2;
  int             multi3;
  int             multi4;
  ExtensiveEnum   enum_field;
};
static bool rope_frompy_XFooRecord (PyObject*, RemoteProcedure_Record&);

struct XFooSequence {
  bool            single_bool;
};
static bool rope_frompy_XFooSequence (PyObject*, RemoteProcedure_Sequence&);

struct IntSequence {
  int             numx;
};
static bool rope_frompy_IntSequence (PyObject*, RemoteProcedure_Sequence&);

struct FloatSequence {
  double          fractalvalue;
};
static bool rope_frompy_FloatSequence (PyObject*, RemoteProcedure_Sequence&);

struct StringSequence {
  std::string     blurb;
};
static bool rope_frompy_StringSequence (PyObject*, RemoteProcedure_Sequence&);

struct ExtensiveEnumSequence {
  ExtensiveEnum   enum_elements;
};
static bool rope_frompy_ExtensiveEnumSequence (PyObject*, RemoteProcedure_Sequence&);

struct RecordSequence {
  XFooRecord      *repeatedfield;
};
static bool rope_frompy_RecordSequence (PyObject*, RemoteProcedure_Sequence&);

struct SequenceSequence {
  IntSequence     *moreints;
};
static bool rope_frompy_SequenceSequence (PyObject*, RemoteProcedure_Sequence&);

struct NestedTypesRec {
  XFooRecord      *rec;
  XFooSequence    *seq;
};
static bool rope_frompy_NestedTypesRec (PyObject*, RemoteProcedure_Record&);

struct NestedTypesSeq {
  NestedTypesRec  *ntr;
};
static bool rope_frompy_NestedTypesSeq (PyObject*, RemoteProcedure_Sequence&);

struct NewRecord {
  int             i;
  Enum1           enum1;
  XFooSequence    *xfs;
  NestedTypesRec  *ntr;
};
static bool rope_frompy_NewRecord (PyObject*, RemoteProcedure_Record&);

struct InnerRecord {
  int             x;
  int             y;
  NewRecord       *rec;
};
static bool rope_frompy_InnerRecord (PyObject*, RemoteProcedure_Record&);

struct Refer2Inner {
  InnerRecord     *r;
};
static bool rope_frompy_Refer2Inner (PyObject*, RemoteProcedure_Record&);

struct SomeRecord {
  NewRecord       *r1;
  NewRecord       *r2;
  InnerRecord     *r3;
  InnerRecord     *r4;
};
static bool rope_frompy_SomeRecord (PyObject*, RemoteProcedure_Record&);

static bool RAPICORN_UNUSED
rope_frompy_XFooRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) goto error;
  item = PyDict_GetItemString (dictR, "single_bool"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "single_num"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "single_float"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "single_string"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vstring (PyString_AsString (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "sibling1"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "sibling2"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "multi1"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "multi2"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "multi3"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "multi4"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "enum_field"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_XFooSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_IntSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_FloatSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vdouble (PyFloat_AsDouble (item)); if (PyErr_Occurred()) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_StringSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vstring (PyString_AsString (item)); if (PyErr_Occurred()) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_ExtensiveEnumSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    rps.add_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_RecordSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    if (!rope_frompy_XFooRecord (item, *rps.add_vrec())) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_SequenceSequence (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    if (!rope_frompy_IntSequence (item, *rps.add_vseq())) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_NestedTypesRec (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) goto error;
  item = PyDict_GetItemString (dictR, "rec"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_XFooRecord (item, *field->mutable_vrec())) goto error;
  item = PyDict_GetItemString (dictR, "seq"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_XFooSequence (item, *field->mutable_vseq())) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_NestedTypesSeq (PyObject *list, RemoteProcedure_Sequence &rps)
{
  bool success = false;
  const ssize_t len = PyList_Size (list); if (len < 0) goto error;
  for (ssize_t k = 0; k < len; k++) {
    PyObject *item = PyList_GET_ITEM (list, k);
    if (!rope_frompy_NestedTypesRec (item, *rps.add_vrec())) goto error;
  }
  success = true;
 error:
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_NewRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) goto error;
  item = PyDict_GetItemString (dictR, "i"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "enum1"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "xfs"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_XFooSequence (item, *field->mutable_vseq())) goto error;
  item = PyDict_GetItemString (dictR, "ntr"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_NestedTypesRec (item, *field->mutable_vrec())) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_InnerRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) goto error;
  item = PyDict_GetItemString (dictR, "x"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "y"); if (!dictR) goto error;
  field = rpr.add_fields();
  field->set_vint64 (PyIntLong_AsLongLong (item)); if (PyErr_Occurred()) goto error;
  item = PyDict_GetItemString (dictR, "rec"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_NewRecord (item, *field->mutable_vrec())) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_Refer2Inner (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) goto error;
  item = PyDict_GetItemString (dictR, "r"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_InnerRecord (item, *field->mutable_vrec())) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}

static bool RAPICORN_UNUSED
rope_frompy_SomeRecord (PyObject *instance, RemoteProcedure_Record &rpr)
{
  RemoteProcedure_Argument *field;
  PyObject *dictR = NULL, *item = NULL;
  bool success = false;
  dictR = PyObject_GetAttrString (instance, "__dict__"); if (!dictR) goto error;
  item = PyDict_GetItemString (dictR, "r1"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_NewRecord (item, *field->mutable_vrec())) goto error;
  item = PyDict_GetItemString (dictR, "r2"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_NewRecord (item, *field->mutable_vrec())) goto error;
  item = PyDict_GetItemString (dictR, "r3"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_InnerRecord (item, *field->mutable_vrec())) goto error;
  item = PyDict_GetItemString (dictR, "r4"); if (!dictR) goto error;
  field = rpr.add_fields();
  if (!rope_frompy_InnerRecord (item, *field->mutable_vrec())) goto error;
  success = true;
 error:
  Py_XDECREF (dictR);
  return success;
}

