dnl ******************************
dnl *** include special macros ***
dnl ******************************
builtin(include, acbirnet.m4)dnl

#
# Configure script for Rapicorn
#
AC_INIT
AC_CONFIG_SRCDIR([rapicorn/rapicorn.hh])
AM_CONFIG_HEADER(configure.h)
AC_PREREQ(2.57)

#
# Rapicorn version numbers
#
AC_DIVERT_BEFORE_HELP([
RAPICORN_MAJOR_VERSION=0
RAPICORN_MINOR_VERSION=1
RAPICORN_MICRO_VERSION=1
RAPICORN_INTERFACE_AGE=0
RAPICORN_BINARY_AGE=0
])
dnl#
dnl# Making releases:
dnl#   RAPICORN_MICRO_VERSION += 1;
dnl#   RAPICORN_INTERFACE_AGE += 1;
dnl#   RAPICORN_BINARY_AGE += 1;
dnl# if any functions have been added, set RAPICORN_INTERFACE_AGE to 0.
dnl# if backwards compatibility has been broken,
dnl# set RAPICORN_BINARY_AGE _and_ RAPICORN_INTERFACE_AGE to 0.
dnl# RAPICORN_RELEASE_CANDIDATE may contain rc[0-9]+ or nothing
RAPICORN_RELEASE_CANDIDATE= #rc1

# version number setup
RAPICORN_VERSION=$RAPICORN_MAJOR_VERSION.$RAPICORN_MINOR_VERSION.$RAPICORN_MICRO_VERSION
RAPICORN_PACKAGE_VERSION=$RAPICORN_VERSION # -rcZ to be appended...
if test -n "$RAPICORN_RELEASE_CANDIDATE" ; then
    RAPICORN_PACKAGE_VERSION=$RAPICORN_VERSION-$RAPICORN_RELEASE_CANDIDATE
fi
BIN_VERSION=$RAPICORN_VERSION    # binary version, used for binaries and paths
AC_SUBST(RAPICORN_MAJOR_VERSION)
AC_SUBST(RAPICORN_MINOR_VERSION)
AC_SUBST(RAPICORN_MICRO_VERSION)
AC_SUBST(RAPICORN_INTERFACE_AGE)
AC_SUBST(RAPICORN_BINARY_AGE)
AC_SUBST(RAPICORN_VERSION)
AC_SUBST(RAPICORN_PACKAGE_VERSION)
AC_SUBST(BIN_VERSION)
AC_DEFINE_UNQUOTED(BIN_VERSION, "$BIN_VERSION", [Binary Version])

# compute libtool versions
LT_RELEASE=$RAPICORN_MAJOR_VERSION.$RAPICORN_MINOR_VERSION
LT_CURRENT=`expr $RAPICORN_MICRO_VERSION - $RAPICORN_INTERFACE_AGE`
LT_REVISION=$RAPICORN_INTERFACE_AGE
LT_AGE=`expr $RAPICORN_BINARY_AGE - $RAPICORN_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl figure debugging default, prior to $ac_help setup
dnl
AC_DIVERT_BEFORE_HELP([
if test `expr $RAPICORN_MINOR_VERSION \% 2 \| $RAPICORN_MAJOR_VERSION \< 1` = 1 ; then
        debug_default=yes
else
        debug_default=minimum
fi
])


# initialize automake, don't define PACKAGE and VERSION
AM_INIT_AUTOMAKE(rapicorn, $RAPICORN_PACKAGE_VERSION, no-define)

# We have subdirectories.
AC_PROG_MAKE_SET

# Disable automatic maintainer mode.
AM_MAINTAINER_MODE

# architecture information
AC_CANONICAL_TARGET
AC_DEFINE_UNQUOTED(RAPICORN_ARCH_NAME, "$target", [Architecture Description])

# declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug,       [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)
AC_ARG_ENABLE(profile,     [  --enable-profile=[no/yes] turn on profiling [default=no]],,enable_profile=no)
AC_ARG_ENABLE(devel-rules, [  --enable-devel-rules=[no/yes]   turn on developer build rules],,)
# $enable_devel_rules

dnl setup DEBUG defaults
if test "x$enable_debug" = "xyes"; then
  ADDON_CFLAGS="-g -DG_ENABLE_DEBUG"
else if test "x$enable_debug" = "xno"; then
  ADDON_CFLAGS="-DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS" # -DG_DISABLE_ASSERT
else
  ADDON_CFLAGS="-DG_DISABLE_CAST_CHECKS"
fi fi
if test "x$enable_profile" = "xyes"; then
  if test -z "$ADDON_CFLAGS"; then
    ADDON_CFLAGS="-pg"
  else
    ADDON_CFLAGS="$ADDON_CFLAGS -pg"
  fi
fi
dnl setup CFLAGS
if test -z "$CFLAGS"; then
  CFLAGS="$ADDON_CFLAGS"
else
  CFLAGS="$CFLAGS $ADDON_CFLAGS"
fi
if test -z "$CXXFLAGS"; then
  CXXFLAGS="$ADDON_CFLAGS"
else
  CXXFLAGS="$CXXFLAGS $ADDON_CFLAGS"
fi

dnl Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)


dnl
dnl Define package requirements.
dnl
AC_DEFUN(AC_I18N_REQUIREMENTS,
[
    dnl TRANSLATORS: enter your language here
    ALL_LINGUAS="de"
    dnl TRANSLATORS: enter your language here
    AC_SUBST(ALL_LINGUAS)

    dnl versioned Rapicorn gettext domain (po/)
    RAPICORN_GETTEXT_DOMAIN=rapicorn-v$BIN_VERSION    # version without -rcZ
    AC_SUBST(RAPICORN_GETTEXT_DOMAIN)
    AC_DEFINE_UNQUOTED(RAPICORN_GETTEXT_DOMAIN, "$RAPICORN_GETTEXT_DOMAIN", [Versioned Rapicorn gettext domain])
    GETTEXT_PACKAGE=$RAPICORN_GETTEXT_DOMAIN
    AC_SUBST(GETTEXT_PACKAGE)

    dnl locale directory for all domains
    dnl (AM_GLIB_DEFINE_LOCALEDIR() could do this if it would do AC_SUBST())
    saved_prefix="$prefix"
    saved_exec_prefix="$exec_prefix"
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=$prefix
    if test "x$CATOBJEXT" = "x.mo" ; then
      rapicornlocaledir=`eval echo "${libdir}/locale"`
    else
      rapicornlocaledir=`eval echo "${datadir}/locale"`
    fi
    exec_prefix="$saved_exec_prefix"
    prefix="$saved_prefix"
    AC_SUBST(rapicornlocaledir)

    dnl do gettext checks and provide INTLLIBS
    AM_GLIB_GNU_GETTEXT
    AC_PROG_INTLTOOL
])
AC_DEFUN(AC_RAPICORN_REQUIREMENTS,
[
    dnl --- require libz ---
    if test -z "$LIBZ"; then
	AC_CHECK_LIB(z, gzsetparams,
	    [AC_CHECK_HEADER(zlib.h, LIBZ='-lz', LIBZ='')],
	    LIBZ='')
    fi
    if test -z "$LIBZ"; then
        AC_MSG_ERROR([Compression library libz is missing, but required])
    fi
    AC_SUBST(LIBZ)

    dnl --- check for pango --- 
    DEPENDANCIES=
    DEPENDANCIES="$DEPENDANCIES glib-2.0 >= 2.4.11"
    DEPENDANCIES="$DEPENDANCIES pangoft2 >= 1.4.0"
    dnl define PANGO_CFLAGS and PANGO_LIBS:
    PANGO_PKG_ERRORS=OK
    PKG_CHECK_MODULES(PANGO, $DEPENDANCIES,,
	AC_MSG_WARN([[Failed to detect or find pango, building without pango modules (consider adjusting \$PKG_CONFIG_PATH)]]))
    AC_SUBST(PANGO_CFLAGS)
    AC_SUBST(PANGO_LIBS)
    AM_CONDITIONAL(WITH_PANGO, test "x$PANGO_PKG_ERRORS" = xOK)

    dnl --- check for Gtk+ --- 
    DEPENDANCIES=
    DEPENDANCIES="$DEPENDANCIES glib-2.0 >= 2.4.11"
    DEPENDANCIES="$DEPENDANCIES gtk+-2.0 >= 2.4.11"
    dnl define GTK_CFLAGS and GTK_LIBS:
    GTK_PKG_ERRORS=OK
    PKG_CHECK_MODULES(GTK, $DEPENDANCIES,,
	AC_MSG_WARN([[Failed to detect or find Gtk+, building without gtk programs (consider adjusting \$PKG_CONFIG_PATH)]]))
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)
    AM_CONDITIONAL(WITH_GTK, test "x$GTK_PKG_ERRORS" = xOK)

    RAPICORN_CFLAGS=""
    RAPICORN_LIBS="$LIBZ"
    AC_SUBST(RAPICORN_CFLAGS)
    AC_SUBST(RAPICORN_LIBS)
])
AC_DEFUN(AC_DOC_REQUIREMENTS,
[
])

# check compilers and their behaviour, setup CFLAGS
MC_PROG_CC_WITH_CFLAGS
MC_PROG_CXX_WITH_CXXFLAGS
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_C_CONST
AC_C_INLINE
AC_HEADER_STDC

# Checks for programs
AC_PROG_INSTALL
AC_PROG_LN_S

# initialize libtool, we need dynamic module support
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

# Check for package requirements.
MC_IF_VAR_EQ(GCC, yes,,
    AC_MSG_ERROR(This package requires GNU gcc)
)
MC_IF_VAR_EQ(GXX, yes,,
    AC_MSG_ERROR(This package requires GNU g++)
)

# Figure build requirement
AC_MSG_CHECKING(whether make is GNU Make)

# require pkg-config
MC_ASSERT_PROG(PKG_CONFIG, pkg-config, [pkg-config can be found at http://www.freedesktop.org/software/pkgconfig/])

# check for development build rules (autogen.sh based builds from CVS)
AC_MSG_CHECKING(whether develoment build rules are to be used)
if test x"$enable_devel_rules" = xyes ; then
    AC_MSG_RESULT(yes)
    TEST_SRCDIR=$(cd $srcdir ; /bin/pwd)
    TEST_BUILDDIR=$(cd . ; /bin/pwd)
    AC_MSG_CHECKING(whether source dir equals build dir)
    if test "$TEST_SRCDIR" = "$TEST_BUILDDIR" ; then
	AC_MSG_RESULT(yes)
    else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([source dir must be the same as build dir for development build rules])
    fi
    AC_CHECK_PROGS(PERL, perl5 perl)
    if test -z "$PERL" || $PERL -e 'exit !($] < 5.002)' > /dev/null ; then
	AC_MSG_ERROR([failed to detect correct perl version (>= 5.002)])
    fi
    AC_CHECK_PROGS(XMLLINT, xmllint, true)
    DVLBUILD=""
    NOTDVLBUILD=#
else
    AC_MSG_RESULT(no)
    DVLBUILD=#
    NOTDVLBUILD=""
fi
AC_SUBST(DVLBUILD)
AC_SUBST(NOTDVLBUILD)
AM_CONDITIONAL(IF_DVLBUILD, test -z "$DVLBUILD")
AM_CONDITIONAL(IF_NOTDVLBUILD, test -z "$NOTDVLBUILD")

# find installation utilities
AC_PATH_PROG(UPDATE_MIME_DATABASE, update-mime-database)

# Check requirement sets
AC_I18N_REQUIREMENTS
AC_RAPICORN_REQUIREMENTS
AC_DOC_REQUIREMENTS

# Automake @VARIABLE@ exports.
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


# create output files
AC_CONFIG_FILES([
Makefile
rapicorn/Makefile
po/Makefile.in
po-helper.sh
examples/Makefile
tests/Makefile
])

AC_OUTPUT
