dnl ******************************
dnl *** include special macros ***
dnl ******************************
builtin(include, acbirnet.m4)dnl

#
# Configure script for Rapicorn
#
AC_INIT
AC_CONFIG_SRCDIR([rapicorn/rapicorn.hh])
AM_CONFIG_HEADER(configure.h)
AC_PREREQ(2.57)

#
# Rapicorn version numbers
#
AC_DIVERT_BEFORE_HELP([
RAPICORN_MAJOR_VERSION=0
RAPICORN_MINOR_VERSION=1
RAPICORN_MICRO_VERSION=1
RAPICORN_INTERFACE_AGE=0
RAPICORN_BINARY_AGE=0
])
dnl#
dnl# Making releases:
dnl#   RAPICORN_MICRO_VERSION += 1;
dnl#   RAPICORN_INTERFACE_AGE += 1;
dnl#   RAPICORN_BINARY_AGE += 1;
dnl# if any functions have been added, set RAPICORN_INTERFACE_AGE to 0.
dnl# if backwards compatibility has been broken,
dnl# set RAPICORN_BINARY_AGE _and_ RAPICORN_INTERFACE_AGE to 0.
dnl# RAPICORN_RELEASE_CANDIDATE may contain rc[0-9]+ or nothing
RAPICORN_RELEASE_CANDIDATE= #rc1

# version number setup
RAPICORN_VERSION=$RAPICORN_MAJOR_VERSION.$RAPICORN_MINOR_VERSION.$RAPICORN_MICRO_VERSION
RAPICORN_PACKAGE_VERSION=$RAPICORN_VERSION # -rcZ to be appended...
if test -n "$RAPICORN_RELEASE_CANDIDATE" ; then
    RAPICORN_PACKAGE_VERSION=$RAPICORN_VERSION-$RAPICORN_RELEASE_CANDIDATE
fi
BIN_VERSION=$RAPICORN_VERSION    # binary version, used for binaries and paths
AC_SUBST(RAPICORN_MAJOR_VERSION)
AC_SUBST(RAPICORN_MINOR_VERSION)
AC_SUBST(RAPICORN_MICRO_VERSION)
AC_SUBST(RAPICORN_INTERFACE_AGE)
AC_SUBST(RAPICORN_BINARY_AGE)
AC_SUBST(RAPICORN_VERSION)
AC_SUBST(RAPICORN_PACKAGE_VERSION)
AC_SUBST(BIN_VERSION)
AC_DEFINE_UNQUOTED(BIN_VERSION, "$BIN_VERSION", [Binary Version])

# compute libtool versions
LT_RELEASE=$RAPICORN_MAJOR_VERSION.$RAPICORN_MINOR_VERSION
LT_CURRENT=`expr $RAPICORN_MICRO_VERSION - $RAPICORN_INTERFACE_AGE`
LT_REVISION=$RAPICORN_INTERFACE_AGE
LT_AGE=`expr $RAPICORN_BINARY_AGE - $RAPICORN_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl figure debugging default, prior to $ac_help setup
dnl
AC_DIVERT_BEFORE_HELP([
if test `expr $RAPICORN_MINOR_VERSION \% 2 \| $RAPICORN_MAJOR_VERSION \< 1` = 1 ; then
        debug_default=yes
else
        debug_default=minimum
fi
])


# initialize automake, don't define PACKAGE and VERSION
AM_INIT_AUTOMAKE(rapicorn, $RAPICORN_PACKAGE_VERSION, no-define)

# We have subdirectories.
AC_PROG_MAKE_SET

# Disable automatic maintainer mode.
AM_MAINTAINER_MODE

# architecture information
AC_CANONICAL_TARGET
AC_DEFINE_UNQUOTED(RAPICORN_ARCH_NAME, "$target", [Architecture Description])

# declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug,       [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,enable_debug=$debug_default)
AC_ARG_ENABLE(profile,     [  --enable-profile=[no/yes] turn on profiling [default=no]],,enable_profile=no)
AC_ARG_ENABLE(devel-rules, [  --enable-devel-rules=[no/yes]   turn on developer build rules],,)
# $enable_devel_rules

dnl setup DEBUG defaults
if test "x$enable_debug" = "xyes"; then
  ADDON_CFLAGS="-g -DG_ENABLE_DEBUG"
else if test "x$enable_debug" = "xno"; then
  ADDON_CFLAGS="-DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS" # -DG_DISABLE_ASSERT
else
  ADDON_CFLAGS="-DG_DISABLE_CAST_CHECKS"
fi fi
if test "x$enable_profile" = "xyes"; then
  if test -z "$ADDON_CFLAGS"; then
    ADDON_CFLAGS="-pg"
  else
    ADDON_CFLAGS="$ADDON_CFLAGS -pg"
  fi
fi
dnl setup CFLAGS
if test -z "$CFLAGS"; then
  CFLAGS="$ADDON_CFLAGS"
else
  CFLAGS="$CFLAGS $ADDON_CFLAGS"
fi
if test -z "$CXXFLAGS"; then
  CXXFLAGS="$ADDON_CFLAGS"
else
  CXXFLAGS="$CXXFLAGS $ADDON_CFLAGS"
fi

dnl Foreign defaults:
MC_IF_VAR_EQ(enable_static, yes, , enable_static=no)
MC_IF_VAR_EQ(enable_shared, no, , enable_shared=yes)


dnl
dnl Define package requirements.
dnl
AC_DEFUN(AC_I18N_REQUIREMENTS,
[
    dnl TRANSLATORS: enter your language here
    ALL_LINGUAS="de"
    dnl TRANSLATORS: enter your language here
    AC_SUBST(ALL_LINGUAS)

    dnl versioned Rapicorn gettext domain (po/)
    RAPICORN_GETTEXT_DOMAIN=rapicorn-v$BIN_VERSION    # version without -rcZ
    AC_SUBST(RAPICORN_GETTEXT_DOMAIN)
    AC_DEFINE_UNQUOTED(RAPICORN_GETTEXT_DOMAIN, "$RAPICORN_GETTEXT_DOMAIN", [Versioned Rapicorn gettext domain])
    GETTEXT_PACKAGE=$RAPICORN_GETTEXT_DOMAIN
    AC_SUBST(GETTEXT_PACKAGE)

    dnl locale directory for all domains
    dnl (AM_GLIB_DEFINE_LOCALEDIR() could do this if it would do AC_SUBST())
    saved_prefix="$prefix"
    saved_exec_prefix="$exec_prefix"
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=$prefix
    if test "x$CATOBJEXT" = "x.mo" ; then
      rapicornlocaledir=`eval echo "${libdir}/locale"`
    else
      rapicornlocaledir=`eval echo "${datadir}/locale"`
    fi
    exec_prefix="$saved_exec_prefix"
    prefix="$saved_prefix"
    AC_SUBST(rapicornlocaledir)

    dnl do gettext checks and provide INTLLIBS
    AM_GLIB_GNU_GETTEXT
    AC_PROG_INTLTOOL
])
AC_DEFUN(AC_RAPICORN_REQUIREMENTS,
[
    dnl --- require libpng ---
    if test -z "$LIBPNG"; then
	dnl png_set_add_alpha() exists only snice libpng v1.2
	AC_MSG_CHECKING(for libpng12)
	if $PKG_CONFIG --exists libpng12 ; then
	    AC_MSG_RESULT(yes)
	    LIBPNG=`$PKG_CONFIG --libs libpng12`
	elif $PKG_CONFIG --exists libpng13 ; then
	    AC_MSG_RESULT(yes)
	    LIBPNG=`$PKG_CONFIG --libs libpng13`
	else
	    AC_MSG_RESULT(no)
	    AC_MSG_ERROR([PNG image library libpng (>= 1.2) is missing, but required])
	fi
    fi
    AC_SUBST(LIBPNG)

    dnl --- require libz ---
    if test -z "$LIBZ"; then
	AC_CHECK_LIB(z, gzsetparams,
	    [AC_CHECK_HEADER(zlib.h, LIBZ='-lz', LIBZ='')],
	    LIBZ='')
    fi
    if test -z "$LIBZ"; then
        AC_MSG_ERROR([Compression library libz is missing, but required])
    fi
    AC_SUBST(LIBZ)

    dnl --- check for pango --- 
    DEPENDANCIES=
    DEPENDANCIES="$DEPENDANCIES glib-2.0 >= 2.4.11"
    DEPENDANCIES="$DEPENDANCIES pangoft2 >= 1.4.0"
    dnl define PANGO_CFLAGS and PANGO_LIBS:
    PANGO_PKG_ERRORS=OK
    PKG_CHECK_MODULES(PANGO, $DEPENDANCIES,,
	AC_MSG_WARN([[Failed to detect or find pango, building without pango modules (consider adjusting \$PKG_CONFIG_PATH)]]))
    AC_SUBST(PANGO_CFLAGS)
    AC_SUBST(PANGO_LIBS)
    AM_CONDITIONAL(WITH_PANGO, test "x$PANGO_PKG_ERRORS" = xOK)

    dnl --- check for Gtk+ --- 
    DEPENDANCIES=
    DEPENDANCIES="$DEPENDANCIES glib-2.0 >= 2.4.11"
    DEPENDANCIES="$DEPENDANCIES gtk+-2.0 >= 2.4.11"
    dnl define GTK_CFLAGS and GTK_LIBS:
    GTK_PKG_ERRORS=OK
    PKG_CHECK_MODULES(GTK, $DEPENDANCIES,,
	AC_MSG_WARN([[Failed to detect or find Gtk+, building without gtk programs (consider adjusting \$PKG_CONFIG_PATH)]]))
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)
    AM_CONDITIONAL(WITH_GTK, test "x$GTK_PKG_ERRORS" = xOK)

    RAPICORN_CFLAGS=""
    RAPICORN_LIBS="$LIBPNG $LIBZ"
    AC_SUBST(RAPICORN_CFLAGS)
    AC_SUBST(RAPICORN_LIBS)
])
AC_DEFUN(AC_DOC_REQUIREMENTS,
[
])
dnl FIXME: remove cairo's _CHECK_FUNCS_WITH_FLAGS
AC_DEFUN([_CHECK_FUNCS_WITH_FLAGS],
[ 
  save_cflags="$CFLAGS"
  save_libs="$LIBS"
  CFLAGS="$CFLAGS $2"
  LIBS="$LIBS $3"
  AC_CHECK_FUNCS($1, $4, $5)
  CFLAGS="$save_cflags"
  LIBS="$save_libs"
])
AC_DEFUN(AC_CAIRO_REQUIREMENTS,
[
  CAIRO_VERSION_MAJOR=0
  CAIRO_VERSION_MINOR=0
  CAIRO_VERSION_MICRO=0
  AC_SUBST(CAIRO_VERSION_MAJOR)
  AC_SUBST(CAIRO_VERSION_MINOR)
  AC_SUBST(CAIRO_VERSION_MICRO)

  dnl ===========================================================================
  PS_SURFACE_FEATURE=
  PDF_SURFACE_FEATURE=
  QUARTZ_SURFACE_FEATURE=
  XCB_SURFACE_FEATURE=
  WIN32_SURFACE_FEATURE=
  GLITZ_SURFACE_FEATURE=
  WIN32_FONT_FEATURE=
  ATSUI_FONT_FEATURE=
  AC_SUBST(PS_SURFACE_FEATURE)
  AC_SUBST(PDF_SURFACE_FEATURE)
  AC_SUBST(QUARTZ_SURFACE_FEATURE)
  AC_SUBST(XCB_SURFACE_FEATURE)
  AC_SUBST(WIN32_SURFACE_FEATURE)
  AC_SUBST(GLITZ_SURFACE_FEATURE)
  AC_SUBST(WIN32_FONT_FEATURE)
  AC_SUBST(ATSUI_FONT_FEATURE)

  dnl ===========================================================================
  dnl Checks for precise integer types
  AC_CHECK_HEADERS([stdint.h inttypes.h sys/int_types.h])
  AC_CHECK_TYPES([uint64_t, uint128_t])

  dnl ===========================================================================
  AC_CHECK_HEADERS([pthread.h], have_pthread=yes, have_pthread=no)
  AM_CONDITIONAL(HAVE_PTHREAD, test "x$have_pthread" = "xyes")

  dnl ===========================================================================
  
  AC_PATH_XTRA
  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  fi
  AC_CHECK_HEADER(X11/extensions/Xrender.h, [],
    AC_MSG_ERROR([Xrender development header not found])
  )
  CFLAGS="$CFLAGS $X_CFLAGS"
  LIBS="$LIBS $X_LIBS -lXrender -lXext -lX11 $X_EXTRA_LIBS"
  AM_CONDITIONAL(CAIRO_HAS_XLIB_SURFACE, true)
  XLIB_SURFACE_FEATURE="#define CAIRO_HAS_XLIB_SURFACE 1"
  AC_SUBST(XLIB_SURFACE_FEATURE)

  dnl ===========================================================================
  for l in libpng12 libpng13 libpng10 ; do
    if $PKG_CONFIG --exists $l ; then
      PNG_REQUIRES=$l
      use_png=yes
      break
    fi
  done
  if test "x$use_png" = "xyes" ; then 
    # Sets PNG_CFLAGS, PNG_LIBS
    PKG_CHECK_MODULES(PNG, $PNG_REQUIRES)
  else
    AC_MSG_WARN([Could not find libpng in the pkg-config search path])
  fi    
  AM_CONDITIONAL(CAIRO_HAS_PNG_FUNCTIONS, test "x$use_png" = "xyes")
  if test "x$use_png" = "xyes"; then
    PNG_FUNCTIONS_FEATURE="#define CAIRO_HAS_PNG_FUNCTIONS 1"
  else
    AC_MSG_WARN("*** To run the tests, cairo must be built with png support ***)
  fi
  AC_SUBST(PNG_FUNCTIONS_FEATURE)
  CAIRO_CFLAGS="$CAIRO_CFLAGS $PNG_CFLAGS"
  CAIRO_LIBS="$CAIRO_LIBS $PNG_LIBS"
  AC_SUBST(PNG_REQUIRES)

  dnl ===========================================================================
  AC_ARG_ENABLE(freetype,
    [  --disable-freetype      Disable cairo's freetype font backend],
    [use_freetype=$enableval], [use_freetype=yes])
  
  if test "x$use_freetype" = "xyes"; then
    PKG_CHECK_MODULES(FONTCONFIG, fontconfig, 
                      [use_freetype=yes], [use_freetype=no])
    _CHECK_FUNCS_WITH_FLAGS(FcFini, $FONTCONFIG_CFLAGS, $FONTCONFIG_LIBS)
  fi
  
  CAIRO_CFLAGS="$CAIRO_CFLAGS $FONTCONFIG_CFLAGS"
  CAIRO_LIBS="$CAIRO_LIBS $FONTCONFIG_LIBS"
  
  # We use pkg-config to look for freetype2, but fall back to
  # freetype-config if it fails.  We prefer pkg-config, since we can
  # then just put freetype2 >= $FREETYPE_MIN_VERSION in
  # Requires.private, but at least up to 2003-06-07, there was no
  # freetype2.pc in the release.
  #
  # Freetype versions come in three forms:
  #   release (such as 2.1.5)
  #   libtool (such as 9.4.3) (returned by freetype-config and pkg-config)
  #   platform-specific/soname (such as 6.3.4)
  # and they recommend you never use the platform-specific version
  # (see docs/VERSION.DLL in freetype2 sources)
  #
  # Set these as appropriate:
  
  # release number - for information only
  FREETYPE_MIN_RELEASE=2.1.0
  # libtool-specific version - this is what is checked
  FREETYPE_MIN_VERSION=8.0.2
  
  if test "x$use_freetype" = "xyes"; then
  
    PKG_CHECK_MODULES(FREETYPE, freetype2 >= $FREETYPE_MIN_VERSION,
                      [freetype_pkgconfig=yes], [freetype_pkgconfig=no])
  
    if test "x$freetype_pkgconfig" = "xyes"; then
  
      FREETYPE_REQUIRES="freetype2 >= $FREETYPE_MIN_VERSION fontconfig"
  
    else
  
      if test -z "$FREETYPE_CONFIG"; then
        AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)
      fi
      if test "$FREETYPE_CONFIG" = "no" ; then
        AC_MSG_WARN([No freetype-config script found in path or FREETYPE_CONFIG])
        use_freetype=no
      else
        AC_MSG_CHECKING(freetype2 libtool version)
    
        FREETYPE_VERSION=`$FREETYPE_CONFIG --version`
    
        VERSION_DEC=`echo $FREETYPE_VERSION | awk -F. '{printf("%d\n", 10000*$1 + 100*$2 + $3)};'`
        MIN_VERSION_DEC=`echo $FREETYPE_MIN_VERSION | awk -F. '{printf("%d\n", 10000*$1 + 100*$2 + $3)};'`
        if test $VERSION_DEC -lt $MIN_VERSION_DEC; then
          AC_MSG_RESULT($FREETYPE_VERSION - Too old)
          AC_MSG_WARN([$FREETYPE_VERSION - version $FREETYPE_MIN_VERSION from release $FREETYPE_MIN_RELEASE required])
          use_freetype=no
        else
          AC_MSG_RESULT($FREETYPE_VERSION - OK)
  	
  	FREETYPE_CONFIG_CFLAGS=`$FREETYPE_CONFIG --cflags`
  	FREETYPE_CONFIG_LIBS=`$FREETYPE_CONFIG --libs`  
  	FREETYPE_CFLAGS=$FREETYPE_CONFIG_CFLAGS
  	FREETYPE_LIBS=$FREETYPE_CONFIG_LIBS
  	FREETYPE_REQUIRES=fontconfig
        fi
      fi
    fi
  fi
  
  have_ft_load_sfnt_table=no
  
  if test "x$use_freetype" = "xyes"; then
    AC_SUBST(FREETYPE_CFLAGS)
    AC_SUBST(FREETYPE_LIBS)
    AC_SUBST(FREETYPE_CONFIG_CFLAGS)
    AC_SUBST(FREETYPE_CONFIG_LIBS)
    AC_SUBST(FREETYPE_REQUIRES)
  
    temp_save_libs="$LIBS"
    temp_save_cflags="$CFLAGS"
    LIBS="$LIBS $FREETYPE_LIBS"
    CFLAGS="$CFLAGS $FREETYPE_CFLAGS"
    AC_CHECK_MEMBER(FT_Bitmap_Size.y_ppem,
                    HAVE_FT_BITMAP_SIZE_Y_PPEM=1,
                    HAVE_FT_BITMAP_SIZE_Y_PPEM=0,
                    [#include<ft2build.h>
                     #include FT_FREETYPE_H])
    AC_DEFINE_UNQUOTED(HAVE_FT_BITMAP_SIZE_Y_PPEM,$HAVE_FT_BITMAP_SIZE_Y_PPEM,
                       [FT_Bitmap_Size structure includes y_ppem field])
  
    AC_CHECK_FUNC(FT_Load_Sfnt_Table, have_ft_load_sfnt_table=yes)
    AC_CHECK_FUNCS(FT_GlyphSlot_Embolden)
  
    LIBS="$temp_save_libs"
    CFLAGS="$temp_save_cflags"
  fi
  
  CAIRO_CFLAGS="$CAIRO_CFLAGS $FREETYPE_CFLAGS"
  CAIRO_LIBS="$CAIRO_LIBS $FREETYPE_LIBS"
  
  AM_CONDITIONAL(CAIRO_HAS_FT_FONT, test "x$use_freetype" = "xyes")
  if test "x$use_freetype" = "xyes"; then
    FT_FONT_FEATURE="#define CAIRO_HAS_FT_FONT 1"
  fi
  AC_SUBST(FT_FONT_FEATURE)
])

# check compilers and their behaviour, setup CFLAGS
MC_PROG_CC_WITH_CFLAGS
MC_PROG_CXX_WITH_CXXFLAGS
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_C_CONST
AC_C_INLINE
AC_HEADER_STDC

# Checks for programs
AC_PROG_INSTALL
AC_PROG_LN_S

# initialize libtool, we need dynamic module support
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

# Check for package requirements.
MC_IF_VAR_EQ(GCC, yes,,
    AC_MSG_ERROR(This package requires GNU gcc)
)
MC_IF_VAR_EQ(GXX, yes,,
    AC_MSG_ERROR(This package requires GNU g++)
)

# Figure build requirement
AC_MSG_CHECKING(whether make is GNU Make)

# require pkg-config
MC_ASSERT_PROG(PKG_CONFIG, pkg-config, [pkg-config can be found at http://www.freedesktop.org/software/pkgconfig/])

# check for development build rules (autogen.sh based builds from CVS)
AC_MSG_CHECKING(whether develoment build rules are to be used)
if test x"$enable_devel_rules" = xyes ; then
    AC_MSG_RESULT(yes)
    TEST_SRCDIR=$(cd $srcdir ; /bin/pwd)
    TEST_BUILDDIR=$(cd . ; /bin/pwd)
    AC_MSG_CHECKING(whether source dir equals build dir)
    if test "$TEST_SRCDIR" = "$TEST_BUILDDIR" ; then
	AC_MSG_RESULT(yes)
    else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR([source dir must be the same as build dir for development build rules])
    fi
    AC_CHECK_PROGS(PERL, perl5 perl)
    if test -z "$PERL" || $PERL -e 'exit !($] < 5.002)' > /dev/null ; then
	AC_MSG_ERROR([failed to detect correct perl version (>= 5.002)])
    fi
    AC_CHECK_PROGS(XMLLINT, xmllint, true)
    DVLBUILD=""
    NOTDVLBUILD=#
else
    AC_MSG_RESULT(no)
    DVLBUILD=#
    NOTDVLBUILD=""
fi
AC_SUBST(DVLBUILD)
AC_SUBST(NOTDVLBUILD)
AM_CONDITIONAL(IF_DVLBUILD, test -z "$DVLBUILD")
AM_CONDITIONAL(IF_NOTDVLBUILD, test -z "$NOTDVLBUILD")

# find installation utilities
AC_PATH_PROG(UPDATE_MIME_DATABASE, update-mime-database)

# Check requirement sets
AC_I18N_REQUIREMENTS
AC_RAPICORN_REQUIREMENTS
AC_DOC_REQUIREMENTS
AC_CAIRO_REQUIREMENTS

# Automake @VARIABLE@ exports.
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


# create output files
AC_CONFIG_FILES([
Makefile
rapicorn/Makefile
po/Makefile.in
po-helper.sh
cairo-inlined/Makefile
cairo-inlined/cairo-features.h
examples/Makefile
tests/Makefile
])

AC_OUTPUT
