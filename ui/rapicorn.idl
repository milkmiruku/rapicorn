/* Rapicorn Rope - Remote Object Programming Extension          -*-mode:c++;-*-
 * Copyright (C) 2010 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * A copy of the GNU Lesser General Public License should ship along
 * with this library; if not, see http://www.gnu.org/copyleft/.
 */

include "hardcoded.idl";

namespace Rapicorn {

sequence StringList {
  string        strings;
};

record Requisition {
  float width;
  float height;
};

interface Window {
  bool          viewable        () = 0;
  void          show            () = 0;
  bool          closed          () = 0;
  void          close           () = 0;
  signal bool   commands        (string     cmdname,
                                 StringList args);
};

interface Application {
  /* startup */
  void          init_with_x11   (string         application_name,
                                 StringList     cmdline_args) = 0;
  string        auto_path       (string         file_name,
                                 string         binary_path,
                                 bool           search_vpath = true) = 0;
  void          auto_load       (string         i18n_domain,
                                 string         file_name,
                                 string         binary_path) = 0;
  void          load_string     (string         xml_string,
                                 string         i18n_domain = "") = 0;
  /* windows */
  Window        create_window   (string         window_identifier,
                                 StringList     arguments = 0,
                                 StringList     env_variables = 0) = 0;
  // WindowList    list_windows    () = 0;
  /* execution */
  void          exit            (int            code = 0) = 0;
  /* notifications */
  signal void   missing_primary ();
  /* testing */
  void          test_counter_set        (int val) = 0;
  void          test_counter_add        (int val) = 0;
  int           test_counter_get        () = 0;
  int           test_counter_inc_fetch  () = 0;
};

} // Rapicorn
