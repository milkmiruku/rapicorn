/* Rapicorn Rope - Remote Object Programming Extension          -*-mode:c++;-*-
 * Copyright (C) 2010 Tim Janik
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * A copy of the GNU Lesser General Public License should ship along
 * with this library; if not, see http://www.gnu.org/copyleft/.
 */

include "hardcoded.idl";

namespace Rapicorn {

sequence StringList {
  string        strings;
};

record Requisition {
  float width;
  float height;
};

interface It3m;

sequence ItemSeq {
  It3m  items;
};

interface It3m {
  It3m          unique_component        (string path) = 0;
  ItemSeq       collect_components      (string path) = 0;
};

interface Item : It3m { /* temporarily manually implemented */ };

interface Window : Item {
  bool          viewable                () = 0;
  void          show                    () = 0;
  bool          closed                  () = 0;
  void          close                   () = 0;
  signal bool   commands                (string     cmdname,
                                         StringList args);
  bool          synthesize_click        (Item       item,
                                         int        button,
                                         float      xalign = 0.5,
                                         float      yalign = 0.5) = 0;
  bool          synthesize_enter        (float      xalign = 0.5,
                                         float      yalign = 0.5) = 0;
  bool          synthesize_leave        () = 0;
  bool          synthesize_delete       () = 0;
};

sequence WindowList {
  Window windows;
};

interface Application {
  /* startup */
  void          init_with_x11   (string         application_name,
                                 StringList     cmdline_args) = 0;
  string        auto_path       (string         file_name,
                                 string         binary_path,
                                 bool           search_vpath = true) = 0;
  void          auto_load       (string         defs_domain,
                                 string         file_name,
                                 string         binary_path,
                                 string         i18n_domain = "") = 0;
  void          load_string     (string         xml_string,
                                 string         i18n_domain = "") = 0;
  /* windows */
  Window        create_window   (string         window_identifier,
                                 StringList     arguments = 0,
                                 StringList     env_variables = 0) = 0;
  bool          has_primary     ();
  signal void   missing_primary ();
  void          close           ();
  WindowList    list_windows            () = 0;
  It3m          unique_component        (string path) = 0;
  ItemSeq       collect_components      (string path) = 0;
  /* testing */
  void          test_counter_set        (int val) = 0;
  void          test_counter_add        (int val) = 0;
  int           test_counter_get        () = 0;
  int           test_counter_inc_fetch  () = 0;
};

enum TestEnum {
  TEST_ENUM_VALUE1,
  TEST_ENUM_VALUE2,
  TEST_ENUM_VALUE3,
};

interface IdlTestItem : Item {
  bool           bool_prop;
  int            int_prop;
  float          float_prop;
  string         string_prop;
  TestEnum       enum_prop;
  Requisition    record_prop;
  StringList     sequence_prop;
  IdlTestItem    self_prop;
};

} // Rapicorn
