// Licensed GNU LGPL v3 or later: http://www.gnu.org/licenses/lgpl.html -*-mode:idl;-*-

include "hardcoded.idl";

namespace Rapicorn {

/**
 * A sequence of C++ std::strings.
 */
sequence StringList {
  string strings;
};

/**
 * @param width         requested width
 * @param height        requested height
 * Requisition information, providing requisition @a width and @a height.
 */
record Requisition {
  float width;
  float height;
};

interface Item;

/**
 * A sequence of Item objects.
 */
sequence ItemSeq {
  Item  items;
};

/**
 * Item is the base type for all UI elements.
 */
interface Item {
  Item          unique_component        (string path) = 0;
  ItemSeq       collect_components      (string path) = 0;
  string	test_dump               () = 0;
  string        name = String (_("Name"), _("Identification name of the item"), "rw");
};

/**
 * Container is a special type of Item that can contain other items.
 */
interface Container : Item {
  /// Create a child item from the @a item_identifier template and add it to the container.
  Item          create_child            (string item_identifier,
					 StringList args = 0) = 0;
};

/**
 * The ButtonArea interface provides button click handling. Certain actions can be
 * associated with button1, button2 and button3 clicks to be caried out when the
 * respective mouse button is clicked.
 */
interface ButtonArea : Container {
  string	on_click	= String (_("On CLick"), _("Action to carry out on button1 clicks."), "rw");
  string	on_click2	= String (_("On CLick"), _("Action to carry out on button2 clicks."), "rw");
  string	on_click3	= String (_("On CLick"), _("Action to carry out on button3 clicks."), "rw");
};

sequence Pixels {
  int pixel;
};
record PixelRect {
   int	   x;
   int     y;
   int     width;
   int     height;
   int     rowstride;
   int     offset;
   string  comment;
   Pixels  argb_pixels;
};

/**
 * The Drawable interface allows display of custom images, created by client-side rendering.
 */
interface Drawable : Item {
  signal void	redraw		(int x, int y, int w, int h);	///< Requests a redraw at @a width and @a height.
  void		draw_rect	(PixelRect pixrect) = 0;	///< Draws pixels on the drawable display.
};

/**
 * A Wind0w interface is the main user visible handle for screen objects in Rapicorn.
 * Wind0ws can be obtained from the Application singleton. They contain UI elements
 * like buttons and text fields, and the neccessary logic for UI event processing.
 */
interface Wind0w : Container {
  bool          viewable                () = 0;
  void          show                    () = 0;
  bool          closed                  () = 0;
  void          close                   () = 0;
  signal bool   commands                (string     cmdname,
                                         StringList args);
  signal void   displayed               ();
  bool          synthesize_click        (Item       item,
                                         int        button,
                                         float      xalign = 0.5,
                                         float      yalign = 0.5) = 0;
  bool          synthesize_enter        (float      xalign = 0.5,
                                         float      yalign = 0.5) = 0;
  bool          synthesize_leave        () = 0;
  bool          synthesize_delete       () = 0;
};

sequence Wind0wList {
  Wind0w wind0ws;
};

/**
 * For each Rapicorn program, there exists one global Application singleton.
 * All general program operations are provided by the Application interface,
 * such as the facility to create Wind0w objects on the screen.
 */
interface Application {
  /* startup */
  string        auto_path       (string         file_name,
                                 string         binary_path,
                                 bool           search_vpath = true) = 0;
  StringList    auto_load       (string         defs_domain,
                                 string         file_name,
                                 string         binary_path,
                                 string         i18n_domain = "") = 0;
  bool          factory_window  (string         factory_definition);
  void          load_string     (string         xml_string,
                                 string         i18n_domain = "") = 0;
  /* wind0ws */
  Wind0w        create_wind0w   (string         wind0w_identifier,
                                 StringList     arguments = 0,
                                 StringList     env_variables = 0) = 0;
  bool          finishable      ();
  signal void   missing_primary ();
  void          close           ();
  Wind0wList    list_wind0ws            () = 0;
  Item          unique_component        (string path) = 0;
  ItemSeq       collect_components      (string path) = 0;
  /* testing */
  void          test_counter_set        (int val) = 0;
  void          test_counter_add        (int val) = 0;
  int           test_counter_get        () = 0;
  int           test_counter_inc_fetch  () = 0;
};

enum TestEnum {
  TEST_ENUM_VALUE1,
  TEST_ENUM_VALUE2,
  TEST_ENUM_VALUE3,
};

interface IdlTestItem : Item {
  bool           bool_prop;
  int            int_prop;
  float          float_prop;
  string         string_prop;
  TestEnum       enum_prop;
  Requisition    record_prop;
  StringList     sequence_prop;
  IdlTestItem    self_prop;
};

} // Rapicorn
