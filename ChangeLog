Thu Mar 31 16:18:20 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/utilities.hh, rapicorn/utilities.cc: implement class
	Convertible, a class providing interface<>() methods to retrieve
	different interfaces. 

	* rapicorn/birnetutils.hh: added DataListContainer, a class containing
	a DataList.

	* rapicorn/Makefile.am: actually compile utilities.cc.

Thu Mar 31 15:48:06 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/properties.hh, rapicorn/properties.cc: implement generic
	Property structure and derived types for booleans, ints, doubles and
	strings. these allow to generically query, set and get properties on
	an object.

	* tests/properties.cc: test property constructors for various types.

Wed Mar 30 00:52:05 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/birnetsignalslot.hh: moved signal handler and slot
	definitions here. there're no emitter handlers/slots anymore.
	support extra data argument for function and method handlers.

	* rapicorn/birnetsignaltemplate.hh: removed handlers/slots. moved
	knowledge about emitter obejct into Emission. let class Emission
	care about casting handlers correctly (with or without emitter arg),
	cleaned up signal methods some.

	* rapicorn/birnetsignal.hh: removed HandlerBase, ReferencableBase.
	added with_emitter flag to signal handlers. made SlotBase a regular
	class, rather than a template. 

	* rapicorn/mksignals.sh: fixed line numbers. allow 17 arguments.
	allow specification of maximum argument count. 

	* tests/signal.cc: test data handlers and emitter-less ahndlers.

	* rapicorn/Makefile.am: generate birnetsignalvariants.hh from
	birnetsignalslot.hh (we need 0..17 argument handlers) and
	birnetsignaltemplate.hh (for 0..16 argument signals).

Tue Mar 29 17:00:08 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/birnetsignal.hh, rapicorn/birnetsignal.cc: namespace change
	to namespace Signals. added EmissionBase, extended SignalBase to
	maintain a signal handler list as ring data structure. removed
	accumulators, added Collectors, added Signature template to extract the
	return type of a function type for functions with up to 16 arguments.
	include birnetsignalvariants.hh to define all signal variants. 

	* rapicorn/birnetsignaltemplate.hh: implement signal with emission and
	handlers etc, for exactly 3 signal arguments. 

	* rapicorn/mksignals.sh: generate signal variants for 0..16 signal 
	arguments from birnetsignaltemplate.hh.

	* rapicorn/birnetsignaldefs.hh, rapicorn/birnetsignalinc.hh: removed.

	* rapicorn/private.hh: renamed PRIVATE_CLASS_COPY().
	* rapicorn/birnetutils.hh: renamed BIRNET_PRIVATE_CLASS_COPY().

	* rapicorn/Makefile.am: generate birnetsignalvariants.hh.

	* tests/signal.cc: test signal variants for 0..16 arguments with void
	and other return types. 

Mon Mar 28 10:12:34 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/birnetsignal.hh, rapicorn/birnetsignaldefs.hh:
	moved signals into an extra Signal namespace, renamed Signal::Closure
	to Signal::Handler. 

	* rapicorn/birnetutils.hh: import relevant parts from 
	the Signal namespace.

Mon Mar 28 10:01:06 2005  Tim Janik  <timj@gtk.org>

	* acbirnet.m4: disable -fmessage-length argument to g++, since it 
	doesn't really improve error output with gcc-3.4.

	* rapicorn/birnetsignaldefs.hh: disabled signal generation.
	added test implementation of a 3 argument signal which supports passing
	the emitter object as first argument to signal handlers.

	* rapicorn/birnetutils.hh: virtualize the delete this; operation of 
	ReferenceCountImpl, so derived instances can adapt deletion to their
	allocation scheme. 

	* tests/signal.cc: disabled old signal tests.
	added test for 3 argument signal variant, currently implemented in
	birnetsignaldefs.hh.

Sun Mar 27 19:52:12 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/birnetsignal.hh, rapicorn/birnetsignalinc.hh:
	* rapicorn/birnetsignaldefs.hh:
	rudimentary signal (callback list) implementation for C++.

	* tests/signal.cc: test signals.

Sun Mar 27 05:54:04 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/events.hh, rapicorn/events.cc: 
	provide several event types with constructor for mosue events,
	button events, focus events, key events and scroll events. 
	also, provide ModifierState and KeyValue (by including keycodes.hh)
	enums for key events.

	* rapicorn/keycodes.hh: keyboard key codes, generated from gdkkeysyms.h.

	* rapicorn/appearance.hh, rapicorn/appearance.cc: 
	provide class Style which provides colors according to various states.
	provide class Appearance which is simply a Style factory.

Sun Mar 27 05:21:40 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/primitives.hh, rapicorn/primitives.cc:
	consolidated Rect() constructors. added Plane, an ARGB pixel buffer,
	which uses an endian dependant ARGB format with premultiplied alpha.
	this is the same format cairo uses for its surface buffers in ARGB mode.
	plane implements various combination modes, i.e. the non-inverting
	porterduff modes, blending and value combination.

Sun Mar 27 04:20:15 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/primitives.hh, rapicorn/primitives.cc:
	provide degree/radians conversion. provide asm-based ftoi for doubles.
	provide iround, iceil, ifloor. 
	implement class Point with double coordinates. implement rectangle
	type class Rect based on Point coordinates. implemented ARGB Color
	type. 

	* tests/primitives.cc: test get_hsv/set_hsv Color conversions.

	* rapicorn/utilities.hh, rapicorn/utilities.cc:
	moved gettext logic here. import abs, clamp, min, max. provide mixed
	double/long variants for min and max, to not confuse the compiler
	if integer constants are used.

	* rapicorn/birnetutils.hh: fixed up swap, min, max, abs and clamp by
	using std:: versions if possible.

	* rapicorn/enumdefs.hh, rapicorn/enumdefs.cc: removed utility stuff.

Sun Mar 27 01:37:22 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/enumdefs.hh, rapicorn/enumdefs.cc:
	provide i18n funcitons and defines. define enum types:
	FrameType, LightingType, AlignType, WrapType, EllipsizeType, 
	StateType and ColorType. implement introspection mechanism 
	for enums defined in enumdefs.hh (based on glib-mkenums). import
	Birnet namespace and include private.hh for rapicorn compilation.

	* rapicorn/private.hh: define convenience non-namespaced helper
	macros for rapicorn compilation.

	* rapicorn/birnetutils.hh: added min, max, clamp and abs.

Sat Mar 26 19:52:48 2005  Tim Janik  <timj@gtk.org>

	* tests/walker.cc: test Walker template.

	* rapicorn/rapicorn.hh: added includes.

	* tests/Makefile.am: build and run tests.

	* build po/ and tests/

Sat Mar 26 19:02:56 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/birnetutils.hh, rapicorn/birnetutils.cc:
	provide standard types, assertion macros, compiler attributes,
	string conversion functions, warning/error/diagnostic functions,
	exception hanlding basics. provide special classes:
	(class Deletable): class with virtual destructor.
	(class PointerIterator): make a real iterator from a memory pointer.
	(class ValueIterator): automatically dereference an iterator.
	(class IteratorRange): self contained iterator range, a normal iterator
	that also knows it's container's end(), implements has_next(), done().
	(class ValueIteratorRange): a dereferencing IteratorRange.
	(class Walker): an easy to use iterator_range (begin(), end())
	substitute. creating a walker template only requires specification of
	the actual value type. walkers are created with walker(...).
	(class ReferenceCountImpl): implement a Deletable object with a 31bit
	reference count and floating state. derived types should use 
	BIRNET_DISABLE_CLASS_COPY() to prevent stack allocation of instances.
	(class DataList): implement a list of generic data items in a typesafe
	way. sizeof(DataList) is supposed to be just sizeof(Pointer) to allow
	empty lists with as little as possible overhead.
	(class DataKey): type specific key template to index DataList items.
	binary_lookup*(): implement binary lookups as templates.

Sat Mar 26 18:50:03 2005  Tim Janik  <timj@gtk.org>

	* rapicorn/standard.xml: empty skeleton.

Sat Mar 26 18:46:20 2005  Tim Janik  <timj@gtk.org>

	* configure.in: detect glib, pango and libz. fixed xmllint check.

	* rapicorn/Makefile.am: basic build rules.

Sat Mar 26 18:08:15 2005  Tim Janik  <timj@gtk.org>

	* AUTHORS, NEWS, README: describe affairs.

Sat Mar 26 17:51:28 2005  Tim Janik  <timj@gtk.org>

	* TODO, Makefile.am, autogen.sh, configure.in, po-helper.sh.in :
	add standard project files.

Sat Mar 26 17:22:26 2005  Tim Janik  <timj@gtk.org>

	* acbirnet.m4: usefull autoconf macros.
	

